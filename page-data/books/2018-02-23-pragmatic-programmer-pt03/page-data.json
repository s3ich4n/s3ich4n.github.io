{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/books/2018-02-23-pragmatic-programmer-pt03","result":{"data":{"markdownRemark":{"id":"42c675be-8075-539f-889d-10ef6802f7c3","html":"<h3 id=\"읽기에-앞서\" style=\"position:relative;\"><a href=\"#%EC%9D%BD%EA%B8%B0%EC%97%90-%EC%95%9E%EC%84%9C\" aria-label=\"읽기에 앞서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>읽기에 앞서…</h3>\n<p>실용주의 프로그래머를 읽고 느낀점을 써보려고 합니다. 제가 느낀바로는 이러한 내용이다 하는 방향으로 기술할 것 같습니다.</p>\n<h1 id=\"제-2장-실용주의-접근법\" style=\"position:relative;\"><a href=\"#%EC%A0%9C-2%EC%9E%A5-%EC%8B%A4%EC%9A%A9%EC%A3%BC%EC%9D%98-%EC%A0%91%EA%B7%BC%EB%B2%95\" aria-label=\"제 2장 실용주의 접근법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제 2장. 실용주의 접근법</h1>\n<p>이 장에서는 소프트웨어 개발에 있어 반드시 적용되는 아이디어나 보편화된 프로세스에 대해 소개한다.</p>\n<p>중복의 해악과 직교성(Orthogonality):</p>\n<ul>\n<li>전자? 시스템을 통틀어 어떤 지식을 중복하지 마라.</li>\n<li>후자? 하나의 지식을 여러 개의 컴포넌트에 걸쳐 쪼개어놓지 마라.</li>\n</ul>\n<p>가역성(Reversibility):</p>\n<ul>\n<li>변화하는 환경에서 프로젝트를 분리하는 방법</li>\n</ul>\n<p>예광탄(Tracer bullets):</p>\n<ul>\n<li>요구사항을 모음, 설계를 테스트, 코드를 구현함… 이런류의 개발 스타일을 소개함.</li>\n</ul>\n<p>프로토타입과 포스트잇:</p>\n<ul>\n<li>아키텍처, 알고리즘, 인터페이스, 아이디어를 구현하기 위해 프로토타입을 어떻게 쓰는가에 대한 이야기를 함.</li>\n</ul>\n<p>도메인 언어(Domain Language):</p>\n<ul>\n<li>???</li>\n</ul>\n<p>추정(Estimating):</p>\n<ul>\n<li>이정도 개발이면 이정도 쯤 걸리겠는데? 하고 감잡는 방법을 소개</li>\n</ul>\n<h2 id=\"7-중복의-해악\" style=\"position:relative;\"><a href=\"#7-%EC%A4%91%EB%B3%B5%EC%9D%98-%ED%95%B4%EC%95%85\" aria-label=\"7 중복의 해악 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7. 중복의 해악</h2>\n<p>지식은 변화한다. 요구사항이 바뀔 수도 있고 알고리즘이 안돌아가서 변경될 수 있고 그에 맞게 기능도 바뀐다. 한마디로 하자면 유지보수는 개발과 이어지는 부분이다 라고할 수 있다.\n유지보수를 하려면 사물의 표현방식을 바꿔야함. 객체화한 것들, 캡슐화한 부분들 등… 그렇지만 개발할 때 명세와 프로세스에 지식을 중복해서 넣기 쉽다는 점이다. 이것을 방지하기 위한 원칙은 DRY 원칙이다. 정의는 다음과 같다.</p>\n<p>모든 지식은 시스템 내에서 단일하고, 애매하지 않고, 믿을만한 표현양식을 가져야 한다.</p>\n<blockquote>\n<h2 id=\"tip-11-dry---dont-repeat-yourself\" style=\"position:relative;\"><a href=\"#tip-11-dry---dont-repeat-yourself\" aria-label=\"tip 11 dry   dont repeat yourself permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tip 11. DRY - Don’t Repeat Yourself</h2>\n</blockquote>\n<p>DRY를 따르지 않는다: 똑같은 것이 여러곳에 반복된다는 것이다. -> 지옥의 유지보수</p>\n<p>중복이 어떻게 생기는가?</p>\n<ul>\n<li>강요된(impose) 중복: 환경이 중복을 요구한다</li>\n<li>부주의한 중복: 개발자들이 중복하고 있다는 것을 인지하지 못함</li>\n<li>참을성 없는 중복: 중복이 쉬워보이기 때문에 개발자들이 게을러져서</li>\n<li>개발자 간의 중복: 한팀에 있는(다른팀에 있는) 여러 사람이 동일한 정보를 중복</li>\n</ul>\n<p>강요된 중복:\n필요한 지식을 한곳에 두도록 하는 기법들</p>\n<ul>\n<li>정보의 다양한 표현방식: 코딩할 때 동일한 정보가 다른 형태로 표현될 때가 있다.\n<ul>\n<li>공통된 구조를 다른 요소에서 서로 표현해야할 때</li>\n</ul>\n</li>\n<li>코드 생성기를 통해 두 요소의 표현을 자동화한다.\n<ul>\n<li>코드 내의 문서화</li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/books/2018-02-23---pragmatic-programmer-pt03//books/2018-02-23-pragmatic-programmer-pt03","tagSlugs":["/tag/book-review/"]},"frontmatter":{"date":"2018-02-23T09:00:00.000Z","description":"실용주의 프로그래머 2nd edition을 읽은 후... pt. 3","tags":["book_review"],"title":"실용주의 프로그래머 pt. 3","socialImage":{"publicURL":"/static/5198f5b3f44086ef968903c16c8af0df/gwangheungchang.jpg"}}}},"pageContext":{"slug":"/books/2018-02-23---pragmatic-programmer-pt03//books/2018-02-23-pragmatic-programmer-pt03"}},"staticQueryHashes":["251939775","357378587","401334301"]}