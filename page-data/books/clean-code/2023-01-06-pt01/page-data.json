{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/books/clean-code/2023-01-06-pt01","result":{"data":{"markdownRemark":{"id":"abce9c6b-cf6c-5aba-8ca1-e1c94fb6fa94","html":"<h1 id=\"1-깨끗한-코드\" style=\"position:relative;\"><a href=\"#1-%EA%B9%A8%EB%81%97%ED%95%9C-%EC%BD%94%EB%93%9C\" aria-label=\"1 깨끗한 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 깨끗한 코드</h1>\n<p>ChatGPT로 기술 발전이 무섭게 발전하는 지금, 기계가 못하는 것을 할 수 있도록 하기 위해 이 책을 폈습니다. 우리는 기계보다 나은 코드를 짜도록 연마해야할 것입니다.</p>\n<p>코드는 요구사항을 표현하기 위한 도구이며, 각 요구사항을 표현하기 위한 언어 또한 늘어나겠지요. 막연한 요구사항을 구체화하고, 이를 잘 풀어내는 것은 (아직은) 인간이 할 수 있는 것입니다. 그런고로, 잘 풀어내는 방법을 배워봅시다.</p>\n<p>나쁜코드가 왜 좋지 않은지 이야기해봅시다. 이 글을 읽으시는 모든 분들은 ‘나쁜 코드를 어떻게 좋게 바꾸지?’ 하고 고민하던 때가 있었을 것입니다.</p>\n<ol>\n<li>\n<p>급하다고 막 짠 코드로, ‘이거 돈다!’ 하는게 쌓이면 돌이킬 수 없습니다. 나중에 하자? <strong>나중은 없습니다.</strong> 실용주의 프로그래머에도 이런 말이 나옵니다: ‘깨진 유리창을 가만 두지 마라’.</p>\n</li>\n<li>\n<p>이런 나쁜 코드가 쌓이면 팀 생산성이 떨어집니다.</p>\n</li>\n<li>\n<p>설령 기회를 얻어, 나쁜 코드를 고칠 기회가 오더라도 모두 고치기는 쉽지 않을 것입니다.</p>\n</li>\n<li>\n<p>나쁜 코드를 유도하는 <strong>나쁜 설계</strong>를 유도하지 않도록 해야합니다. 좋은 설계에서 좋은 코드가 나올 수 있고, 좋은 코드를 유지하는 것 또한 좋은 설계의 일환입니다.</p>\n</li>\n</ol>\n<p>그런 의미로 코드를 잘 짜는 예술(Art)이 있다는 말에 어느정도 동의합니다. 아름다운 코드는 어떤 <em>감각</em>이라고 합니다. 아니 코드에 무슨 미학이 있는것도 아니고? 하는 생각이 들었는데, 수퍼스타들의 말을 읽어보니 납득이 됐습니다.</p>\n<h2 id=\"이-바닥-슈퍼스타들은\" style=\"position:relative;\"><a href=\"#%EC%9D%B4-%EB%B0%94%EB%8B%A5-%EC%8A%88%ED%8D%BC%EC%8A%A4%ED%83%80%EB%93%A4%EC%9D%80\" aria-label=\"이 바닥 슈퍼스타들은 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이 바닥 슈퍼스타들은…</h2>\n<ol>\n<li>Bjarne Stroustrup, (C++의 아버지)\n<ol>\n<li>우아하고 효율적인 코드</li>\n<li>의존성을 줄이라</li>\n<li>오류를 전략적으로 처리하라</li>\n<li>성능은 최적으로. 그렇다고 원칙없이 잘 돌아가는 코드를 짜면 안됨</li>\n<li>하나의 코드는 하나의 작동을 한다</li>\n</ol>\n</li>\n<li><a href=\"https://zetawiki.com/wiki/%EA%B7%B8%EB%9E%98%EB%94%94_%EB%B6%80%EC%B9%98\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Grady Booch</a> (Object Oriented Analysis and Design with Application](<a href=\"https://product.kyobobook.co.kr/detail/S000006439884)%5B%5E1%5D%EC%9D%98\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://product.kyobobook.co.kr/detail/S000006439884)[^1]의</a> 저자)\n<ol>\n<li>단순하고 직접적이다.</li>\n<li>잘 쓴 문장처럼 읽힌다.</li>\n<li>설계자의 의도가 바로 드러난다.</li>\n<li>명쾌한 추상화와 제어문으로 가득하다.</li>\n</ol>\n</li>\n<li>Dave A. Thomas(aka. “Big” Dave Thomas) (OTI의 창립자이자 이클립스 전략의 Godfather)\n<ol>\n<li>안 짠 사람도 읽기 쉽고 고치기 쉽다.</li>\n<li>유닛 테스트부터 인수 테스트까지 다 있다.</li>\n<li>의미 있는 이름이 붙는다.</li>\n<li>코드를 통해 목적을 달성하는 방법은 명확한 하나만 제공된다.</li>\n<li>API는 concise하다.</li>\n<li>어떤 면에서는 문학적이다. 모든 정보를 코드로 풀 수 없기 때문이다. → 사람이 읽기 쉬운 코드라는 뜻</li>\n</ol>\n</li>\n<li>Michale Feathers (<a href=\"https://www.amazon.com/Working-Effectively-Legacy-Michael-Feathers/dp/0131177052\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Working Effectively with Legacy Code</a><sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup> 의 저자)\n<ol>\n<li>손댈 곳이 없어보이는 코드를 짜자</li>\n<li>주의깊게 보이는 코드</li>\n</ol>\n</li>\n<li>Ron Jeffries (Extreme Programming Installed, Extreme Progreaaming Adventure in C#의 저자)\n<ol>\n<li>모든 테스트를 통과한다</li>\n<li>중복코드가 없다</li>\n<li>시스템 내 모든 설계 아이디어를 표현한다</li>\n<li>클래스, 메소드, 함수를 최소한으로 한다</li>\n</ol>\n</li>\n<li>Ward Cunningham (위키의 창시자, 익스트림 프로그래밍의 공동 창시자, OO의 정신적 지주)\n<ol>\n<li>루틴대로 도는 코드 → 의도가 명확한 코드</li>\n<li>문제를 풀기위해 보이는 코드</li>\n</ol>\n</li>\n<li>Robert C. Martin (aka. 밥 아저씨) (이 책의 저자)\n<ol>\n<li>앞으로의 내용은 책을 보면 알 것</li>\n<li>절대적인 것은 없으나, 상황에 맞는 기술과 기법을 익히길 바람</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"코드작성에-대한-태도\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C%EC%9E%91%EC%84%B1%EC%97%90-%EB%8C%80%ED%95%9C-%ED%83%9C%EB%8F%84\" aria-label=\"코드작성에 대한 태도 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드작성에 대한 태도</h2>\n<ul>\n<li>Javadoc에는 <code class=\"language-text\">@author</code> 필드가 있습니다. 우리는 수차례 코드를 읽고 씁니다. 좋은 글을 쓰기 위한 작가로서의 책임감을 가질 필요가 있습니다.</li>\n<li>보이스카우트 규칙을 기억하세요.\n<ul>\n<li><em>‘캠프장은 처음 왔을 때보다 더 깨끗하게 하고 나갈 것.’</em></li>\n<li>이는 ‘처음 왔을 때보다 <em>더 나은 세상</em>을 만들고 떠나려 노력하라. (후략)’ 라는 말에서 나왔다네요. 낭만이 있습니다…</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"논외로\" style=\"position:relative;\"><a href=\"#%EB%85%BC%EC%99%B8%EB%A1%9C\" aria-label=\"논외로 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>논외로</h1>\n<ul>\n<li>\n<p><a href=\"https://www.steveonstuff.com/2022/01/27/no-such-thing-as-clean-code\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">클린 코드 같은 건 없다!</a> 하는 당찬 제목이 있던데, 읽어보면 이 말입니다.</p>\n<ul>\n<li>업계마다 원하는게 다르고, 그에 따라 간결한 코드를 짜는 방법은 <em>모두에게 다르게 적용됩니다</em>.</li>\n<li>때에 맞는 기술을 잘 선택해야 <em>깨끗하다</em> 할 수 있습니다.</li>\n</ul>\n</li>\n<li>\n<p>원작자의 마지막 멘트로 이 글을 마무리합니다.</p>\n</li>\n</ul>\n<blockquote>\n<p>Hopefully I can convince you that you don’t really need clean code, you need <code class=\"language-text\">_____</code> code. It’s up to you to fill in that blank with words that describe what your project requires.</p>\n</blockquote>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-2\">이 링크를 참조하십시오.  <a href=\"#fnref-2\" class=\"footnote-backref\">↩</a></li>\n</ol>\n</div>","fields":{"slug":"/books/clean-code/2023-01-06---chapter01//books/clean-code/2023-01-06-pt01","tagSlugs":["/tag/book-review/","/tag/code-quality/"]},"frontmatter":{"date":"2023-01-06T22:51:00.000Z","description":"2023년 1월부터 시작한 클린 코드 독파 스터디 후, 매 모임 전 준비하는 게시글을 공유합니다. 이 글은 1장, 깨끗한 코드에 대해 알아봅니다.","tags":["book_review","code_quality"],"title":"클린 코드 스터디 (1): 깨끗한 코드","socialImage":{"publicURL":{"publicURL":"/static/483b84108696f21f6329d1cecf5d8a3f/water.jpg"}}}}},"pageContext":{"slug":"/books/clean-code/2023-01-06---chapter01//books/clean-code/2023-01-06-pt01"}},"staticQueryHashes":["251939775","357378587","401334301"]}