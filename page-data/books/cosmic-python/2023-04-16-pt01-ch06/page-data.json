{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/books/cosmic-python/2023-04-16-pt01-ch06","result":{"data":{"markdownRemark":{"id":"2b3f725d-34c8-5cd0-b7d6-39341b6a82ca","html":"<p>이 내용은 “파이썬으로 살펴보는 아키텍처 패턴” 을 읽고 작성한 내용입니다. 블로그 게시글과, 작성한 코드를 함께 보시면 더욱 좋습니다.</p>\n<p>6장은 해당 코드를 살펴봐주세요. <a href=\"https://github.com/s3ich4n/cosmicpython-study/tree/main/pt1/ch06\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">코드 링크</a></p>\n<h1 id=\"6장-unit-of-workuow-pattern\" style=\"position:relative;\"><a href=\"#6%EC%9E%A5-unit-of-workuow-pattern\" aria-label=\"6장 unit of workuow pattern permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6장 Unit of Work(UoW) Pattern</h1>\n<p>작업 단위 패턴(UoW Pattern) 은 저장소와 서비스 계층 패턴을 하나로 묶어주는 것을 의미한다.</p>\n<p>저장소 패턴이 영속적 저장소 개념에 대한 추상화라면 UoW 패턴은 원자적 연산(atomic operation) 개념에 대한 추상화를 의미한다. 이 패턴을 사용하면 서비스 계층과 데이터 계층의 분리가 가능하다.</p>\n<p>이게…</p>\n<p><img src=\"%5Bhttps://www.cosmicpython.com/book/images/apwp_0601.png%5D(https://www.cosmicpython.com/book/images/apwp_0601.png)\" alt=\"\"></p>\n<p>이런 식의 UoW를 추가하여 DB의 상태를 관리하게 된다.</p>\n<p><img src=\"%5Bhttps://www.cosmicpython.com/book/images/apwp_0602.png%5D(https://www.cosmicpython.com/book/images/apwp_0602.png)\" alt=\"\"></p>\n<p>목표는 다음과 같다</p>\n<ul>\n<li>API는 두 가지 일만 함\n<ul>\n<li>작업 단위 초기화</li>\n<li>서비스 호출\n<ul>\n<li>서비스는 UoW와 협력(저자는 UoW도 계층처럼 생각하는 편)한다</li>\n<li>서비스 함수 자체나 API는 DB와 직접 대화하지 않는다</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>이 작업은 컨텍스트 매니저를 통해 수행한다(SQLAlchemy에서 이 철학을 쓴다)</li>\n</ul>\n<h1 id=\"61-작업-단위는-저장소와-협력\" style=\"position:relative;\"><a href=\"#61-%EC%9E%91%EC%97%85-%EB%8B%A8%EC%9C%84%EB%8A%94-%EC%A0%80%EC%9E%A5%EC%86%8C%EC%99%80-%ED%98%91%EB%A0%A5\" aria-label=\"61 작업 단위는 저장소와 협력 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6.1 작업 단위는 저장소와 협력</h1>\n<p>이 패턴을 적용한 코드는 대충 이런 모습이다:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span>\n    orderid<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> sku<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> qty<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>\n    uow<span class=\"token punctuation\">:</span> unit_of_work<span class=\"token punctuation\">.</span>AbstractUnitOfWork<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">:</span>\n    line <span class=\"token operator\">=</span> OrderLine<span class=\"token punctuation\">(</span>orderid<span class=\"token punctuation\">,</span> sku<span class=\"token punctuation\">,</span> qty<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">with</span> uow<span class=\"token punctuation\">:</span>  <span class=\"token comment\">#(1)</span>\n        batches <span class=\"token operator\">=</span> uow<span class=\"token punctuation\">.</span>batches<span class=\"token punctuation\">.</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#(2)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n        batchref <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>allocate<span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">,</span> batches<span class=\"token punctuation\">)</span>\n        uow<span class=\"token punctuation\">.</span>commit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#(3)</span></code></pre></div>\n<ol>\n<li><code class=\"language-text\">contextmanager</code> 로 UoW 시작</li>\n<li><code class=\"language-text\">uow.batches</code> 는 배치 저장소다. 즉 UoW는 영속적 저장소에 대한 접근을 제공한다.</li>\n<li>작업이 끝나면 커밋하거나 롤백한다</li>\n</ol>\n<p>(흠… uow 컨텍스트 매니저 끝에 try-except-finally 등으로 명시하는건 어떨까?\n→ 라고 생각했다면 6.6장을 보십시오)</p>\n<p>UoW는 영속적 저장소에 대한 단일 진입점으로 작용한다. UoW는 어떤 객체가 메모리에 적재되었으며 어떤 객체가 최종 상태인지 기억한다<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>.</p>\n<p>이 방식의 장점은 아래와 같다:</p>\n<ol>\n<li>작업에 사용할 DB의 안정적인 스냅샷을 제공하고, 연산을 진행하는 과정에서 변경하지 않은 객체에 대한 스냅샷도 제공한다</li>\n<li>변경 내용을 한번에 영속화할 방법을 제공한다. 어딘가 잘못되어도 일관성 없는 상태로 끝나지 않는다</li>\n<li>영속성을 처리하기 위한 간단한 API와 저장소를 쉽게 얻을 수 있는 장소를 제공한다</li>\n</ol>\n<h1 id=\"62-테스트-통합-테스트로-uow-조정하기\" style=\"position:relative;\"><a href=\"#62-%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%86%B5%ED%95%A9-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A1%9C-uow-%EC%A1%B0%EC%A0%95%ED%95%98%EA%B8%B0\" aria-label=\"62 테스트 통합 테스트로 uow 조정하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6.2 테스트-통합 테스트로 UoW 조정하기</h1>\n<p>UoW의 통합 테스트는 아래와 같다:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">test_uow_can_retrieve_a_batch_and_allocate_to_it</span><span class=\"token punctuation\">(</span>session_factory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    session <span class=\"token operator\">=</span> session_factory<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    insert_batch<span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">,</span> <span class=\"token string\">'batch1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'HIPSTER-WORKBENCH'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\n    session<span class=\"token punctuation\">.</span>commit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    uow <span class=\"token operator\">=</span> unit_of_work<span class=\"token punctuation\">.</span>SqlAlchemyUnitOfWork<span class=\"token punctuation\">(</span>session_factory<span class=\"token punctuation\">)</span>    <span class=\"token comment\"># (1)</span>\n\n    <span class=\"token keyword\">with</span> uow<span class=\"token punctuation\">:</span>\n        batch <span class=\"token operator\">=</span> uow<span class=\"token punctuation\">.</span>batches<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>reference<span class=\"token operator\">=</span><span class=\"token string\">'batch1'</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># (2)</span>\n        line <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>OrderLine<span class=\"token punctuation\">(</span><span class=\"token string\">'o1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'HIPSTER-WORKBENCH'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n        batch<span class=\"token punctuation\">.</span>allocate<span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span>\n        uow<span class=\"token punctuation\">.</span>commit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    batchref <span class=\"token operator\">=</span> get_allocated_batch_ref<span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">,</span> <span class=\"token string\">'o1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'HIPSTER-WORKBENCH'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">assert</span> batchref <span class=\"token operator\">==</span> <span class=\"token string\">'batch1'</span></code></pre></div>\n<p>UoW는 “뭘 해야할지”를 테스트한다.</p>\n<ol>\n<li>커스텀 세션 팩토리로 세션을 받아온다</li>\n<li><code class=\"language-text\">uow.batches</code> 를 통해서 배치 저장소에 대해 접근한다</li>\n<li>작업이 끝나면 UoW에 대한 <code class=\"language-text\">commit()</code> 을 호출한다</li>\n</ol>\n<p><code class=\"language-text\">insert_batch</code> 나 <code class=\"language-text\">get_allocated_batch_ref</code> 는 헬퍼 함수다</p>\n<h1 id=\"63-작업-단위와-작업-단위의-contextmanager\" style=\"position:relative;\"><a href=\"#63-%EC%9E%91%EC%97%85-%EB%8B%A8%EC%9C%84%EC%99%80-%EC%9E%91%EC%97%85-%EB%8B%A8%EC%9C%84%EC%9D%98-contextmanager\" aria-label=\"63 작업 단위와 작업 단위의 contextmanager permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6.3 작업 단위와 작업 단위의 <code class=\"language-text\">contextmanager</code></h1>\n<p>테스트 코드에서는 UoW의 인터페이스가 뭘 해야될지 기재했다. 그렇다면 추상 클래스를 통해 인터페이스를 제공하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> abc\n\n<span class=\"token keyword\">from</span> pt1<span class=\"token punctuation\">.</span>ch06<span class=\"token punctuation\">.</span>adapters <span class=\"token keyword\">import</span> repository\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AbstractUnitOfWork</span><span class=\"token punctuation\">(</span>abc<span class=\"token punctuation\">.</span>ABC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    batches<span class=\"token punctuation\">:</span> repository<span class=\"token punctuation\">.</span>AbstractRepository <span class=\"token comment\"># (1)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__aexit__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> exc_type<span class=\"token punctuation\">,</span> exc_val<span class=\"token punctuation\">,</span> exc_tb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># (2)</span>\n        self<span class=\"token punctuation\">.</span>rollback<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># (4)</span>\n\n    <span class=\"token decorator annotation punctuation\">@abc<span class=\"token punctuation\">.</span>abstractmethod</span>\n    <span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">commit</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># (3)</span>\n        <span class=\"token keyword\">raise</span> NotImplementedError\n\n    <span class=\"token decorator annotation punctuation\">@abc<span class=\"token punctuation\">.</span>abstractmethod</span>\n    <span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">rollback</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># (4)</span>\n        <span class=\"token keyword\">raise</span> NotImplementedError</code></pre></div>\n<ol>\n<li>저장소에 접근할 수 있도록 설정한다.</li>\n<li>컨텍스트 매니저에 대한 매직 메소드. 이를 통해 <code class=\"language-text\">with</code> 구문을 쓸 수 있다.\n<ol>\n<li>추가로, <code class=\"language-text\">__aenter__</code> 나 <code class=\"language-text\">__aexit__</code> 은 비동기 처리를 위한 구문이다.</li>\n</ol>\n</li>\n<li>커밋할 때가 되면 이 메소드로 커밋한다.</li>\n<li>문제가 생기면 예외를 발생시켜 컨텍스트 매니저를 빠져나가면 알아서 rollback 한다</li>\n</ol>\n<h2 id=\"631-sqlalchemy-세션을-이용하는-실제-uow\" style=\"position:relative;\"><a href=\"#631-sqlalchemy-%EC%84%B8%EC%85%98%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%98%EB%8A%94-%EC%8B%A4%EC%A0%9C-uow\" aria-label=\"631 sqlalchemy 세션을 이용하는 실제 uow permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6.3.1 SQLAlchemy 세션을 이용하는 실제 UoW</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SqlAlchemyUnitOfWork</span><span class=\"token punctuation\">(</span>AbstractUnitOfWork<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> session_factory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>_session_factory <span class=\"token operator\">=</span> session_factory <span class=\"token comment\"># (1)</span>\n\n    <span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">__aenter__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># (2)</span>\n        self<span class=\"token punctuation\">.</span>_session <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_session_factory<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>batches <span class=\"token operator\">=</span> repository<span class=\"token punctuation\">.</span>SqlAlchemyRepository<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__aenter__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">__aexit__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> exc_type<span class=\"token punctuation\">,</span> exc_val<span class=\"token punctuation\">,</span> exc_tb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">await</span> <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__aexit__<span class=\"token punctuation\">(</span>exc_type<span class=\"token punctuation\">,</span> exc_val<span class=\"token punctuation\">,</span> exc_tb<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">await</span> self<span class=\"token punctuation\">.</span>_session<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># (3)</span>\n\n    <span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">commit</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># (4)</span>\n        <span class=\"token keyword\">await</span> self<span class=\"token punctuation\">.</span>_session<span class=\"token punctuation\">.</span>commit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">rollback</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># (4)</span>\n        <span class=\"token keyword\">await</span> self<span class=\"token punctuation\">.</span>_session<span class=\"token punctuation\">.</span>rollback<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ol>\n<li>세션 팩토리를 여기서 골라갈 수 있게 한다. 통합테스트에서는 오버라이드를 수행해서 SQLite를 쓰게 만들 것이다</li>\n<li><code class=\"language-text\">__aenter__</code> 는 DB세션 시작 및 저장소를 인스턴스화한다</li>\n<li>컨텍스트 관리자에서 나올 때 세션을 닫는다</li>\n<li>세션에 사용할 <code class=\"language-text\">commit()</code> 과 <code class=\"language-text\">rollback()</code>을 제공한다</li>\n</ol>\n<h2 id=\"632-테스트를-위한-가짜-uow\" style=\"position:relative;\"><a href=\"#632-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EC%9C%84%ED%95%9C-%EA%B0%80%EC%A7%9C-uow\" aria-label=\"632 테스트를 위한 가짜 uow permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6.3.2 테스트를 위한 가짜 UoW</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FakeUnitOfWork</span><span class=\"token punctuation\">(</span>unit_of_work<span class=\"token punctuation\">.</span>AbstractUnitOfWork<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>batches <span class=\"token operator\">=</span> FakeRepository<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># (1)</span>\n        self<span class=\"token punctuation\">.</span>committed <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span> <span class=\"token comment\"># (2)</span>\n\n    <span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">commit</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>committed <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span> <span class=\"token comment\"># (2)</span>\n\n    <span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">rollback</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">pass</span>\n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token decorator annotation punctuation\">@pytest<span class=\"token punctuation\">.</span>mark<span class=\"token punctuation\">.</span>asyncio</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">test_add_batch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    uow <span class=\"token operator\">=</span> FakeUnitOfWork<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># (3)</span>\n    <span class=\"token keyword\">await</span> services<span class=\"token punctuation\">.</span>add_batch<span class=\"token punctuation\">(</span><span class=\"token string\">\"b1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"CRUNCHY-ARMCHAIR\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> uow<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">assert</span> <span class=\"token keyword\">await</span> uow<span class=\"token punctuation\">.</span>batches<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"b1\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span>\n    <span class=\"token keyword\">assert</span> uow<span class=\"token punctuation\">.</span>committed\n\n<span class=\"token decorator annotation punctuation\">@pytest<span class=\"token punctuation\">.</span>mark<span class=\"token punctuation\">.</span>asyncio</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">test_returns_allocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    uow <span class=\"token operator\">=</span> FakeUnitOfWork<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># (3)</span>\n\n    repo <span class=\"token operator\">=</span> FakeRepository<span class=\"token punctuation\">.</span>for_batch<span class=\"token punctuation\">(</span><span class=\"token string\">\"b1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"COMPLICATED-LAMP\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> eta<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\n    result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> services<span class=\"token punctuation\">.</span>allocate<span class=\"token punctuation\">(</span><span class=\"token string\">\"o1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"COMPLICATED-LAMP\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> uow<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">assert</span> result <span class=\"token operator\">==</span> <span class=\"token string\">\"b1\"</span></code></pre></div>\n<ol>\n<li>이 둘은 마치 결합된(coupled) 것 처럼 밀접하게 연관되어있다. 그렇지만 이 둘은 서로 협력자니까 크게 문제되지 않는다</li>\n<li>가짜 commit과 <code class=\"language-text\">FakeSession</code> 은 제 3자의 코드가 아니라 “내 코드” 를 가짜로 구현한 것이다. 이것은 큰 개선이다! ‘<a href=\"https://github.com/testdouble/contributing-tests/wiki/Don&#x27;t-mock-what-you-don&#x27;t-own\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">당신이 만든 것이 아니면 모킹하지 마라</a>’ 하는 말에 부합하기 때문이다.</li>\n<li>테스트에서는 UoW를 인스턴스화 하고 서비스 계층에 저장소와 세션을 넘기는 대신 이거 하나로 퉁칠 수 있다. 훨씬 덜 번거롭다!</li>\n</ol>\n<h3 id=\"당신이-만든-것이-아니면-모킹하지-마라dont-mock-what-you-dont-own\" style=\"position:relative;\"><a href=\"#%EB%8B%B9%EC%8B%A0%EC%9D%B4-%EB%A7%8C%EB%93%A0-%EA%B2%83%EC%9D%B4-%EC%95%84%EB%8B%88%EB%A9%B4-%EB%AA%A8%ED%82%B9%ED%95%98%EC%A7%80-%EB%A7%88%EB%9D%BCdont-mock-what-you-dont-own\" aria-label=\"당신이 만든 것이 아니면 모킹하지 마라dont mock what you dont own permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>당신이 만든 것이 아니면 모킹하지 마라(<strong>Don’t mock what you don’t own)</strong></h3>\n<p>세션보다 UoW를 모킹한게 편한 이유는 뭘까? 두가지 가짜(UoW, 세션)는 목적이 같다. 영속성 게층을 바꿔서 실제 DB를 안 쓰고 메모리 상에서 테스트할 수 있게 하는 것이다. 가짜 객체 두 개를 써서 얻을 수 있는 최종 설계에 차이가 있다.</p>\n<p>예를들어 SQLAlchemy 대신 목 객체를 만들어서 Session을 코드 전반에 쓰면, DB 접근 코드가 코드베이스 여기저기에 흩어진다. 이런 상황을 피하기 위해 영속적 계층에 대한 접근을 제한해서 필요한 것”만” 가지게 한다.</p>\n<p>코드를 Session 인터페이스와 결합하면 SQLAlchemy의 모든 복잡성과 결합하기로 하는 대신 더 간단한 추상화를 택하고 이를 통해 책임을 명확히 분리한다.</p>\n<p>이 문단이 시사하는 바는 복잡한 하위 시스템 위에 간단한 추상화를 만들도록 해주는 기본 규칙이다. 간단한 추상화를 하면 성능상으로는 동일하나 내 설계가 맞는 방안인지 보다 신중하게 생각하도록 해준다.</p>\n<h1 id=\"64-uow-를-서비스계층에-써먹기\" style=\"position:relative;\"><a href=\"#64-uow-%EB%A5%BC-%EC%84%9C%EB%B9%84%EC%8A%A4%EA%B3%84%EC%B8%B5%EC%97%90-%EC%8D%A8%EB%A8%B9%EA%B8%B0\" aria-label=\"64 uow 를 서비스계층에 써먹기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6.4 UoW 를 서비스계층에 써먹기</h1>\n<p>이런식으로 리팩토링이 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">add_batch</span><span class=\"token punctuation\">(</span>\n        ref<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span>\n        sku<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span>\n        qty<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>\n        eta<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span>date<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        uow<span class=\"token punctuation\">:</span> unit_of_work<span class=\"token punctuation\">.</span>AbstractUnitOfWork <span class=\"token comment\"># (1)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">async</span> <span class=\"token keyword\">with</span> uow<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">await</span> uow<span class=\"token punctuation\">.</span>batches<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>Batch<span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">,</span> sku<span class=\"token punctuation\">,</span> qty<span class=\"token punctuation\">,</span> eta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">await</span> uow<span class=\"token punctuation\">.</span>commit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span>\n        orderid<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span>\n        sku<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span>\n        qty<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>\n        uow<span class=\"token punctuation\">:</span> unit_of_work<span class=\"token punctuation\">.</span>AbstractUnitOfWork  <span class=\"token comment\"># (1)</span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">:</span>\n    line <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>OrderLine<span class=\"token punctuation\">(</span>orderid<span class=\"token punctuation\">,</span> sku<span class=\"token punctuation\">,</span> qty<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">async</span> <span class=\"token keyword\">with</span> uow<span class=\"token punctuation\">:</span>\n        batches <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> uow<span class=\"token punctuation\">.</span>batches<span class=\"token punctuation\">.</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> is_valid_sku<span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">.</span>sku<span class=\"token punctuation\">,</span> batches<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">raise</span> InvalidSku<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'Invalid sku </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>line<span class=\"token punctuation\">.</span>sku<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n\n        batchref <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>allocate<span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">,</span> batches<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">await</span> uow<span class=\"token punctuation\">.</span>commit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span></code></pre></div>\n<ol>\n<li>서비스 계층의 의존성은 UoW 추상화 하나 뿐이다</li>\n</ol>\n<h1 id=\"65-커밋롤백에-대한-명시적-테스트\" style=\"position:relative;\"><a href=\"#65-%EC%BB%A4%EB%B0%8B%EB%A1%A4%EB%B0%B1%EC%97%90-%EB%8C%80%ED%95%9C-%EB%AA%85%EC%8B%9C%EC%A0%81-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"65 커밋롤백에 대한 명시적 테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6.5 커밋/롤백에 대한 명시적 테스트</h1>\n<p>UoW를 구현해봤으니, 이러면 커밋/롤백을 테스트 하고싶어진다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@pytest<span class=\"token punctuation\">.</span>mark<span class=\"token punctuation\">.</span>asyncio</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">test_rolls_back_uncommitted_work_by_default</span><span class=\"token punctuation\">(</span>session_factory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    uow <span class=\"token operator\">=</span> unit_of_work<span class=\"token punctuation\">.</span>SqlAlchemyUnitOfWork<span class=\"token punctuation\">(</span>session_factory<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">async</span> <span class=\"token keyword\">with</span> uow<span class=\"token punctuation\">:</span>\n        insert_batch<span class=\"token punctuation\">(</span>uow<span class=\"token punctuation\">.</span>_session<span class=\"token punctuation\">,</span> <span class=\"token string\">'batch1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'MEDIUM-PLINTH'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\n\n    new_session <span class=\"token operator\">=</span> session_factory<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    rows <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">await</span> new_session<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">(</span><span class=\"token string\">'SELECT * FROM batches'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">assert</span> rows <span class=\"token operator\">==</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token decorator annotation punctuation\">@pytest<span class=\"token punctuation\">.</span>mark<span class=\"token punctuation\">.</span>asyncio</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">test_rolls_back_on_error</span><span class=\"token punctuation\">(</span>session_factory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyException</span><span class=\"token punctuation\">(</span>Exception<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">pass</span>\n\n    uow <span class=\"token operator\">=</span> unit_of_work<span class=\"token punctuation\">.</span>SqlAlchemyUnitOfWork<span class=\"token punctuation\">(</span>session_factory<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">with</span> pytest<span class=\"token punctuation\">.</span>raises<span class=\"token punctuation\">(</span>MyException<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">async</span> <span class=\"token keyword\">with</span> uow<span class=\"token punctuation\">:</span>\n            insert_batch<span class=\"token punctuation\">(</span>uow<span class=\"token punctuation\">.</span>_session<span class=\"token punctuation\">,</span> <span class=\"token string\">'batch1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'MEDIUM-PLINTH'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">raise</span> MyException<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    new_session <span class=\"token operator\">=</span> session_factory<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    rows <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">await</span> new_session<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">(</span><span class=\"token string\">'SELECT * FROM batches'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">assert</span> rows <span class=\"token operator\">==</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>아래 내용을 테스트한다!</p>\n<ul>\n<li>커밋 안 한 내용이 DB에 실제로 “없는지” 확인</li>\n<li>롤백으로 인해 DB에 실제로 “없는지” 확인</li>\n</ul>\n<blockquote>\n<p>Tip</p>\n</blockquote>\n<p>트랜잭션 같은 ‘불확실한’ DB동작을 ‘실제’ DB엔진에 대해 테스트할 가치가 있다.\nPostgres같은 RDBMS로 바꾸고 나서 테스트하면 훨씬 편리할 것이다.</p>\n<blockquote>\n</blockquote>\n<h1 id=\"66-명시적-커밋과-암시적-커밋\" style=\"position:relative;\"><a href=\"#66-%EB%AA%85%EC%8B%9C%EC%A0%81-%EC%BB%A4%EB%B0%8B%EA%B3%BC-%EC%95%94%EC%8B%9C%EC%A0%81-%EC%BB%A4%EB%B0%8B\" aria-label=\"66 명시적 커밋과 암시적 커밋 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6.6 명시적 커밋과 암시적 커밋</h1>\n<p>디폴트로 결과를 커밋하고 예외 발생 시에만 롤백하는 (처음 내 생각대로) 의 UoW는 <code class=\"language-text\">__aexit__</code> 에서 <code class=\"language-text\">exn_type</code> 이 <code class=\"language-text\">None</code> 일 때 커밋하는 것이다.</p>\n<p>그런데 저자는 명시적 커밋이 낫다고 생각한다. 소프트웨어가 명령을 안 내리면 <strong><strong><strong><strong><strong><strong><strong>아무 것도 안 한다</strong></strong></strong></strong></strong></strong></strong>가 낫다라고 생각한다. 코드의 실행 상태를 추론하기도 보다 나아진다. 명시적이니까.</p>\n<p>그리고 롤백하면 걍 마지막 지점으로 돌아가니까 중간 변화를 모두 포기한다. 로직 파악이 수월하다는 장점이 있다.</p>\n<h1 id=\"67-예제-uow를-사용해-여러-연산을-원자적-단위로-묶기\" style=\"position:relative;\"><a href=\"#67-%EC%98%88%EC%A0%9C-uow%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4-%EC%97%AC%EB%9F%AC-%EC%97%B0%EC%82%B0%EC%9D%84-%EC%9B%90%EC%9E%90%EC%A0%81-%EB%8B%A8%EC%9C%84%EB%A1%9C-%EB%AC%B6%EA%B8%B0\" aria-label=\"67 예제 uow를 사용해 여러 연산을 원자적 단위로 묶기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6.7 예제: UoW를 사용해 여러 연산을 원자적 단위로 묶기</h1>\n<p>UoW를 통한 코드 추론이 쉬워지는 것을 살펴보자!</p>\n<h2 id=\"671-예제-1-재할당\" style=\"position:relative;\"><a href=\"#671-%EC%98%88%EC%A0%9C-1-%EC%9E%AC%ED%95%A0%EB%8B%B9\" aria-label=\"671 예제 1 재할당 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6.7.1 예제 1: 재할당</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">reallocate</span><span class=\"token punctuation\">(</span>\n        line<span class=\"token punctuation\">:</span> OrderLine<span class=\"token punctuation\">,</span>\n        uow<span class=\"token punctuation\">:</span> AbstractUnitOfWork<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">with</span> uow<span class=\"token punctuation\">:</span>\n        batch <span class=\"token operator\">=</span> uow<span class=\"token punctuation\">.</span>batches<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>sku<span class=\"token operator\">=</span>line<span class=\"token punctuation\">.</span>sku<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> batch <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">raise</span> InvalidSku<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"invalid sku </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>line<span class=\"token punctuation\">.</span>sku<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n        batch<span class=\"token punctuation\">.</span>deallocate<span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span> <span class=\"token comment\"># (1)</span>\n        allocate<span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span> <span class=\"token comment\"># (2)</span>\n        uow<span class=\"token punctuation\">.</span>commit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ol>\n<li><code class=\"language-text\">deallocate()</code>이 실패하면 당연히 <code class=\"language-text\">allocate()</code>이 안 돌기를 바란다</li>\n<li><code class=\"language-text\">allocate()</code>이 실패하면 <code class=\"language-text\">deallocate()</code> 한 결과만 커밋하고 싶지는 않을 것이다</li>\n</ol>\n<p>둘 다 제대로 작동하기를 바란다는 뜻</p>\n<h2 id=\"672-예제-2-배치-수량-변경\" style=\"position:relative;\"><a href=\"#672-%EC%98%88%EC%A0%9C-2-%EB%B0%B0%EC%B9%98-%EC%88%98%EB%9F%89-%EB%B3%80%EA%B2%BD\" aria-label=\"672 예제 2 배치 수량 변경 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6.7.2 예제 2: 배치 수량 변경</h2>\n<p>운송 중 문제가 생겨 제대로 배송이 안 되었다는 상황을 코드로 풀어보자</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">change_batch_quantity</span><span class=\"token punctuation\">(</span>\n        batchref<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span>\n        new_qty<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>\n        uow<span class=\"token punctuation\">:</span> AbstractUnitOfWork<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">with</span> uow<span class=\"token punctuation\">:</span>\n        batch <span class=\"token operator\">=</span> uow<span class=\"token punctuation\">.</span>batches<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>reference<span class=\"token operator\">=</span>batchref<span class=\"token punctuation\">)</span>\n        batch<span class=\"token punctuation\">.</span>change_purchased_quantity<span class=\"token punctuation\">(</span>new_qty<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">while</span> batch<span class=\"token punctuation\">.</span>available_quantity <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            line <span class=\"token operator\">=</span> batch<span class=\"token punctuation\">.</span>deallocate_one<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># (1)</span>\n        uow<span class=\"token punctuation\">.</span>commit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ol>\n<li>원하는 만큼 할당 해제를 하려 하지만, 실패하면 그 어떤 사항도 적용되면 안 된다! 정합성을 유지해야한다!</li>\n</ol>\n<h1 id=\"68-통합-테스트-정리하기\" style=\"position:relative;\"><a href=\"#68-%ED%86%B5%ED%95%A9-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%A0%95%EB%A6%AC%ED%95%98%EA%B8%B0\" aria-label=\"68 통합 테스트 정리하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6.8 통합 테스트 정리하기</h1>\n<p><code class=\"language-text\">integration</code> 디렉토리 안을 보면 테스트 관련 코드가 3개 있다.</p>\n<ul>\n<li><code class=\"language-text\">test_orm.py</code>\n<ul>\n<li>SQLAlchemy 를 내 로직에 맞게 풀어낸 것을 테스트한다</li>\n</ul>\n</li>\n<li><code class=\"language-text\">test_repository.py</code>\n<ul>\n<li>주요 리포지토리 로직을 테스트한다</li>\n</ul>\n</li>\n<li><code class=\"language-text\">test_uow.py</code>\n<ul>\n<li>추상화 레벨을 올리면 좋을듯?</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"69-마치며\" style=\"position:relative;\"><a href=\"#69-%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"69 마치며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6.9 마치며</h1>\n<p>UoW의 유용성과 <code class=\"language-text\">contextmanager</code> 를 통한 pythonic code 생성을 맛보았다.</p>\n<p>근데 이미 사실 SQLAlchemy 내부적으로 Session 객체가 UoW대로 구현되어있다. SQLAlchemy의 세션객체는 DB에서 새 엔티티를 읽을 때마다 엔티티의 변화를 추적하고, 세션 <code class=\"language-text\">flush</code> 를 수행할 때 모든 내용을 한꺼번에 영속화한다.</p>\n<p>근데 쓰는 이유가 있겠지? 여기까지의 트레이드오프를 살펴보자:</p>\n<table>\n<thead>\n<tr>\n<th>장점</th>\n<th>단점</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>원자적 연산을 표현하는 좋은 추상화 레벨을 가진다. contextmanager 를 사용해서 atomic하게 한 그룹으로 묶어야 하는 코드 블록을 시각적으로 쉽게 알아볼 수 있다.</td>\n<td>ORM은 이미 원자성을 중심으로 좋은 추상화를 제공할 수도 있다. SQLAlchemy에는 이미 contextmanager를 제공한다. 세션을 주고받는 것 만으로도 많은 기능을 꽁으로 먹을 수 있다</td>\n</tr>\n<tr>\n<td>트랜잭션 시작-끝 을 명시적으로 제어할 수 있고, 앱이 실패하면 롤백한다. 연산이 부분적으로 커밋되는 걱정을 덜어낼 수 있다</td>\n<td>롤백, 다중스레딩, nested transactions등의 코드를 짤 때는 보다 더 신중하게 접근해야 한다.</td>\n</tr>\n<tr>\n<td>원자성은 트랜잭션 뿐 아니라 이벤트, 메시지 버스를 사용할 때도 도움이 된다.</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>SQLAlchemy의 Session API는 풍부한 기능과 도메인에서 불필요한 연산을 제공한다. UoW는 세션을 단순화해 핵심부분만 쓸 수 있게 해준다. UoW를 시작하고, 커밋하거나 작업결과를 갖다버릴 수도 있다(<em>thrown away</em>).</p>\n<p>UoW를 써서 Repository 객체에 접근하는건 그냥 SQLAlchemy Session 만 써선 쓸 수 없는 장점을 가진다.</p>\n<h2 id=\"uow-정리\" style=\"position:relative;\"><a href=\"#uow-%EC%A0%95%EB%A6%AC\" aria-label=\"uow 정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>UoW 정리</h2>\n<ol>\n<li>UoW 패턴은 데이터 무결성 중심 추상화다\n<ol>\n<li>연산 끝에 commit (이후 flush) 를 통해 도메인 모델의 일관성을 강화하고 성능향상(?)에 도움이 된다</li>\n</ol>\n</li>\n<li>저장소, 서비스 계층 패턴과 밀접하게 연관되어 작동한다\n<ol>\n<li>UoW는 원자적 업데이를 표현해 데이터 접근에 대한 추상화를 완성시켜준다. 서비스 계층의 유스케이스들은 블록단위로 성공하거나 실패하는 별도의 작업단위로 실행된다</li>\n</ol>\n</li>\n<li>contextmanager를 쓰는 유스케이스\n<ol>\n<li>rollback을 파이썬스럽게 풀어냈다는 점에서 이미 매우 훌륭하다</li>\n</ol>\n</li>\n<li>SQLAlchemy는 이미 UoW 패턴을 제공한다\n<ol>\n<li>SQLAlchemy의 Session 객체를 더 간단히 추상화해서 필요한 기능”만” 쓸 수 있게 노출시킨다.</li>\n</ol>\n</li>\n<li>UoW 도 추상화로 또 감싸서 의존성 역전 원칙을 활용한다</li>\n</ol>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">어떤 목표를 달성하기 위해 서로 협력하는 객체를 묘사하는 협력자(collaborator) 라는 단어가 있다. UoW와 Repository는 객체 모델링의 측면에서 아주 적절한 협력자의 예시라 할 수 있다. 책임 주도 설계에서 자신의 역할 안에서 협력하는 여러 객체를 이웃 객체(object neighborhood)라고 한다.<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a></li>\n</ol>\n</div>","fields":{"slug":"/books/cosmic-python/2023-04-16---pt01-ch06//books/cosmic-python/2023-04-16-pt01-ch06","tagSlugs":["/tag/ddd/","/tag/books/","/tag/backend/","/tag/python/"]},"frontmatter":{"date":"2023-04-16T19:09:45.000Z","description":"파이썬으로 살펴보는 아키텍처 패턴을 읽고 이해한 내용을 작성합니다. 챕터 6, 작업단위 패턴에 대한 내용입니다.","tags":["ddd","books","backend","python"],"title":"파이썬으로 살펴보는 아키텍처 패턴 (6)","socialImage":{"publicURL":{"publicURL":"/static/66b1d3acbf31f0d2ad20eee928a14aaa/universe.jpg"}}}}},"pageContext":{"slug":"/books/cosmic-python/2023-04-16---pt01-ch06//books/cosmic-python/2023-04-16-pt01-ch06"}},"staticQueryHashes":["251939775","357378587","401334301"]}