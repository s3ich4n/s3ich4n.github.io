{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/books/cosmic-python/2023-05-06-pt02-ch09","result":{"data":{"markdownRemark":{"id":"608a6866-dd46-526e-9ea5-4d48559b8b6f","html":"<p>이 내용은 “파이썬으로 살펴보는 아키텍처 패턴” 을 읽고 작성한 내용입니다. 블로그 게시글과, 작성한 코드를 함께 보시면 더욱 좋습니다.</p>\n<p>9장은 해당 코드를 살펴봐주세요. <a href=\"https://github.com/s3ich4n/cosmicpython-study/tree/main/pt2/ch09\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">코드 링크</a></p>\n<h1 id=\"9장-메시지-버스-톺아보기\" style=\"position:relative;\"><a href=\"#9%EC%9E%A5-%EB%A9%94%EC%8B%9C%EC%A7%80-%EB%B2%84%EC%8A%A4-%ED%86%BA%EC%95%84%EB%B3%B4%EA%B8%B0\" aria-label=\"9장 메시지 버스 톺아보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>9장 메시지 버스 톺아보기</h1>\n<blockquote>\n<p>왜 제목이 이렇냐? Going to town (on sth)가 원래 <a href=\"https://dictionary.cambridge.org/dictionary/english/go-to-town-on\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">이런 뜻</a>이더라고…</p>\n</blockquote>\n<p>우리말에 좀 딱 맞아 보이는게 저 표현이긴 한데, 글쎄… 처음 쓸 때나 키치했지 지금은 영….</p>\n<blockquote>\n</blockquote>\n<p>이벤트를 보다 근본적인 요소로 사용해보자.</p>\n<p><img src=\"https://www.cosmicpython.com/book/images/apwp_0901.png\" alt=\"기존 레이어를 가진 구조에서\"></p>\n<p><img src=\"https://www.cosmicpython.com/book/images/apwp_0902.png\" alt=\"메시지 버스가 메인이 되는 구조로 변경할 것이다!\"></p>\n<h1 id=\"91-새-아키텍처가-필요한-새로운-요구사항\" style=\"position:relative;\"><a href=\"#91-%EC%83%88-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98%EA%B0%80-%ED%95%84%EC%9A%94%ED%95%9C-%EC%83%88%EB%A1%9C%EC%9A%B4-%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD\" aria-label=\"91 새 아키텍처가 필요한 새로운 요구사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>9.1 새 아키텍처가 필요한 새로운 요구사항</h1>\n<p>Rich Hickey란 사람은 오랫동안 실행되며 실세계의 처리 과정을 관리하는 <strong>상황에 따른 소프트웨어</strong>에 대해 이야기했다. 이런 예시로는 창고 관리 시스템, 물류 스케줄러, 급여 시스템 등이 있다.</p>\n<p>이런 소프트웨어는 실세계에서의 예기치 못한 상황으로 인해 작성하기 어렵다. 예를들어 아래와 같은 케이스가 있을 것이다:</p>\n<ul>\n<li>재고조사를 하는 동안 몇몇 제품이 손상되었음을 확인했다</li>\n<li>몇몇 물품 배송 시 필요한 문서가 빠져서 몇 주간 세관에 머물러야 했다. 이후 안전검사에 실패하여 폐기처리 되었다</li>\n<li>원재료의 공급 부족으로 인해 특정 배치에 대한 생산이 불가능하게 되었다</li>\n</ul>\n<p>이러한 유형의 상황을 통해 시스템에 있는 배치 수량을 변경해야 한다는 사실을 배웠다. 이벤트 스토밍을 통해 이런 사항을 모델링하면 아래와 같은 그림이 나온다:</p>\n<p><img src=\"https://www.cosmicpython.com/book/images/apwp_0903.png\" alt=\"배치 수량 변경 시 할당 해제 후 재할당을 해야하는 경우\"></p>\n<p><code class=\"language-text\">BatchQuantityChanged</code> 라는 이벤트 발생 시 배치의 수량을 바꿔야 한다. 이와 함께 <strong>비즈니스 규칙</strong>을 적용해야 한다는 뜻이다. 변경 후 수량이 이미 할당된 수량보다 적어지면, 이런 주문을 배치에서 할당 해제(<em>deallocate</em>) 해야한다. 이후 각각 새로 할당해야한다. 이를 <code class=\"language-text\">AllocationRequired</code> 라는 이벤트로 표현한다.</p>\n<p>이런 것을 구현할 때 내부 메시지 버스와 이벤트가 도움이 된다! 배치 수량을 조정하고 과도한 주문 라인을 할당 해제하는 <code class=\"language-text\">change_batch_quantity</code> 라는 서비스를 정의하고, 할당 해제가 일어날 때마다 <code class=\"language-text\">AllocationRequired</code> 이벤트를 발생시켜 기존 <code class=\"language-text\">allocate</code> 서비스에 별도의 트랜잭션으로 전달한다. 여기서도 메시지 버스를 사용하면 SRP를 강제할 수 있고, 트랜잭션과 데이터 통합에 관련된 선택을 할 수 있다.</p>\n<h2 id=\"911-구조-변경을-상상해보기-모든-것이-이벤트-핸들러다\" style=\"position:relative;\"><a href=\"#911-%EA%B5%AC%EC%A1%B0-%EB%B3%80%EA%B2%BD%EC%9D%84-%EC%83%81%EC%83%81%ED%95%B4%EB%B3%B4%EA%B8%B0-%EB%AA%A8%EB%93%A0-%EA%B2%83%EC%9D%B4-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%ED%95%B8%EB%93%A4%EB%9F%AC%EB%8B%A4\" aria-label=\"911 구조 변경을 상상해보기 모든 것이 이벤트 핸들러다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>9.1.1 구조 변경을 상상해보기: 모든 것이 이벤트 핸들러다</h2>\n<p>그렇다면 어떤 식으로 수정될지 다시 한 번 살펴보자. 시스템에는 두 가지 종류의 흐름이 있다:</p>\n<ol>\n<li>서비스 계층 함수에 의해 처리되는 API 콜</li>\n<li>이벤트\n<ol>\n<li>내부 이벤트: 서비스 계층 함수의 사이드 이펙트로 발생 가능</li>\n<li>그 이벤트에 대한 핸들러: 서비스 계층 함수를 호출 가능</li>\n</ol>\n</li>\n</ol>\n<p>그렇다면, 모든 것이 이벤트 핸들러라면? API 호출을 이벤트 캐치용으로 생각하면, 서비스 게층함수도 이벤트라고 생각할 수 있다(!) 그러면 내부/외부 를 분리할 필요가 없다.</p>\n<ol>\n<li><code class=\"language-text\">services.allocate()</code> 는 <code class=\"language-text\">AllocationRequired</code> 이벤트의 핸들러이거나 <code class=\"language-text\">Allocate</code> 이벤트를 출력으로 내보낼 수도 있다.</li>\n<li><code class=\"language-text\">services.add_batch()</code> 도 <code class=\"language-text\">BatchCreated</code> 이벤트의 핸들러일 수도 있다<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup></li>\n</ol>\n<p>그리고 새로운 요구사항도 같은 패턴에 부합한다.</p>\n<ol>\n<li><code class=\"language-text\">BatchQuantityChanged</code> 이벤트는 <code class=\"language-text\">change_batch_quantity()</code> 핸들러를 호출할 수 있다</li>\n<li>새로운 <code class=\"language-text\">AllocationRequired</code> 이벤트가 <code class=\"language-text\">services.allocate()</code> 를 호출하게 할 수 있다. 따라서 API에서 새 할당요청이 들어오는 것과 내부에서 할당 해제에 의해 발생하는 재할당은 개념상 구분되지 않는다(!)</li>\n</ol>\n<p>이 정도로 코드가 바뀌는건 매우 공격적이다! 그렇다면 점진적인 방법(<em>Preparatory Refactoring</em>)을 찾아보자<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup>. 이 방법은 “변경하기 쉽게 코드를 준비한다. 그 후 쉬워진 변경을 실제로 수행한다” 정도로 정리할 수 있다. 책에서는 아래와 같은 방안을 제시한다:</p>\n<ol>\n<li>서비스 계층을 이벤트 핸들러로 리팩토링. 이벤트가 시스템에 대한 입력을 설명하는 방식이라는 개념에 익숙해질 수 있음. <code class=\"language-text\">services.allocate()</code> 는 <code class=\"language-text\">AllocationRequired</code> 이벤트의 핸들러행</li>\n<li><code class=\"language-text\">BatchQuantityChanged</code> 이벤트를 시스템에 추가하고 <code class=\"language-text\">Allocated</code> 이벤트가 발생하는지 검사하는 e2e 테스트를 만들 것임</li>\n<li>구현은 아래와 같이…\n<ol>\n<li><code class=\"language-text\">BatchQuantityChanged</code> 에 대한 새로운 핸들러를 만듬</li>\n<li>이 핸들러 구현은 <code class=\"language-text\">AllocationRequired</code> 이벤트를 발생</li>\n<li>API에서 사용하는 할당 핸들러와 같은 핸들러가 이 <code class=\"language-text\">AllocationRequired</code> 이벤트를 처리함</li>\n</ol>\n</li>\n</ol>\n<p>이 과정에서 메시지 버스와 UoW를 약간 변경해서 새 이벤트를 메시지 버스에 넣는 책임을 버스 자체로 옮길 것임</p>\n<h1 id=\"92-서비스-함수를-메시지-핸들러로-리팩토링하기\" style=\"position:relative;\"><a href=\"#92-%EC%84%9C%EB%B9%84%EC%8A%A4-%ED%95%A8%EC%88%98%EB%A5%BC-%EB%A9%94%EC%8B%9C%EC%A7%80-%ED%95%B8%EB%93%A4%EB%9F%AC%EB%A1%9C-%EB%A6%AC%ED%8C%A9%ED%86%A0%EB%A7%81%ED%95%98%EA%B8%B0\" aria-label=\"92 서비스 함수를 메시지 핸들러로 리팩토링하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>9.2 서비스 함수를 메시지 핸들러로 리팩토링하기</h1>\n<p>이벤트부터 정의하자!</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@dataclass</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">BatchCreated</span><span class=\"token punctuation\">(</span>Event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    ref<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span>\n    sku<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span>\n    qty<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span>\n    eta<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span>date<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n<span class=\"token decorator annotation punctuation\">@dataclass</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AllocationRequired</span><span class=\"token punctuation\">(</span>Event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    orderid<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span>\n    sku<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span>\n    qty<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span></code></pre></div>\n<p>그리고 <code class=\"language-text\">service.py</code> 를 <code class=\"language-text\">handler.py</code> 로 개명 후 기존 메시지 핸들러인 <code class=\"language-text\">send_out_of_stock_notification</code> 을 추가한다. 핵심은 모든 핸들러가 동일한 입력(UoW와 이벤트)를 갖도록 바꾸는 것이 핵심이다.</p>\n<p>이러면서 서비스계층의 API를 더 구조화하고 일관성있게 다듬을 수 있다. 원래는 원시타입 값이 여기저기 흩어져 있었지만, 이젠 잘 정의된 객체를 사용한다.</p>\n<h2 id=\"도메인-객체에서-기본-타입에-대한-집착을-거쳐-인터페이스로-이벤트를-사용하기-까지\" style=\"position:relative;\"><a href=\"#%EB%8F%84%EB%A9%94%EC%9D%B8-%EA%B0%9D%EC%B2%B4%EC%97%90%EC%84%9C-%EA%B8%B0%EB%B3%B8-%ED%83%80%EC%9E%85%EC%97%90-%EB%8C%80%ED%95%9C-%EC%A7%91%EC%B0%A9%EC%9D%84-%EA%B1%B0%EC%B3%90-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EB%A1%9C-%EC%9D%B4%EB%B2%A4%ED%8A%B8%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0-%EA%B9%8C%EC%A7%80\" aria-label=\"도메인 객체에서 기본 타입에 대한 집착을 거쳐 인터페이스로 이벤트를 사용하기 까지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>도메인 객체에서 기본 타입에 대한 집착을 거쳐 인터페이스로 이벤트를 사용하기 까지</h2>\n<p>5.5절에서 서비스 계층 API가 도메인 객체에 대해 정의되었다가 갑자기 기본 타입을 썼던 것을 기억하고 있다. 근데 이젠 또 이벤트를 쓴다. 왤케 왔다갔다 하는 것이지?</p>\n<p>OO 사이클에서 사람들은 기본 타입에 대한 집착(<em>primitive obsession</em>)을 안티패턴으로 간주한다. 공개 API에서 기본타입을 피하고 커스텀 값 클래스로 기본타입 값을 감싸기를 이야기한다.</p>\n<p>파이썬 세계에서는 많은 사람들이 경험상 이에 대해 상당히 회의적이다. 무심코 적용하면 불필요한 복잡성을 초래할 수 있기 때문이다. 그래서 여기서 함수 파라미터를 도메인 객체서 기본 타입으로 바꿨다는 것 자체만으론 복잡도가 추가되는 건 아니다.</p>\n<p>그런 관점에서 파라미터를 도메인 객체가 아니라 기본 타입으로 바꾸면 그 연결을 끊을 수 있다. 도메인에 엮이지도 않고, 모델을 바꿔도 서비스 계층은 API를 바꾸지 않고 예전과 같이 그대로 제공할 수 있다. 반대로 API가 바뀌더라도 모델은 그대로 남겨둘 수 있다.</p>\n<p>그렇다면 이벤트를 도입하는건 맨 처음 염려대로 가는건가? 하지만 핵심 도메인 모델은 여전히 다른 계층과 관계없이 바뀔 수 있다. 이벤트 도입은 외부 세계와 이벤트 클래스를 연결할 뿐이다. 이벤트도 도메인의 일부일 뿐이지만 이벤트는 도메인에 대해 <strong>훨씬 덜 자주 바뀔 것이다</strong>라고 예측하면 어느정도 타당하다 할 수 있다.</p>\n<p>이벤트를 도입하면 어떤 이득이 있는지 살펴보자:</p>\n<ul>\n<li>애플리케이션의 유스케이스 호출 시 기본타입의 조합을 기억할 필요가 없다 → 애플리케이션 입력을 표현하는 단일 이벤트 클래스를 쓴다</li>\n<li>입력값 검증에 써먹기 아주 좋은 장소다! 아래엔 본인 생각의 단상을 좀 써보겠다:\n<ul>\n<li>그럼 pydantic으로 된걸 dataclass나 아니면 아예 attrs로 갈아타서 싹 갈아엎는게 나을려나?</li>\n<li>sqlalchemy하고 긴밀하게 쓸 수 있는 게 뭔지부터 살펴보는게 좋을 것 같다. 그러면서 동시에 sqlalchemy 2.0 하고는 뭐가 어울리는지도 확실히 해두자</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"921-메시지-버스는-이제-이벤트를-uow로부터-수집한다\" style=\"position:relative;\"><a href=\"#921-%EB%A9%94%EC%8B%9C%EC%A7%80-%EB%B2%84%EC%8A%A4%EB%8A%94-%EC%9D%B4%EC%A0%9C-%EC%9D%B4%EB%B2%A4%ED%8A%B8%EB%A5%BC-uow%EB%A1%9C%EB%B6%80%ED%84%B0-%EC%88%98%EC%A7%91%ED%95%9C%EB%8B%A4\" aria-label=\"921 메시지 버스는 이제 이벤트를 uow로부터 수집한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>9.2.1 메시지 버스는 이제 이벤트를 UoW로부터 수집한다</h2>\n<p>이벤트 핸들러는 이제 UoW가 필요하다. 추가로 애플리케이션에서 메시지 버스는 더 중심 위치를 차지하게 되었다. 메시지 버스가 명시적으로 새 이벤트를 수집하고 처리하도록 하는 것이 더 타당하다. 현재는 UoW와 메시지 버스 사이의 순환적 의존성이 있는데, 이를 단방향으로 떼내자!</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>\n        event<span class=\"token punctuation\">:</span> events<span class=\"token punctuation\">.</span>Event<span class=\"token punctuation\">,</span>\n        uow<span class=\"token punctuation\">:</span> unit_of_work<span class=\"token punctuation\">.</span>AbstractUnitOfWork<span class=\"token punctuation\">,</span>           <span class=\"token comment\"># 1)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    queue <span class=\"token operator\">=</span> deque<span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span>                                <span class=\"token comment\"># 2)</span>\n    <span class=\"token keyword\">while</span> queue<span class=\"token punctuation\">:</span>\n        event <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>                            <span class=\"token comment\"># 3)</span>\n        <span class=\"token keyword\">for</span> handler <span class=\"token keyword\">in</span> HANDLERS<span class=\"token punctuation\">[</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>           <span class=\"token comment\"># 3)</span>\n            task <span class=\"token operator\">=</span> asyncio<span class=\"token punctuation\">.</span>create_task<span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">await</span> task                                  <span class=\"token comment\"># 4)</span>\n            queue<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">(</span>uow<span class=\"token punctuation\">.</span>collect_new_events<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>      <span class=\"token comment\"># 5)</span></code></pre></div>\n<ol>\n<li>메시지 버스 시작 시 UoW를 받음</li>\n<li>첫 이벤트를 처리할 때 큐를 시작한다</li>\n<li><code class=\"language-text\">큐.pop()</code> 후 적절한 핸들러에 값을 던진다. <code class=\"language-text\">HANDLERS</code> 딕셔너리는 안바뀌었으니, 알아서 태스크 생성하고 돌 것이다</li>\n<li>메시지 버스는 UoW를 각 핸들러에 전달한다</li>\n<li>핸들러가 끝나면 이벤트 수집 후 이 이벤트를 큐에 추가한다. (<a href=\"https://docs.python.org/3/tutorial/datastructures.html#more-on-lists\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">.extend()가 뭐냐</a>?)</li>\n</ol>\n<blockquote>\n<p>맨 앞의 값 꺼내오는데 <code class=\"language-text\">[deque](https://docs.python.org/3/library/collections.html#deque-objects)</code>쓰면 O(1) 만에 나오지 않나? 싶기도 하고, thread-safe 하대서 <code class=\"language-text\">deque</code>로 바꿔써보기로 했다.</p>\n</blockquote>\n<p>그리고 <code class=\"language-text\">unit_of_work.py</code> 에 있는 <code class=\"language-text\">publish_events()</code> 를 <code class=\"language-text\">collect_new_events()</code> 로 바꾼다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">collect_new_events</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> product <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>products<span class=\"token punctuation\">.</span>seen<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">while</span> product<span class=\"token punctuation\">.</span>events<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">yield</span> product<span class=\"token punctuation\">.</span>events<span class=\"token punctuation\">.</span>popleft<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 1)</span></code></pre></div>\n<ol>\n<li>커밋이 일어나면 <code class=\"language-text\">publish_event</code> 를 호출하지 않고 이 메시지 버스는 이벤트 대기열을 추적한다</li>\n<li><code class=\"language-text\">deque</code>니까 popleft로 주면 됨!</li>\n</ol>\n<h2 id=\"922-모든-테스트는-이벤트-기반으로-다시-쓸-수-있다\" style=\"position:relative;\"><a href=\"#922-%EB%AA%A8%EB%93%A0-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%8A%94-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EA%B8%B0%EB%B0%98%EC%9C%BC%EB%A1%9C-%EB%8B%A4%EC%8B%9C-%EC%93%B8-%EC%88%98-%EC%9E%88%EB%8B%A4\" aria-label=\"922 모든 테스트는 이벤트 기반으로 다시 쓸 수 있다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>9.2.2 모든 테스트는 이벤트 기반으로 다시 쓸 수 있다</h2>\n<p>예시를 살펴보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">TestAddBatch</span><span class=\"token punctuation\">:</span>\n    <span class=\"token decorator annotation punctuation\">@pytest<span class=\"token punctuation\">.</span>mark<span class=\"token punctuation\">.</span>asyncio</span>\n    <span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">test_add_batch</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        uow <span class=\"token operator\">=</span> FakeUnitOfWork<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">await</span> messagebus<span class=\"token punctuation\">.</span>handle<span class=\"token punctuation\">(</span>\n            events<span class=\"token punctuation\">.</span>BatchCreated<span class=\"token punctuation\">(</span><span class=\"token string\">\"b1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"CRUNCHY-ARMCHAIR\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> eta<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            uow<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">assert</span> <span class=\"token keyword\">await</span> uow<span class=\"token punctuation\">.</span>products<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"CRUNCHY-ARMCHAIR\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span>\n        <span class=\"token keyword\">assert</span> uow<span class=\"token punctuation\">.</span>committed\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TestAllocate</span><span class=\"token punctuation\">:</span>\n    <span class=\"token decorator annotation punctuation\">@pytest<span class=\"token punctuation\">.</span>mark<span class=\"token punctuation\">.</span>asyncio</span>\n    <span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">test_returns_allocation</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        uow <span class=\"token operator\">=</span> FakeUnitOfWork<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">await</span> messagebus<span class=\"token punctuation\">.</span>handle<span class=\"token punctuation\">(</span>\n            events<span class=\"token punctuation\">.</span>BatchCreated<span class=\"token punctuation\">(</span><span class=\"token string\">\"batch1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"COMPLICATED-LAMP\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            uow<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span>\n        results <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> messagebus<span class=\"token punctuation\">.</span>handle<span class=\"token punctuation\">(</span>\n            events<span class=\"token punctuation\">.</span>AllocationRequired<span class=\"token punctuation\">(</span><span class=\"token string\">\"o1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"COMPLICATED-LAMP\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            uow<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">assert</span> results<span class=\"token punctuation\">.</span>popleft<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"batch1\"</span></code></pre></div>\n<p>이런 식으로… 그런데 살펴볼 사항이 몇개 있다!</p>\n<ol>\n<li>테스트를 핸들로 단위별로 클래스로 감싼다</li>\n<li>서비스를 직접 부르는 것이 아니라, 메시지 버스에 이벤트를 전달하여 핸들러를 사용하도록 한다. 테스트 코드를 작성하며 이 스펙에 익숙해질 수 있다.</li>\n</ol>\n<h2 id=\"923-보기-싫은-임시-땜빵-결과를-반환해야-하는-메시지-버스\" style=\"position:relative;\"><a href=\"#923-%EB%B3%B4%EA%B8%B0-%EC%8B%AB%EC%9D%80-%EC%9E%84%EC%8B%9C-%EB%95%9C%EB%B9%B5-%EA%B2%B0%EA%B3%BC%EB%A5%BC-%EB%B0%98%ED%99%98%ED%95%B4%EC%95%BC-%ED%95%98%EB%8A%94-%EB%A9%94%EC%8B%9C%EC%A7%80-%EB%B2%84%EC%8A%A4\" aria-label=\"923 보기 싫은 임시 땜빵 결과를 반환해야 하는 메시지 버스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>9.2.3 보기 싫은 임시 땜빵: 결과를 반환해야 하는 메시지 버스</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>\n        event<span class=\"token punctuation\">:</span> events<span class=\"token punctuation\">.</span>Event<span class=\"token punctuation\">,</span>\n        uow<span class=\"token punctuation\">:</span> unit_of_work<span class=\"token punctuation\">.</span>AbstractUnitOfWork<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    results <span class=\"token operator\">=</span> deque<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    queue <span class=\"token operator\">=</span> deque<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>event<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">while</span> queue<span class=\"token punctuation\">:</span>\n        event <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span>popleft<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> handler <span class=\"token keyword\">in</span> HANDLERS<span class=\"token punctuation\">[</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            task <span class=\"token operator\">=</span> asyncio<span class=\"token punctuation\">.</span>create_task<span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> uow<span class=\"token operator\">=</span>uow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            results<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> task<span class=\"token punctuation\">)</span>\n            queue<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">(</span>uow<span class=\"token punctuation\">.</span>collect_new_events<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> results</code></pre></div>\n<p>이렇게 핸들에 결과가 나오는 이유는 읽기/쓰기 책임이 혼재되어서 그렇다. 12장에서 CQRS를 다루며 다시 살펴보자.</p>\n<h2 id=\"924-이벤트로-작동하도록-api-바꾸기\" style=\"position:relative;\"><a href=\"#924-%EC%9D%B4%EB%B2%A4%ED%8A%B8%EB%A1%9C-%EC%9E%91%EB%8F%99%ED%95%98%EB%8F%84%EB%A1%9D-api-%EB%B0%94%EA%BE%B8%EA%B8%B0\" aria-label=\"924 이벤트로 작동하도록 api 바꾸기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>9.2.4 이벤트로 작동하도록 API 바꾸기</h2>\n<p>서비스를 직접호출하지 않고 이벤트를 인스턴스 후 메시지 버스에 전달하는 방법으로 고친다</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>post</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"/allocate\"</span><span class=\"token punctuation\">,</span>\n    status_code<span class=\"token operator\">=</span>status<span class=\"token punctuation\">.</span>HTTP_201_CREATED<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@inject</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">allocate_endpoint</span><span class=\"token punctuation\">(</span>\n        order_line<span class=\"token punctuation\">:</span> OrderLineRequest<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        event <span class=\"token operator\">=</span> events<span class=\"token punctuation\">.</span>AllocationRequired<span class=\"token punctuation\">(</span>      <span class=\"token comment\"># 1)</span>\n            orderid<span class=\"token operator\">=</span>order_line<span class=\"token punctuation\">.</span>orderid<span class=\"token punctuation\">,</span>\n            sku<span class=\"token operator\">=</span>order_line<span class=\"token punctuation\">.</span>sku<span class=\"token punctuation\">,</span>\n            qty<span class=\"token operator\">=</span>order_line<span class=\"token punctuation\">.</span>qty<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span>\n        batchref <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> messagebus<span class=\"token punctuation\">.</span>handle<span class=\"token punctuation\">(</span>     <span class=\"token comment\"># 2)</span>\n            event<span class=\"token punctuation\">,</span> uow<span class=\"token operator\">=</span>unit_of_work<span class=\"token punctuation\">.</span>SqlAlchemyUnitOfWork<span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">.</span>session_factory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span>\n        batchref <span class=\"token operator\">=</span> batchref<span class=\"token punctuation\">.</span>popleft<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">except</span> <span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>OutOfStock<span class=\"token punctuation\">,</span> handlers<span class=\"token punctuation\">.</span>InvalidSku<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">raise</span> HTTPException<span class=\"token punctuation\">(</span>\n            detail<span class=\"token operator\">=</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            status_code<span class=\"token operator\">=</span>status<span class=\"token punctuation\">.</span>HTTP_400_BAD_REQUEST<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> e\n\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'batchref'</span><span class=\"token punctuation\">:</span> batchref<span class=\"token punctuation\">}</span>           <span class=\"token comment\"># 3)</span></code></pre></div>\n<ol>\n<li>이벤트를 인스턴스화 했다</li>\n<li>메시지 버스에 이벤트를 전달했다</li>\n<li>결과값을 리턴했다</li>\n</ol>\n<p>여기까지 하면서 애플리케이션을 이벤트 기반으로 수정완료했다!</p>\n<ol>\n<li>서비스 계층 함수를 모두 이벤트 핸들러로 변경했다</li>\n<li>따라서 서비스 계층 함수 호출과 도메인 모델에서 발생한 내부 이벤트를 처리하기 위한 함수 호출이 동일해졌다</li>\n<li>이벤트는 시스템 입력을 잡아내는 데이터구조로 사용한다. 동시에 내부 작업 덩어리를 전달하기 위한 데이터 구조로도 사용한다</li>\n<li>이것으로 전체 앱은 메시지 처리기 혹은 이벤트 처리기가 되었다. 둘의 차이점은 10장에서 설명한다</li>\n</ol>\n<h1 id=\"93-새로운-요구사항-구현하기\" style=\"position:relative;\"><a href=\"#93-%EC%83%88%EB%A1%9C%EC%9A%B4-%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0\" aria-label=\"93 새로운 요구사항 구현하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>9.3 새로운 요구사항 구현하기</h1>\n<p>리팩토링이 끝났으니, 코드가 ‘변경하기 쉽게’ 되었는지 살펴보자. 아래 그림에 맞는 요구사항을 구현해볼 것이다. <code class=\"language-text\">BatchQuantityChanged</code> 라는 신규 이벤트를 만든다. 이를 받아 핸들러에 넘기고, 이 핸들러는 다시 어떤 <code class=\"language-text\">AllocationRequired</code> 라는 이벤트를 발생시킨다. 이는 다시 기존 핸들러에 넘겨져서 재할당을 일으킬 수 있다.</p>\n<p><img src=\"https://www.cosmicpython.com/book/images/apwp_0904.png\" alt=\"어 근데..??? 트랜잭션이 2개 아닌가…?\"></p>\n<blockquote>\n<p>사물을 두 단위의 UoW에 걸쳐 나누면 DB 트랜잭션이 두개 생긴다. 데이터 정합성 문제가 발생한다. 이는 첫 번째 트랜잭션은 끝났지만 두 번째 트랜잭션이 끝나지 않아서 생기는 문제다.</p>\n</blockquote>\n<p>이런 사항에 대해 어떻게 처리할지는 14장에서 살펴본다.</p>\n<blockquote>\n</blockquote>\n<h2 id=\"931-새로운-이벤트\" style=\"position:relative;\"><a href=\"#931-%EC%83%88%EB%A1%9C%EC%9A%B4-%EC%9D%B4%EB%B2%A4%ED%8A%B8\" aria-label=\"931 새로운 이벤트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>9.3.1 새로운 이벤트</h2>\n<p>배치 수량의 변경을 알려주는 이벤트는 단순하다. 추가해보자!</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@dataclass</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">BatchQuantityChanged</span><span class=\"token punctuation\">(</span>Event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    ref<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span>\n    qty<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span></code></pre></div>\n<h1 id=\"94-새-핸들러-시범운영하기\" style=\"position:relative;\"><a href=\"#94-%EC%83%88-%ED%95%B8%EB%93%A4%EB%9F%AC-%EC%8B%9C%EB%B2%94%EC%9A%B4%EC%98%81%ED%95%98%EA%B8%B0\" aria-label=\"94 새 핸들러 시범운영하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>9.4 새 핸들러 시범운영하기</h1>\n<p>4장에서 배운 교훈을 따르면, ‘high gear’ 를 사용해 일하면서 유닛 테스트를 가장 최상위 수준에서 짤 수 있다.</p>\n<p>이 코드도 마찬가지로 클래스 단위로 감싸자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">TestChangeBatchQuantity</span><span class=\"token punctuation\">:</span>\n    <span class=\"token decorator annotation punctuation\">@pytest<span class=\"token punctuation\">.</span>mark<span class=\"token punctuation\">.</span>asyncio</span>\n    <span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">test_changes_available_quantity</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        uow <span class=\"token operator\">=</span> FakeUnitOfWork<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">await</span> messagebus<span class=\"token punctuation\">.</span>handle<span class=\"token punctuation\">(</span>\n            events<span class=\"token punctuation\">.</span>BatchCreated<span class=\"token punctuation\">(</span><span class=\"token string\">\"batch1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ADORABLE-SETTEE\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> eta<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            uow<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span>\n\n        <span class=\"token punctuation\">[</span>batch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> uow<span class=\"token punctuation\">.</span>products<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>sku<span class=\"token operator\">=</span><span class=\"token string\">\"ADORABLE-SETTEE\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>batches\n        <span class=\"token keyword\">assert</span> batch<span class=\"token punctuation\">.</span>available_quantity <span class=\"token operator\">==</span> <span class=\"token number\">100</span>\n\n        <span class=\"token keyword\">await</span> messagebus<span class=\"token punctuation\">.</span>handle<span class=\"token punctuation\">(</span>\n            events<span class=\"token punctuation\">.</span>BatchQuantityChanged<span class=\"token punctuation\">(</span><span class=\"token string\">\"batch1\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            uow<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">assert</span> batch<span class=\"token punctuation\">.</span>available_quantity <span class=\"token operator\">==</span> <span class=\"token number\">50</span>       <span class=\"token comment\"># 1)</span>\n\n    <span class=\"token decorator annotation punctuation\">@pytest<span class=\"token punctuation\">.</span>mark<span class=\"token punctuation\">.</span>asyncio</span>\n    <span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">test_reallocates_if_necessary</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        uow <span class=\"token operator\">=</span> FakeUnitOfWork<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        event_history <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n            events<span class=\"token punctuation\">.</span>BatchCreated<span class=\"token punctuation\">(</span><span class=\"token string\">\"batch1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"INDIFFERENT-TABLE\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            events<span class=\"token punctuation\">.</span>BatchCreated<span class=\"token punctuation\">(</span><span class=\"token string\">\"batch2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"INDIFFERENT-TABLE\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> today<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            events<span class=\"token punctuation\">.</span>AllocationRequired<span class=\"token punctuation\">(</span><span class=\"token string\">\"order1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"INDIFFERENT-TABLE\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            events<span class=\"token punctuation\">.</span>AllocationRequired<span class=\"token punctuation\">(</span><span class=\"token string\">\"order2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"INDIFFERENT-TABLE\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span>\n\n        <span class=\"token keyword\">for</span> e <span class=\"token keyword\">in</span> event_history<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">await</span> messagebus<span class=\"token punctuation\">.</span>handle<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> uow<span class=\"token punctuation\">)</span>\n\n        <span class=\"token punctuation\">[</span>batch1<span class=\"token punctuation\">,</span> batch2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> uow<span class=\"token punctuation\">.</span>products<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>sku<span class=\"token operator\">=</span><span class=\"token string\">\"INDIFFERENT-TABLE\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>batches\n\n        <span class=\"token keyword\">assert</span> batch1<span class=\"token punctuation\">.</span>available_quantity <span class=\"token operator\">==</span> <span class=\"token number\">10</span>\n        <span class=\"token keyword\">assert</span> batch2<span class=\"token punctuation\">.</span>available_quantity <span class=\"token operator\">==</span> <span class=\"token number\">50</span>\n\n        <span class=\"token keyword\">await</span> messagebus<span class=\"token punctuation\">.</span>handle<span class=\"token punctuation\">(</span>events<span class=\"token punctuation\">.</span>BatchQuantityChanged<span class=\"token punctuation\">(</span><span class=\"token string\">\"batch1\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> uow<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># order1 혹은 order2 가 할당 해제된다. 25-20이 수량이 된다.</span>\n        <span class=\"token keyword\">assert</span> batch1<span class=\"token punctuation\">.</span>available_quantity <span class=\"token operator\">==</span> <span class=\"token number\">5</span>      <span class=\"token comment\"># 2)</span>\n        <span class=\"token comment\"># 다음 배치에서 20을 재할당한다</span>\n        <span class=\"token keyword\">assert</span> batch2<span class=\"token punctuation\">.</span>available_quantity <span class=\"token operator\">==</span> <span class=\"token number\">30</span>     <span class=\"token comment\"># 2)</span></code></pre></div>\n<ol>\n<li>간단한 경우는 수량만 변경하면 된다</li>\n<li>할당된 수량보다 더 작게 수량을 바꾸면 최소 주문 한 개를 할당 해제하고 새로운 배치에 이 주문할당해야 하는 것을 예측한 코드다 → 요구사항이 그렇다면, 테스트코드를 그렇게 짜고 구현하면 된다는 것을 보여주는 것으로 보인다</li>\n</ol>\n<h2 id=\"941-구현\" style=\"position:relative;\"><a href=\"#941-%EA%B5%AC%ED%98%84\" aria-label=\"941 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>9.4.1 구현</h2>\n<p>그럼 핸들러를 추가하고, 핸들러 관리 딕셔너리에도 추가해주면 될 것이다.</p>\n<p>코드를 살펴보자:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">change_batch_quantity</span><span class=\"token punctuation\">(</span>\n        event<span class=\"token punctuation\">:</span> events<span class=\"token punctuation\">.</span>BatchQuantityChanged<span class=\"token punctuation\">,</span>\n        uow<span class=\"token punctuation\">:</span> unit_of_work<span class=\"token punctuation\">.</span>AbstractUnitOfWork<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">async</span> <span class=\"token keyword\">with</span> uow<span class=\"token punctuation\">:</span>\n        product <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> uow<span class=\"token punctuation\">.</span>products<span class=\"token punctuation\">.</span>get_by_batchref<span class=\"token punctuation\">(</span>batchref<span class=\"token operator\">=</span>event<span class=\"token punctuation\">.</span>ref<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">await</span> product<span class=\"token punctuation\">.</span>change_batch_quantity<span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>ref<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">.</span>qty<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">await</span> uow<span class=\"token punctuation\">.</span>commit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Repository에 새 쿼리타입이 필요하니, 추가해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">AbstractRepository</span><span class=\"token punctuation\">(</span>Protocol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>                <span class=\"token comment\"># 1)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n    <span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">get_by_batchref</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> batchref<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> model<span class=\"token punctuation\">.</span>Product<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">raise</span> NotImplementedError\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TrackingRepository</span><span class=\"token punctuation\">:</span>                          <span class=\"token comment\"># 2)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n    <span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">get_by_batchref</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> batchref<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> model<span class=\"token punctuation\">.</span>Product<span class=\"token punctuation\">:</span>\n        product <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> self<span class=\"token punctuation\">.</span>_repo<span class=\"token punctuation\">.</span>get_by_batchref<span class=\"token punctuation\">(</span>batchref<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> product<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>seen<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>product<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> product\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SqlAlchemyRepository</span><span class=\"token punctuation\">(</span>AbstractRepository<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>    <span class=\"token comment\"># 3)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n    <span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">get_by_batchref</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> batchref<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> model<span class=\"token punctuation\">.</span>Product<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token punctuation\">(</span>\n                <span class=\"token keyword\">await</span> self<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span>\n                    select<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>Product<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>Batch<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>orm<span class=\"token punctuation\">.</span>batches<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">.</span>reference <span class=\"token operator\">==</span> batchref<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span>scalars<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span>one_or_none<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span></code></pre></div>\n<ol>\n<li><code class=\"language-text\">Protocol</code> 로 구현했다보니 필요한 원형만 기재한다.</li>\n<li><code class=\"language-text\">TrackingRepository</code> 로 한 번 감싸서 리포지토리 쿼리와 이벤트 관련 내용을 처리한다.</li>\n<li><code class=\"language-text\">SqlAlchenyRepository</code> 에는 실제 쿼리내용을 추가한다.</li>\n</ol>\n<p>테스트코드에서 쓰는 <code class=\"language-text\">FakeRepository</code> 도 마찬가지로 갈아준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FakeRepository</span><span class=\"token punctuation\">(</span>repository<span class=\"token punctuation\">.</span>AbstractRepository<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n    <span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">get_by_batchref</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> batchref<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> model<span class=\"token punctuation\">.</span>Product<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>\n            p <span class=\"token keyword\">for</span> p <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>_products <span class=\"token keyword\">for</span> b <span class=\"token keyword\">in</span> p<span class=\"token punctuation\">.</span>batches\n            <span class=\"token keyword\">if</span> b<span class=\"token punctuation\">.</span>reference <span class=\"token operator\">==</span> batchref<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token boolean\">None</span>\n        <span class=\"token punctuation\">)</span></code></pre></div>\n<blockquote>\n<p>이 유스케이스를 쉽게 구현하기 위해 리포지토리에 쿼리를 추가했다.</p>\n</blockquote>\n<p>쿼리가 단일 애그리게이트를 반환하면 문제없지만, 여러 저장소에 대해 복잡한 쿼리를 하면 다른 설계가 필요할 수 있다. 11장, 14장에서 그런 방안을 살펴볼 것이다.</p>\n<p>예를 들면 이런 쿼리가 될 수 있을 것이다…\n<code class=\"language-text\">get_most_popular_products</code> , <code class=\"language-text\">find_products_by_order_id</code> 같은 것들…</p>\n<blockquote>\n</blockquote>\n<h2 id=\"942-도메인-모델의-새-메소드\" style=\"position:relative;\"><a href=\"#942-%EB%8F%84%EB%A9%94%EC%9D%B8-%EB%AA%A8%EB%8D%B8%EC%9D%98-%EC%83%88-%EB%A9%94%EC%86%8C%EB%93%9C\" aria-label=\"942 도메인 모델의 새 메소드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>9.4.2 도메인 모델의 새 메소드</h2>\n<p>모델에 새 메소드를 추가한다. 이 메소드는 수량을 바꾸자마자 인라인으로 할당을 해제하고 새 이벤트를 publish한다. 기존 <code class=\"language-text\">allocate</code> 함수를 수정하여 이벤트를 publish 하도록 바꾼다:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Product</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">change_batch_quantity</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> batch_ref<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> qty<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        batch <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>get_allocation<span class=\"token punctuation\">(</span>batch_ref<span class=\"token punctuation\">)</span>\n        batch<span class=\"token punctuation\">.</span>purchased_quantity <span class=\"token operator\">=</span> qty\n        <span class=\"token keyword\">while</span> batch<span class=\"token punctuation\">.</span>available_quantity <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            line <span class=\"token operator\">=</span> batch<span class=\"token punctuation\">.</span>deallocate_one<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>events<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>\n                events<span class=\"token punctuation\">.</span>AllocationRequired<span class=\"token punctuation\">(</span>\n                    line<span class=\"token punctuation\">.</span>orderid<span class=\"token punctuation\">,</span>\n                    line<span class=\"token punctuation\">.</span>sku<span class=\"token punctuation\">,</span>\n                    line<span class=\"token punctuation\">.</span>qty<span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span></code></pre></div>\n<p>새 핸들러를 이벤트와 연결함으로 마무리한다:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">HANDLERS <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    events<span class=\"token punctuation\">.</span>BatchCreated<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>handlers<span class=\"token punctuation\">.</span>add_batch<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    events<span class=\"token punctuation\">.</span>OutOfStock<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>handlers<span class=\"token punctuation\">.</span>send_out_of_stock_notification<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    events<span class=\"token punctuation\">.</span>AllocationRequired<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>handlers<span class=\"token punctuation\">.</span>allocate<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    events<span class=\"token punctuation\">.</span>DeallocationRequired<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>handlers<span class=\"token punctuation\">.</span>deallocate<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    events<span class=\"token punctuation\">.</span>BatchQuantityChanged<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>handlers<span class=\"token punctuation\">.</span>change_batch_quantity<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\"># 1)</span>\n<span class=\"token punctuation\">}</span>  <span class=\"token comment\"># type: Dict[Type[events.Event], List[Callable]]</span></code></pre></div>\n<ol>\n<li>추가완료!</li>\n</ol>\n<h1 id=\"95-선택-가짜-메시지-버스와-독립적으로-이벤트-핸들러-단위-테스트-하기\" style=\"position:relative;\"><a href=\"#95-%EC%84%A0%ED%83%9D-%EA%B0%80%EC%A7%9C-%EB%A9%94%EC%8B%9C%EC%A7%80-%EB%B2%84%EC%8A%A4%EC%99%80-%EB%8F%85%EB%A6%BD%EC%A0%81%EC%9C%BC%EB%A1%9C-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%ED%95%B8%EB%93%A4%EB%9F%AC-%EB%8B%A8%EC%9C%84-%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%95%98%EA%B8%B0\" aria-label=\"95 선택 가짜 메시지 버스와 독립적으로 이벤트 핸들러 단위 테스트 하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>9.5 선택: 가짜 메시지 버스와 독립적으로 이벤트 핸들러 단위 테스트 하기</h1>\n<p>reallocation 워크플로우 테스트는 e2e 테스트라 할 수 있다. 메시지 버스를 쓰고 전체 워크 플로우를 테스트한다. 이 테스트는 실제 메시지 버스를 사용하며, <code class=\"language-text\">BatchQuantityChanged</code> 이벤트 핸들러가 할당 해제를 트리거하고, 자체 핸들러가 처리하는 새로운 <code class=\"language-text\">AllocationRequired</code> 이벤트를 발생(<em>emit)</em><sup id=\"fnref-3\"><a href=\"#fn-3\" class=\"footnote-ref\">3</a></sup>시키는 전체 플로우를 테스트한다.</p>\n<p>이벤트 체인이 복잡해짐에 따라 독립적으로 일부 핸들러를 테스트하고 싶을 때가 온다. 이 때는 ‘가짜’ 메시지 버스를 사용하면 이런 테스트를 할 수 있다.</p>\n<p>다름 예제에서 <code class=\"language-text\">FakeUnitOfWork</code> 의 <code class=\"language-text\">publish_events()</code> 메소드를 바꾸어서 실제 메시지 버스와 분리할 수 있다. 이 때는 메시지 버스에 넣는게 아니라 발생시킨 이벤트를 리스트(본 예제에서는 <code class=\"language-text\">deque</code>)에 저장한다.</p>\n<p>상세한 내용은 <code class=\"language-text\">pt2/ch09</code>의 코드를 참고하면 된다.</p>\n<h1 id=\"96-마치며\" style=\"position:relative;\"><a href=\"#96-%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"96 마치며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>9.6 마치며</h1>\n<p>시스템을 어떻게 바꿨는지 복습해보자.</p>\n<h2 id=\"961-시스템을-어떻게-바꾸었나\" style=\"position:relative;\"><a href=\"#961-%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%9D%84-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%B0%94%EA%BE%B8%EC%97%88%EB%82%98\" aria-label=\"961 시스템을 어떻게 바꾸었나 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>9.6.1 시스템을 어떻게 바꾸었나?</h2>\n<p>이벤트는 시스템 안의 내부 메시지와 입력에 대한 데이터 구조를 정의하는 데이터 클래스다.</p>\n<p>이벤트는 종종 비즈니스 언어로 매우 잘 번역되기 때문에 DDD 관점에서 보면 매우 강력하다(이벤트 스토밍을 꼭 복습하자!).</p>\n<p>핸들러는 이벤트에 반응하는 방법이다. 핸들러는 모델을 호출하거나 외부 서비스를 호출할 수 있다. 원한다면 한 이벤트에 여러 핸들러를 정의할 수도 있다. 또 핸들러는 다른 이벤트를 만들 수도 있다. 이를 통해 핸들러가 수행하는 일의 크기를 세밀하게 조절하여 SRP를 유지할 수도 있다.</p>\n<h2 id=\"962-왜-이렇게-바꾸었나\" style=\"position:relative;\"><a href=\"#962-%EC%99%9C-%EC%9D%B4%EB%A0%87%EA%B2%8C-%EB%B0%94%EA%BE%B8%EC%97%88%EB%82%98\" aria-label=\"962 왜 이렇게 바꾸었나 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>9.6.2 왜 이렇게 바꾸었나?</h2>\n<p>애플리케이션의 크기가 커지는 속도 보다 복잡도가 증가하는 속도를 느리게 하기 위함이다.</p>\n<p>메시지 버스에 실으면 아키텍처는 복잡해지지만 필요 작업을 수행하기 위해 주요 개념 혹은 아키텍처 추가로 인한 코드 변경이 필요없다.</p>\n<p>수량변경, 할당해제, 새 트랜잭션 시작, 재할당, 외부통지까지 한 번에 다 들어갔지만 아키텍처적으로 봤을 때는 복잡도가 늘어난 것은 아니다. 새 이벤트나 새 핸들러를 추가하고 외부 어댑터(메일전송)까지 추가하더라도 이벤트 기반의 아키텍처의 어디에 속하는지 파악할 수 있다.</p>\n<p>전체 애플리케이션이 메시지 버스인 경우의 트레이드오프를 살펴보자!</p>\n<table>\n<thead>\n<tr>\n<th>장점</th>\n<th>단점</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>핸들러와 서비스가 동일 물건이라서 더 단순하다</td>\n<td>웹이라는 관점에서 메시지 버스를 보면 여전히 예측하기 어려운 처리방법이다</td>\n</tr>\n<tr>\n<td>작업이 언제 끝나는지 예측할 수 없다</td>\n<td></td>\n</tr>\n<tr>\n<td>시스템 입력을 처리하기 좋은 데이터 구조가 있다</td>\n<td>모델 객체와 이벤트 사이에 필드와 구조 중복이 있고, 이에 대한 유지보수가 필요하다. 한쪽에 필드를 추가한다면 다른쪽에 속한 객체에 두 개 이상 필드를 추가해야 한다.</td>\n</tr>\n</tbody>\n</table>\n<p>그리고 <code class=\"language-text\">BatchQuantityChanged</code> 같은 이벤트를 이해하기 위해, 이벤트와 커맨드의 차이부터 살펴볼 것이다.</p>\n<p>10장에서 봅시다.</p>\n<hr>\n<p><a href=\"https://stackoverflow.com/questions/31270657/what-does-emit-mean-in-general-computer-science-terms\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://stackoverflow.com/questions/31270657/what-does-emit-mean-in-general-computer-science-terms</a></p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">이런 이벤트 중 몇개는 커맨드같다? 맞다. 그런데 그건 12장에서 다시 살펴보는 걸로…<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a></li>\n<li id=\"fn-2\"><a href=\"https://martinfowler.com/articles/preparatory-refactoring-example.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://martinfowler.com/articles/preparatory-refactoring-example.html</a><a href=\"#fnref-2\" class=\"footnote-backref\">↩</a></li>\n<li id=\"fn-3\">왜 <em>emit</em> 이란 단어를 사용하는지는 해당 링크를 읽어보자. 다른 곳에서도 자주 쓰이는 듯 하니…<a href=\"#fnref-3\" class=\"footnote-backref\">↩</a></li>\n</ol>\n</div>","fields":{"slug":"/books/cosmic-python/2023-05-06---pt02-ch09//books/cosmic-python/2023-05-06-pt02-ch09","tagSlugs":["/tag/ddd/","/tag/books/","/tag/backend/","/tag/python/"]},"frontmatter":{"date":"2023-05-06T04:24:59.000Z","description":"파이썬으로 살펴보는 아키텍처 패턴을 읽고 이해한 내용을 작성합니다. 챕터 9, 메시지 버스 톺아보기에 대한 내용입니다.","tags":["ddd","books","backend","python"],"title":"파이썬으로 살펴보는 아키텍처 패턴 (9)","socialImage":{"publicURL":{"publicURL":"/static/66b1d3acbf31f0d2ad20eee928a14aaa/universe.jpg"}}}}},"pageContext":{"slug":"/books/cosmic-python/2023-05-06---pt02-ch09//books/cosmic-python/2023-05-06-pt02-ch09"}},"staticQueryHashes":["251939775","357378587","401334301"]}