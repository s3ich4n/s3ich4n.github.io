{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/books/cosmic-python/2023-04-16-pt01-ch05","result":{"data":{"markdownRemark":{"id":"aa86b880-e758-5633-bd6d-35cc2e860d83","html":"<p>이 내용은 “파이썬으로 살펴보는 아키텍처 패턴” 을 읽고 작성한 내용입니다. 블로그 게시글과, 작성한 코드를 함께 보시면 더욱 좋습니다.</p>\n<p>5장은 해당 코드를 살펴봐주세요. <a href=\"https://github.com/s3ich4n/cosmicpython-study/tree/main/pt1/ch05\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">코드 링크</a></p>\n<h1 id=\"5장-tdd-in-high-gear-and-low-gear\" style=\"position:relative;\"><a href=\"#5%EC%9E%A5-tdd-in-high-gear-and-low-gear\" aria-label=\"5장 tdd in high gear and low gear permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5장 <strong>TDD in High Gear and Low Gear</strong></h1>\n<p>기어비가 뭔소린가 했는데 걍 1단 2단 … 그거였음. 스틱 몰 때의 그것.</p>\n<p>4장까지 오면서 서비스계층으로 작동하는 애플리케이션에 필요한 오케스트레이션 책임을 좀 나눴다. 서비스 계층을 씀으로 인해 유스케이스와 워크플로우를 명확히 나눌 수 있었다.</p>\n<p>이를 통해 4.5.1에서 말한 아래 내용을 점검할 수 있다:</p>\n<ol>\n<li>저장소에서 객체를 가져온다</li>\n<li>애플리케이션이 아는 세계를 바탕으로 요청검사/검증(assertion) 한다</li>\n<li>도메인 서비스를 호출한다</li>\n<li>모두 정상실행했다면 변경된 상태를 저장/업데이트 한다</li>\n</ol>\n<p>현재 단위테스트는 저수준에서 작동하며 모델에 직접 작용한다. 5장에서는 이런 테스트를 보다 상위 계층으로 끌어올려본다. 이때 해당하는 트레이드오프와 더 많은 일반적 테스트 지침을 살펴보자.</p>\n<h1 id=\"51-테스트-피라미드는-어떻게-생겼나\" style=\"position:relative;\"><a href=\"#51-%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%94%BC%EB%9D%BC%EB%AF%B8%EB%93%9C%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%83%9D%EA%B2%BC%EB%82%98\" aria-label=\"51 테스트 피라미드는 어떻게 생겼나 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.1 테스트 피라미드는 어떻게 생겼나?</h1>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">(</span>cosmic-python-py3.10<span class=\"token punctuation\">)</span> C:<span class=\"token punctuation\">\\</span>cosmic_python<span class=\"token punctuation\">\\</span>pt1<span class=\"token punctuation\">\\</span>ch0<span class=\"token operator\"><span class=\"token file-descriptor important\">5</span>></span>pytest --collect-only <span class=\"token parameter variable\">-qq</span>\npt1/ch05/tests/e2e/test_app.py: <span class=\"token number\">4</span>\n\npt1/ch05/tests/integration/test_repository.py: <span class=\"token number\">4</span>\n\npt1/ch05/tests/unit/test_allocate.py: <span class=\"token number\">4</span>\npt1/ch05/tests/unit/test_batches.py: <span class=\"token number\">7</span>\npt1/ch05/tests/unit/test_services.py: <span class=\"token number\">4</span></code></pre></div>\n<p>그래도 피라미드처럼 생기긴 했구나…</p>\n<h1 id=\"52-도메인-계층-테스트를-서비스-계층으로-옮겨야하나\" style=\"position:relative;\"><a href=\"#52-%EB%8F%84%EB%A9%94%EC%9D%B8-%EA%B3%84%EC%B8%B5-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EC%84%9C%EB%B9%84%EC%8A%A4-%EA%B3%84%EC%B8%B5%EC%9C%BC%EB%A1%9C-%EC%98%AE%EA%B2%A8%EC%95%BC%ED%95%98%EB%82%98\" aria-label=\"52 도메인 계층 테스트를 서비스 계층으로 옮겨야하나 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.2 도메인 계층 테스트를 서비스 계층으로 옮겨야하나?</h1>\n<p>한 단계 더 나아가면…</p>\n<p>서비스 계층에 대해 소프트웨어를 테스트하기 때문에 더이상 도메인 모델 테스트가 필요없다. 대신 1장에서 작성한 도메인 레벨의 테스트를 서비스 계층에 대한 테스트로 재작성한다.</p>\n<h2 id=\"추상화를-한-단계-끌어올리자\" style=\"position:relative;\"><a href=\"#%EC%B6%94%EC%83%81%ED%99%94%EB%A5%BC-%ED%95%9C-%EB%8B%A8%EA%B3%84-%EB%81%8C%EC%96%B4%EC%98%AC%EB%A6%AC%EC%9E%90\" aria-label=\"추상화를 한 단계 끌어올리자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>추상화를 한 단계 끌어올리자!</h2>\n<h3 id=\"이-코드를\" style=\"position:relative;\"><a href=\"#%EC%9D%B4-%EC%BD%94%EB%93%9C%EB%A5%BC\" aria-label=\"이 코드를 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이 코드를…</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">test_prefers_current_stock_batches_to_shipments</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    in_stock_batch <span class=\"token operator\">=</span> Batch<span class=\"token punctuation\">(</span><span class=\"token string\">\"in-stock-batch\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"RETRO-CLOCK\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> eta<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\n    shipment_batch <span class=\"token operator\">=</span> Batch<span class=\"token punctuation\">(</span><span class=\"token string\">\"shipment-batch\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"RETRO-CLOCK\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> eta<span class=\"token operator\">=</span>tomorrow<span class=\"token punctuation\">)</span>\n    line <span class=\"token operator\">=</span> OrderLine<span class=\"token punctuation\">(</span><span class=\"token string\">\"oref\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"RETRO-CLOCK\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\n    allocate<span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>in_stock_batch<span class=\"token punctuation\">,</span> shipment_batch<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">assert</span> in_stock_batch<span class=\"token punctuation\">.</span>available_quantity <span class=\"token operator\">==</span> <span class=\"token number\">90</span>\n    <span class=\"token keyword\">assert</span> shipment_batch<span class=\"token punctuation\">.</span>available_quantity <span class=\"token operator\">==</span> <span class=\"token number\">100</span></code></pre></div>\n<h3 id=\"대충-이런-식으로\" style=\"position:relative;\"><a href=\"#%EB%8C%80%EC%B6%A9-%EC%9D%B4%EB%9F%B0-%EC%8B%9D%EC%9C%BC%EB%A1%9C\" aria-label=\"대충 이런 식으로 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>대충 이런 식으로…</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@pytest<span class=\"token punctuation\">.</span>mark<span class=\"token punctuation\">.</span>asyncio</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">test_prefers_current_stock_batches_to_shipments</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    in_stock_batch <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>Batch<span class=\"token punctuation\">(</span><span class=\"token string\">\"in-stock-batch\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"RETRO-CLOCK\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> eta<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\n    shipment_batch <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>Batch<span class=\"token punctuation\">(</span><span class=\"token string\">\"shipment-batch\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"RETRO-CLOCK\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> eta<span class=\"token operator\">=</span>tomorrow<span class=\"token punctuation\">)</span>\n    repo <span class=\"token operator\">=</span> FakeRepository<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>in_stock_batch<span class=\"token punctuation\">,</span> shipment_batch<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    line <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>OrderLine<span class=\"token punctuation\">(</span><span class=\"token string\">\"oref\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"RETRO-CLOCK\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">await</span> services<span class=\"token punctuation\">.</span>allocate<span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">,</span> repo<span class=\"token punctuation\">,</span> FakeSession<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">assert</span> in_stock_batch<span class=\"token punctuation\">.</span>available_quantity <span class=\"token operator\">==</span> <span class=\"token number\">90</span>\n    <span class=\"token keyword\">assert</span> shipment_batch<span class=\"token punctuation\">.</span>available_quantity <span class=\"token operator\">==</span> <span class=\"token number\">100</span></code></pre></div>\n<h2 id=\"이걸-왜-함\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EA%B1%B8-%EC%99%9C-%ED%95%A8\" aria-label=\"이걸 왜 함 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이걸 왜 함?</h2>\n<p>테스트로 시스템을 보다 쉽게 바꿀 수 있다는 것은 동의한다. 체감도 해봤으니까.</p>\n<p>하지만 저자는 도메인 모델에 의해 시간을 너무 허비하는 경우가 있을 수 있다고 한다. 코드베이스 하나 고치면 수십 수백개의 제반기능 테스트가 바뀔 수도 있으니까…</p>\n<p>테스트의 목적을 잘 생각해보자.</p>\n<ul>\n<li>변하면 안 되는 시스템의 특성을 강제로 유지하기 위해 사용한다</li>\n<li>E.g.,\n<ul>\n<li><code class=\"language-text\">200</code> 리턴이 계속 뜨는지?</li>\n<li>DB 세션이 커밋하고 있는지?</li>\n<li>도메인 로직이 여전히 도는지?</li>\n</ul>\n</li>\n</ul>\n<p>클린코드에서는 내게 <a href=\"https://blog.s3ich4n.me/books/clean-code/2023-02-10-pt09#%EA%B9%A8%EB%81%97%ED%95%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C-%EC%9C%A0%EC%A7%80%ED%95%98%EA%B8%B0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">뭐라 말했는지</a> 떠올려보자</p>\n<ul>\n<li>깨끗한 테스트코드?</li>\n<li>테스트의 존재의의는 실제 코드 점검</li>\n</ul>\n<p>⇒ 이는 설계와 아키텍처를 깨끗하게 보존하는 열쇠!\n- 이게 있어야 로직 고치기가 쉽다</p>\n<p>잘 생각해보자. 프로그램을 바꾸면 테스트가 깨진다. 코드의 설계를 바꿀 때 코드에 의존하는 테스트가 실패한다는 뜻이다.</p>\n<p>책은 서비스 계층이 시스템을 다양한 방식으로 조정할 수 있는 API를 형성하게 된다는 점을 시사한다. API에 대해 테스트를 짜면 도메인 모델 리팩토링 시 변경해야하는 코드를 줄일 수 있다. 서비스 계층 테스트만 하도록 제한하고, 모델 객체의 ‘사적인’ 속성이나 메소드, 테스트가 직접 상호작용하지 못하게 하면 모델객체를 보다 자유롭게 리팩토링할 수 있다.</p>\n<blockquote>\n<p>테스트에 넣는 코드는 하나하나가 본드방울 같아서 시스템을 특정 모양으로 만든다.</p>\n</blockquote>\n<p>테스트가 저수준이면 시스템 각 부분을 바꾸기가 어려워진다.</p>\n<blockquote>\n</blockquote>\n<h1 id=\"53-어떤-종류의-테스트를-싸야할까\" style=\"position:relative;\"><a href=\"#53-%EC%96%B4%EB%96%A4-%EC%A2%85%EB%A5%98%EC%9D%98-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EC%8B%B8%EC%95%BC%ED%95%A0%EA%B9%8C\" aria-label=\"53 어떤 종류의 테스트를 싸야할까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.3 어떤 종류의 테스트를 싸야할까?</h1>\n<p>“그럼 죄다 다시 짜요?” 할 것이다. 이 질문에 답하기 위해선 결합과 설계 피드백 사이의 트레이드오프를 반드시 이해해야한다.</p>\n<p><img src=\"%5Bhttps://www.cosmicpython.com/book/images/apwp_0501.png%5D(https://www.cosmicpython.com/book/images/apwp_0501.png)\" alt=\"\"></p>\n<p>익스트림 프로그래밍(XP)에서는 ‘코드에 귀기울여라(listen to the code)’ 라고 한다. (?) 테스트를 짤 때, 테스트 대상인 코드가 쓰기 어려운 코드인걸 발견하거나 코드 냄새를 맡을 수도 있다. 이러면 리팩토링하고 설계를 재점검 한다.</p>\n<p>하지만 대상 코드와 더 밀접하게 연관되어 작업할 때만 이런 피드백을 받을 수 있다. HTTP API에 대한 테스트는 훨씬 더 높은 수준의 추상화를 사용하므로 객체의 세부설계에 대한 피드백을 제공하지 않는다.</p>\n<p>전체 앱을 다시짜도 URL, 요청형식을 바꾸는게 아니면 앱은 HTTP 테스트를 계속 통과한다. 이러면 DB 스키마 변경 등의 대규모 변경 시에도 코드가 안망가지겠다 하는 자신감이 붙는다.</p>\n<p>이런 스펙트럼의 반대쪽에는 1장같은 테스트가 있다. 이런 테스트가 있으면 객체에 대한 이해증진에 크게 도움이 된다. 도메인 언어가 곧 테스트니까.</p>\n<p>이런 수준에서의 테스트는 새 행동양식을 ‘스케치’ 하고 코드가 어떻게 생겼는지를 살펴볼 수 있다. 하지만 이런 테스트는 특정 구현과 긴밀하게 연관되어있어서 코드 디자인을 개선하려면 이런 테스트를 다른 테스트로 대치하거나 바꿔야 한다.</p>\n<h1 id=\"54-high-and-low-gear\" style=\"position:relative;\"><a href=\"#54-high-and-low-gear\" aria-label=\"54 high and low gear permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.4 High and Low Gear</h1>\n<p>새 기능을 추가하거나 버그를 수정할 때 도메인 모델을 크게 바꿀 필요가 없다. 도메인 모델을 바꿔야 하는 경우 더 낮은 결합과 더 높은 커버리지를 제공하므로 서비스에 대한 테스트를 작성하는 게 더 좋다.</p>\n<p><code class=\"language-text\">add_stock</code>, <code class=\"language-text\">cancel_order</code> 같은 함수를 만드는 경우, 서비스 계층에 대한 테스트를 짜면 좀 더 빠르게 결합이 적은 테스트를 작성할 수 있다.</p>\n<p>새 플젝을 시작하거나 아주 어려운 특정 문제를 다뤄야 한다면 도메인 모델에 대한 테스트를 다시 짜서, 이를 통한 피드백을 얻고 의도를 더 명확하게 설명하는 “살아있는” 문서(테스트코드!)를 얻을 수 있다.</p>\n<p>이래서 필자는 저단기어, 고단기어라는 메타포(은유)를 사용했다. low gear로 빠르게 움직이기 시작하면 high gear로 바꿔서 더 빠르게 움직일 수 있다. 위험해서 속도를 낮춰야되면 기어비를 낮춰야된다.</p>\n<h1 id=\"55-서비스-계층-테스트를-도메인으로부터-분리하기\" style=\"position:relative;\"><a href=\"#55-%EC%84%9C%EB%B9%84%EC%8A%A4-%EA%B3%84%EC%B8%B5-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EB%8F%84%EB%A9%94%EC%9D%B8%EC%9C%BC%EB%A1%9C%EB%B6%80%ED%84%B0-%EB%B6%84%EB%A6%AC%ED%95%98%EA%B8%B0\" aria-label=\"55 서비스 계층 테스트를 도메인으로부터 분리하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.5 서비스 계층 테스트를 도메인으로부터 분리하기</h1>\n<p>서비스 테스트에는 도메인 모델에 대한 의존성이 있다. 테스트 데이터 설정 및 서비스 계층 함수 호출을 위해 도메인 객체를 쓰기 때문이다.</p>\n<p>이를 위해 원시타입만 사용하도록 다시 짜야한다.</p>\n<p>서비스 안의 <code class=\"language-text\">allocate()</code> 함수부터 시작하자.</p>\n<p>테스트가 함수를 호출하면서 원시타입을 쓰게 리팩토링 후… 5.5.1을 통해 헬퍼 함수나 픽스처로 도메인 모델을 내보내는 추상화를 한다. → 이러면 테스트의 의존성은 최대한 떨어뜨릴 수 있다.</p>\n<p>해당 서비스 로직에서는 모델을 쓰도록 한다!</p>\n<h2 id=\"551-바꿔보자-1\" style=\"position:relative;\"><a href=\"#551-%EB%B0%94%EA%BF%94%EB%B3%B4%EC%9E%90-1\" aria-label=\"551 바꿔보자 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.5.1 바꿔보자 (1)</h2>\n<h3 id=\"테스트가-이렇게-풀리고\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8%EA%B0%80-%EC%9D%B4%EB%A0%87%EA%B2%8C-%ED%92%80%EB%A6%AC%EA%B3%A0\" aria-label=\"테스트가 이렇게 풀리고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트가 이렇게 풀리고</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FakeRepository</span><span class=\"token punctuation\">(</span>AbstractRepository<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n    <span class=\"token decorator annotation punctuation\">@staticmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">for_batch</span><span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">,</span> sku<span class=\"token punctuation\">,</span> qty<span class=\"token punctuation\">,</span> eta<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> FakeRepository<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n            model<span class=\"token punctuation\">.</span>Batch<span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">,</span> sku<span class=\"token punctuation\">,</span> qty<span class=\"token punctuation\">,</span> eta<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># for_batch 같은 팩토리 함수를 만들어서 모든 도메인 의존성을 픽스처에 옮긴다!</span>\n<span class=\"token decorator annotation punctuation\">@pytest<span class=\"token punctuation\">.</span>mark<span class=\"token punctuation\">.</span>asyncio</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">test_returns_allocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    repo <span class=\"token operator\">=</span> FakeRepository<span class=\"token punctuation\">.</span>for_batch<span class=\"token punctuation\">(</span><span class=\"token string\">\"b1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"COMPLICATED-LAMP\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> eta<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\n    result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> services<span class=\"token punctuation\">.</span>allocate<span class=\"token punctuation\">(</span><span class=\"token string\">\"o1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"COMPLICATED-LAMP\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> repo<span class=\"token punctuation\">,</span> FakeSession<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">assert</span> result <span class=\"token operator\">==</span> <span class=\"token string\">\"b1\"</span></code></pre></div>\n<h3 id=\"본-로직은-이렇게-풀린다\" style=\"position:relative;\"><a href=\"#%EB%B3%B8-%EB%A1%9C%EC%A7%81%EC%9D%80-%EC%9D%B4%EB%A0%87%EA%B2%8C-%ED%92%80%EB%A6%B0%EB%8B%A4\" aria-label=\"본 로직은 이렇게 풀린다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>본 로직은 이렇게 풀린다</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span>\n        orderid<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span>\n        sku<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span>\n        qty<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>\n        repo<span class=\"token punctuation\">:</span> repository<span class=\"token punctuation\">.</span>AbstractRepository<span class=\"token punctuation\">,</span>\n        session<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\" batches를 line에 할당한다.\n\n    FYI,\n        의존성 역전 원칙이 여기 들어감에 유의!\n        고수준 모듈인 서비스 계층은 저장소라는 추상화에 의존한다.\n        구현의 세부내용은 어떤 영속 저장소를 선택했느냐에 따라 다르지만\n        같은 추상화에 의존한다.\n\n    :param orderid:\n    :param sku:\n    :param qty:\n    :param repo:\n    :param session:\n    :return:\n    \"\"\"</span>\n    line <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>OrderLine<span class=\"token punctuation\">(</span>orderid<span class=\"token punctuation\">,</span> sku<span class=\"token punctuation\">,</span> qty<span class=\"token punctuation\">)</span>\n    batches <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> repo<span class=\"token punctuation\">.</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> is_valid_sku<span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">.</span>sku<span class=\"token punctuation\">,</span> batches<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">raise</span> InvalidSku<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'Invalid sku </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>line<span class=\"token punctuation\">.</span>sku<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n\n    batchref <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>allocate<span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">,</span> batches<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">await</span> session<span class=\"token punctuation\">.</span>commit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> batchref</code></pre></div>\n<h2 id=\"552-추가해보자-2\" style=\"position:relative;\"><a href=\"#552-%EC%B6%94%EA%B0%80%ED%95%B4%EB%B3%B4%EC%9E%90-2\" aria-label=\"552 추가해보자 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.5.2 추가해보자 (2)</h2>\n<p>재고 추가 서비스(<code class=\"language-text\">add_batch</code>)를 만든다고 하자. 서비스 계층의 공식적인 유스케이스를 쓰는 서비스 계층 테스트 작성이 가능하다. 도메인에 대한 의존관계 또한 떼어낼 수 있다.</p>\n<blockquote>\n<p>저자의 팁</p>\n</blockquote>\n<p>일반적으로 서비스 계층 테스트에서 도메인 계층에 있는 요소가 필요하다면\n이는 서비스 계층이 완전하지 않다는 사실을 보여주는 지표<em>일 수 있다</em>(<em>it may be an indication that your service layer is incomplete)</em>.</p>\n<blockquote>\n</blockquote>\n<h3 id=\"테스트는-이렇게\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%8A%94-%EC%9D%B4%EB%A0%87%EA%B2%8C\" aria-label=\"테스트는 이렇게 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트는 이렇게</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@pytest<span class=\"token punctuation\">.</span>mark<span class=\"token punctuation\">.</span>asyncio</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">test_add_batch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    repo<span class=\"token punctuation\">,</span> session <span class=\"token operator\">=</span> FakeRepository<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> FakeSession<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">await</span> services<span class=\"token punctuation\">.</span>add_batch<span class=\"token punctuation\">(</span><span class=\"token string\">\"b1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"CRUNCHY-ARMCHAIR\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> repo<span class=\"token punctuation\">,</span> session<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">assert</span> <span class=\"token keyword\">await</span> repo<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"b1\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span>\n    <span class=\"token keyword\">assert</span> session<span class=\"token punctuation\">.</span>committed</code></pre></div>\n<h3 id=\"서비스-코드는-이렇게\" style=\"position:relative;\"><a href=\"#%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%BD%94%EB%93%9C%EB%8A%94-%EC%9D%B4%EB%A0%87%EA%B2%8C\" aria-label=\"서비스 코드는 이렇게 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>서비스 코드는 이렇게</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">add_batch</span><span class=\"token punctuation\">(</span>\n        ref<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span>\n        sku<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span>\n        qty<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>\n        eta<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span>date<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        repo<span class=\"token punctuation\">:</span> repository<span class=\"token punctuation\">.</span>AbstractRepository<span class=\"token punctuation\">,</span>\n        session<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">await</span> repo<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>Batch<span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">,</span> sku<span class=\"token punctuation\">,</span> qty<span class=\"token punctuation\">,</span> eta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">await</span> session<span class=\"token punctuation\">.</span>commit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>진짜 최소한의 사용만을 했다.</p>\n<p>저자가 원하는 것은 <strong>모든</strong> 서비스 계층 테스트에 대해 의존성 없이 오직 서비스 자체와 원시타입만을 이용해서 짜는 것이다.</p>\n<blockquote>\n<p>저자는 <code class=\"language-text\">add_batch</code> 가 필요할 수도 있으니 만들어두고 테스트에서 의존성도 떼어냈다. 그래서 언제든지 리팩토링할 수 있는 것이다.</p>\n</blockquote>\n<h1 id=\"56-e2e-테스트에-도달할-때-까지-계속-개선하기\" style=\"position:relative;\"><a href=\"#56-e2e-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%97%90-%EB%8F%84%EB%8B%AC%ED%95%A0-%EB%95%8C-%EA%B9%8C%EC%A7%80-%EA%B3%84%EC%86%8D-%EA%B0%9C%EC%84%A0%ED%95%98%EA%B8%B0\" aria-label=\"56 e2e 테스트에 도달할 때 까지 계속 개선하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.6 E2E 테스트에 도달할 때 까지 계속 개선하기</h1>\n<p><code class=\"language-text\">add_batch</code> 를 추가해서 서비스 계층 테스트를 모델에서 분리할 수 있었다.</p>\n<p>배치를 추가하는 API 엔드포인트를 추가하면 <code class=\"language-text\">add_stock</code> 같은 픽스처를 없앨 수도 있다.</p>\n<hr>\n<p>이건 좀 신박하네…. 어차피 필요한 기능이다 싶어서 과감하게 넣은건가? 이러면 테스트용 API 이런식인가?</p>\n<hr>\n<p>이거 정상적으로 돌리는건 UoW 되고나서 다시 할거다.</p>\n<p>하드코딩 SQL을 API콜로 바꾸면 API를 제외한 의존성을 분리완료했다는 의미가 된다(!).</p>\n<h1 id=\"57-마치며\" style=\"position:relative;\"><a href=\"#57-%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"57 마치며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.7 마치며</h1>\n<p>서비스 계층을 만들면 대부분의 테스트를 단위 테스트로 옮기고 건전한 테스트 피라미드(<em>a healthy test pyramid</em>)를 만들 수 있다.</p>\n<p>여러 유형의 테스트를 작성하는 간단한 규칙</p>\n<ol>\n<li>‘특성 당 E2E 테스트 하나를 만든다’ 라는 목표를 잡자\n<ol>\n<li>이런 식의 테스트는 HTTP API를 쓸 가능성이 높다. 피처가 잘 작동하는 지 보고, 이에 따라 움직이는 모든 부품이 잘 연결되는지 살펴보는 것이다.</li>\n</ol>\n</li>\n<li>테스트 대부분은 서비스 계층을 사용하여 만드는 것을 권한다.\n<ol>\n<li>이런 식의 테스트는 커버리지, 실행 시간, 효율 사이를 잘 절충하도록 도와준다.\n<ol>\n<li>각 테스트는 어떤 기능의 한 경로를 테스트하고 I/O에 가짜 객체(<em>fakes for I/O</em>)를 사용하는 경향이 있다.</li>\n</ol>\n</li>\n<li>이런 테스트는 모든 edge case를 다루고, 비즈니스 로직의 모든 입력/출력을 테스트해볼 수 있다.\n<ol>\n<li>8장을 보고나서 업데이트 할 것이다. 서로 협력하는 도메인 객체 사이의 저수준 단위 테스트를 제거함으로서 배워보자.</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>도메인 모델을 사용하는 핵심 테스트를 적게 작성하고 유지하자\n<ol>\n<li>이런 테스트는 커버리지가 작고(좁은 범위를 테스트), 더 깨지기 쉽다. 하지만 이 테스트가 제공하는 피드백이 가장 크다.</li>\n<li>이런 테스트를 서비스 계층 기반으로 바꿀 수 있으면 바로바로 하는 것을 권한다.</li>\n</ol>\n</li>\n<li>오류 처리도 특성으로 취급하자\n<ol>\n<li><strong>이상적인 경우</strong> 앱은 모든 오류가 엔트리포인트까지(나는 FastAPI) 올라와서 처리된다.즉 테스트를 아래와 같이 유지하면 된다는 뜻이다:\n<ol>\n<li>모든 비정상경로를 테스트하는 E2E 테스트 한개</li>\n<li>각 기능의 정상경로만 테스트</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>","fields":{"slug":"/books/cosmic-python/2023-04-16---pt01-ch05//books/cosmic-python/2023-04-16-pt01-ch05","tagSlugs":["/tag/ddd/","/tag/books/","/tag/backend/","/tag/python/"]},"frontmatter":{"date":"2023-04-16T03:26:01.000Z","description":"파이썬으로 살펴보는 아키텍처 패턴을 읽고 이해한 내용을 작성합니다. 챕터 5, 높은 기어비와 낮은 기어비의 TDD에 대한 내용입니다.","tags":["ddd","books","backend","python"],"title":"파이썬으로 살펴보는 아키텍처 패턴 (5)","socialImage":{"publicURL":{"publicURL":"/static/66b1d3acbf31f0d2ad20eee928a14aaa/universe.jpg"}}}}},"pageContext":{"slug":"/books/cosmic-python/2023-04-16---pt01-ch05//books/cosmic-python/2023-04-16-pt01-ch05"}},"staticQueryHashes":["251939775","357378587","401334301"]}