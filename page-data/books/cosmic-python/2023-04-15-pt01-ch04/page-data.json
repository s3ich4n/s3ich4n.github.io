{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/books/cosmic-python/2023-04-15-pt01-ch04","result":{"data":{"markdownRemark":{"id":"52762b1e-1487-5125-ad86-11eec302e5a2","html":"<p>이 내용은 “파이썬으로 살펴보는 아키텍처 패턴” 을 읽고 작성한 내용입니다. 블로그 게시글과, 작성한 코드를 함께 보시면 더욱 좋습니다.</p>\n<p>4장은 해당 코드를 살펴봐주세요. <a href=\"https://github.com/s3ich4n/cosmicpython-study/tree/main/pt1/ch04\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">코드 링크</a></p>\n<h1 id=\"4장-api와-서비스-계층\" style=\"position:relative;\"><a href=\"#4%EC%9E%A5-api%EC%99%80-%EC%84%9C%EB%B9%84%EC%8A%A4-%EA%B3%84%EC%B8%B5\" aria-label=\"4장 api와 서비스 계층 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4장 API와 서비스 계층</h1>\n<p>이런 구조를 만들 것이다</p>\n<p><img src=\"https://www.cosmicpython.com/book/images/apwp_0401.png\" alt=\"Untitled\"></p>\n<p>이 장에서는 오케스트레이션 로직, 비즈니스 로직, 연결 코드 사이의 차이를 이해한다. 워크플로우 조정 및 시스템의 유스케이스를 정의하는 서비스 계층 패턴을 알아본다.</p>\n<p>테스트도 살펴본다. 서비스 계층과 데이터베이스에 대한 저장소 추상화를 조합할 것이다. 이를 통해 도메인 모델 뿐 아니라 유스케이스의 전체 워크플로우를 테스트할 것이다.</p>\n<p>테스트할 때 보면 프로덕션 코드는 <code class=\"language-text\">SqlAlchemyRepository</code> 를 쓰고, 테스트할 때는 <code class=\"language-text\">FakeRepository</code>를 쓰게 한다.</p>\n<h1 id=\"41-애플리케이션을-실세계와-연결하기\" style=\"position:relative;\"><a href=\"#41-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98%EC%9D%84-%EC%8B%A4%EC%84%B8%EA%B3%84%EC%99%80-%EC%97%B0%EA%B2%B0%ED%95%98%EA%B8%B0\" aria-label=\"41 애플리케이션을 실세계와 연결하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.1 애플리케이션을 실세계와 연결하기</h1>\n<p>이게 가장 빨라야한다! MVP니까…</p>\n<p>도메인에 필요한걸 만들고 주문할당(allocate)을 하는 도메인 서비스도 만들었고, 리포지토리 인터페이스도 만들었다…</p>\n<p>그러면 다음 할 일은 아래와 같다:</p>\n<ol>\n<li>플라스크를 써서 <code class=\"language-text\">allocate</code> 도메인 서비스 앞에 API 엔드포인트를 둔다. DB 세션과 저장소를 연결한다. 이렇게 만든 시스템은 e2e 테스트와 빠르게 만든 SQL 문으로 테스트한다.</li>\n<li>서비스 계층을 리팩토링한다. 플라스크와 도메인 모델 사이에 유스케이스를 담는 추상화 계층을 만든다. 몇 가지 서비스 계층 테스트를 만들고 <code class=\"language-text\">FakeRepository</code> 를 써서 코드를 테스트한다.</li>\n<li>서비스 계층의 기능을 여러 유형의 파라미터로 실험한다. 원시 데이터 타입으로 서비스 계층의 클라이언트 (테스트와 API)를 모델에서 분리해본다.</li>\n</ol>\n<h1 id=\"42-첫-e2e-테스트\" style=\"position:relative;\"><a href=\"#42-%EC%B2%AB-e2e-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"42 첫 e2e 테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.2 첫 E2E 테스트</h1>\n<p>실제 API 엔드포인트(HTTP)와 실제 DB를 사용하는 테스트를 한, 두개정도 짜고 리팩토링 또 한다.</p>\n<p>일단 처음엔 어쨌거나 만든다. 랜덤 문자열을 생성하고, DB에 row를 넣는 함수를 실제로 짠다.</p>\n<h1 id=\"43-직접-구현하기\" style=\"position:relative;\"><a href=\"#43-%EC%A7%81%EC%A0%91-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0\" aria-label=\"43 직접 구현하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.3 직접 구현하기</h1>\n<p>책에선 플라스크를, 나는 FastAPI를 통해서 짰다. 그런데 이 테스트의 한계는 DB커밋을 해야한다는 점이다.</p>\n<h1 id=\"44-db-검사가-필요한-오류조건\" style=\"position:relative;\"><a href=\"#44-db-%EA%B2%80%EC%82%AC%EA%B0%80-%ED%95%84%EC%9A%94%ED%95%9C-%EC%98%A4%EB%A5%98%EC%A1%B0%EA%B1%B4\" aria-label=\"44 db 검사가 필요한 오류조건 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.4 DB 검사가 필요한 오류조건</h1>\n<p>이런 케이스는 DB 측의 데이터 무결성 검사다. 도메인 서비스 호출 전에 캐치해야한다.</p>\n<ul>\n<li>도메인이 재고가 소진된 sku에 대해 예외가 발생하면?</li>\n<li>존재하지 않는 sku에 대한 예외처리는?</li>\n</ul>\n<p>근데 이 방어로직을 API에 넣으면 E2E 테스트 갯수가 점점 많아지게되고 역피라미드형 테스트가 된다. 테스트코드도 꼬인다…</p>\n<p>따라서, API에 있던 일부 로직을 유스케이스로 빼고, 이를 테스트하기 위해 <code class=\"language-text\">FakeRepository</code>를 쓸 때가 왔다.</p>\n<h1 id=\"45-서비스-계층-소개와-서비스-계층-테스트용-fakerepository-사용\" style=\"position:relative;\"><a href=\"#45-%EC%84%9C%EB%B9%84%EC%8A%A4-%EA%B3%84%EC%B8%B5-%EC%86%8C%EA%B0%9C%EC%99%80-%EC%84%9C%EB%B9%84%EC%8A%A4-%EA%B3%84%EC%B8%B5-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%9A%A9-fakerepository-%EC%82%AC%EC%9A%A9\" aria-label=\"45 서비스 계층 소개와 서비스 계층 테스트용 fakerepository 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.5 서비스 계층 소개와 서비스 계층 테스트용 <code class=\"language-text\">FakeRepository</code> 사용</h1>\n<p>API는 가만보면 오케스트레이션이다. 저장소에서 뭐 갖고와서 DB 상태에 맞게 검증도 하고 오류 처리도 하고, 성공적이면 DB에 값도 커밋한다. 근데 이런 작업은 API하고는 관련이 없다.</p>\n<ol>\n<li><code class=\"language-text\">FakeRepository</code> 를 이용해서 진짜 손쉽게 AAA 테스트코드를 구현했다</li>\n<li><code class=\"language-text\">FakeSession</code> 을 이용해서 세션도 가짜로 만든다. 6장서 리팩토링할거다</li>\n</ol>\n<p>→ 당연하겠지만 커밋도 테스트 대상이다</p>\n<h2 id=\"451-서비스-함수-작성\" style=\"position:relative;\"><a href=\"#451-%EC%84%9C%EB%B9%84%EC%8A%A4-%ED%95%A8%EC%88%98-%EC%9E%91%EC%84%B1\" aria-label=\"451 서비스 함수 작성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.5.1 서비스 함수 작성</h2>\n<p>이런 구성을 가져간다.</p>\n<ol>\n<li>저장소에서 객체를 가져온다</li>\n<li>애플리케이션이 아는 세계를 바탕으로 요청검사/검증(assertion) 한다</li>\n<li>도메인 서비스를 호출한다</li>\n<li>모두 정상실행했다면 변경된 상태를 저장/업데이트 한다</li>\n</ol>\n<h2 id=\"452-deallocate-을-만든다면\" style=\"position:relative;\"><a href=\"#452-deallocate-%EC%9D%84-%EB%A7%8C%EB%93%A0%EB%8B%A4%EB%A9%B4\" aria-label=\"452 deallocate 을 만든다면 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.5.2 <code class=\"language-text\">deallocate</code> 을 만든다면?</h2>\n<ol>\n<li>제 1 사이클: 일단 짜자\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled>  deallocate하는 도메인 로직부터 짜고 테스트한다</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled>  저장소 로직을 만든다</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled>  유스케이스를 만든다</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled>  e2e를 만든다</li>\n</ul>\n</li>\n<li>제 2 사이클: 3장에서 본 내용을 적용해보자…\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled>  올바른 추상화를 하고있나?</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled>  바운더리가 어디어디 끊어지고, 이를 함수레벨로 나눌 수 있을까?</li>\n</ul>\n</li>\n</ol>\n<p>UoW 하고나서 다시 할거다…</p>\n<h1 id=\"46-왜-서비스라-부름\" style=\"position:relative;\"><a href=\"#46-%EC%99%9C-%EC%84%9C%EB%B9%84%EC%8A%A4%EB%9D%BC-%EB%B6%80%EB%A6%84\" aria-label=\"46 왜 서비스라 부름 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.6 왜 서비스라 부름?</h1>\n<p>여기서 서비스라 부르는건 두 가지가 있다:</p>\n<ol>\n<li>도메인 서비스\n<ol>\n<li>도메인 모델에 속하지만, 엔티티/VO에 속하지 않는 로직을 부르는 이름이다.</li>\n<li>E.g., 쇼핑카트 애플리케이션을 만든다고 할 때\n<ol>\n<li>도메인 서비스로 세금 관련 규칙을 구현한다</li>\n<li>모델에서는 중요하지만, 세금 관련만을 위한 영속적 엔티티를 빼지 않으려고 하는 것이다</li>\n<li>구현한다면 <code class=\"language-text\">TaxCalculator</code> 라는 클래스나 <code class=\"language-text\">calculate_tax</code> 같은 함수들로 처리하면 될 것이다</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>서비스 계층\n<ol>\n<li>외부 세계로부터 오는 요청을 처리해 연산을 오케스트레이션 한다.</li>\n<li>아래 단계를 수행하여 애플리케이션을 제어한다\n<ol>\n<li>DB에서 데이터를 얻는다</li>\n<li>도메인 모델을 업데이트한다</li>\n<li>바뀐 내용을 영속화한다</li>\n</ol>\n</li>\n<li>비즈니스 로직과 떼어내서 프로그램을 깔끔하게 두자</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"461-처리과정\" style=\"position:relative;\"><a href=\"#461-%EC%B2%98%EB%A6%AC%EA%B3%BC%EC%A0%95\" aria-label=\"461 처리과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.6.1 처리과정</h2>\n<ol>\n<li>또 리팩토링…</li>\n</ol>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled>  개별 테스트도 메모리로 하면 되고, 값 준비해야되는걸 픽스처로 처리하자.</li>\n</ul>\n<p><code class=\"language-text\">yield</code> 전후로 setup, teardown으로 두자</p>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled>  DB initialize 로직을 실제 앱 실행, 테스팅 두가지로 나누고 providers override로 처리하자\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" checked disabled>  이러면 의존성 역전이 되는건지 살펴보자</p>\n<blockquote>\n<p><em>This helps in testing. This also helps in overriding API clients with stubs for the development or staging environment.</em></p>\n<p><a href=\"https://python-dependency-injector.ets-labs.org/providers/overriding.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Provider overriding</a> , Dependency Injector</p>\n</blockquote>\n<p>되는듯!</p>\n</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" checked disabled>  일단 너무 많은기능을 한번에 할려는 것 같으니 구획을 좀 나눠보자</p>\n<ul>\n<li>테스트 구동 프로시저\n<ul>\n<li><code class=\"language-text\">AsyncClient</code>로 앱 구동함 → DB처리를 여기서도 함</li>\n<li>DB처리\n<ol>\n<li>‘엔진’ 생성</li>\n<li>메타데이터를 통한 테스트DB 생성</li>\n<li>SQLAlchemy의 ‘세션’ 생성</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>앱 구동 프로시저 (영 불안한 코드…)\n<ul>\n<li>ORM 사용을 위한 SQLAlchemy의 ‘매핑’ 수행</li>\n<li>세션메이커 만들고 필요할 때마다 yield 해가게 세팅함</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled>  도메인 서비스 관련 처리과정\n<ul>\n<li>테스트를 나눠서 성공했다</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li>서비스 계층 처리과정\n<ul>\n<li>UoW 로 나누면서 해결할거다. 지금은 세션의 아래 문제 때문에 못한다\n<ul>\n<li>처음 선언시 engine 주소</li>\n</ul>\n<code class=\"language-text\">&lt;pt1.ch04.adapters.postgres.AsyncSQLAlchemy object at 0x000002A79A5C7670></code>\n<ul>\n<li>테스트 환경서…</li>\n</ul>\noverride로 주입한 db의 engine 주소 <code class=\"language-text\">&lt;pt1.ch04.adapters.postgres.AsyncSQLAlchemy object at 0x000002A79AA650C0></code>\n<ul>\n<li>다시 로직에서…</li>\n</ul>\ninit_session_factory 으로 세션을 가져오는 sqlalchemy engine 주소 <code class=\"language-text\">&lt;pt1.ch04.adapters.postgres.AsyncSQLAlchemy object at 0x000002A79A5C7670></code></li>\n<li>즉, 주소가 다르니까 거기서 갖고와봤자… 이런걸로 진 빼지말고 개선하면서 해결하자</li>\n<li>❓이런 상황에서는 어떻게 시간분배를 해야할까? 이건 어디에 어떻게 물어보면 좋을까?</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"47-디렉토리-구조를-잡자\" style=\"position:relative;\"><a href=\"#47-%EB%94%94%EB%A0%89%ED%86%A0%EB%A6%AC-%EA%B5%AC%EC%A1%B0%EB%A5%BC-%EC%9E%A1%EC%9E%90\" aria-label=\"47 디렉토리 구조를 잡자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.7 디렉토리 구조를 잡자</h1>\n<p>여기서는 책에서 제시하는 구조를 <strong>일단</strong> 따른다. 주관은 지식이 생긴 후에 갖추는 것이 맞다고 생각한다.</p>\n<ol>\n<li><code class=\"language-text\">domain</code> → 도메인 모델\n<ol>\n<li>클래스마다 파일을 만든다</li>\n<li>엔티티 VO, Aggragate에 대한 부모 클래스도 여기에</li>\n<li>exception이나 command, event도 여기</li>\n</ol>\n</li>\n<li><code class=\"language-text\">service_layer</code> → 서비스 계층\n<ol>\n<li>서비스 계층 예외가 추가가능</li>\n<li>uow를 여기…</li>\n</ol>\n</li>\n<li><code class=\"language-text\">adapters</code> → ‘포트와 어댑터’ 용어에 사용된 <strong>어댑터</strong>\n<ol>\n<li>외부 I/O를 감싸는 추상화(redis_client.py)를 넣음</li>\n<li>secondary adapter, driven adapter, inward-facing adapter 라고 일컫는다</li>\n</ol>\n</li>\n<li><code class=\"language-text\">entrypoints</code> → 애플리케이션 제어 시점, ‘포트와 어댑터의’ <strong>어댑터</strong>\n<ol>\n<li>primary adapter, driving adapter, outward-facing adatper 라고 일컫는다</li>\n</ol>\n</li>\n</ol>\n<p><strong>포트</strong>는? 어댑터가 구현하는 <strong>추상 인터페이스</strong>이다. 포트를 구현하는 어댑터와 같은 파일 안에 포트를 넣는다.</p>\n<h1 id=\"48-마무리\" style=\"position:relative;\"><a href=\"#48-%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"48 마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.8 마무리</h1>\n<ul>\n<li>API 엔드포인트가 얇고 짜기 쉬워진다 → 웹 기능만 모아놨다</li>\n<li>도메인에 대한 API 정의를 했다. 논리적인 작업을 통으로 모아놓은 엔트리포인트다</li>\n<li>서비스 계층의 장점은 아래와 같다\n<ul>\n<li>테스트를 ‘높은 기어비’로 작성할 수 있다</li>\n<li>도메인 모델을 적합한 형태로 리팩토리링 할 수 있다</li>\n<li>이를 활용하여 유스케이스를 제공할 수 있는 한 이미 존재하는 많은 테스트를 재작성하지 않고도 새 설계를 테스트할 수 있다</li>\n</ul>\n</li>\n<li>테스트 피라미드도 (아직까지) 나쁘지 않다</li>\n</ul>\n<h2 id=\"481-dip가-어떻게-돌아가는지\" style=\"position:relative;\"><a href=\"#481-dip%EA%B0%80-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%8F%8C%EC%95%84%EA%B0%80%EB%8A%94%EC%A7%80\" aria-label=\"481 dip가 어떻게 돌아가는지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.8.1 DIP가 어떻게 돌아가는지….</h2>\n<p>서비스 계층이 어떻게 의존하는지 다시 살펴보자.</p>\n<p>서비스 계층은 도메인 모델, <code class=\"language-text\">AbstractRepository</code> 를 받는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span>\n        line<span class=\"token punctuation\">:</span> model<span class=\"token punctuation\">.</span>OrderLine<span class=\"token punctuation\">,</span>\n        repo<span class=\"token punctuation\">:</span> repository<span class=\"token punctuation\">.</span>AbstractRepository<span class=\"token punctuation\">,</span>\n        session<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\" batches를 line에 할당한다.\n\n    FYI,\n        의존성 역전 원칙이 여기 들어감에 유의!\n        고수준 모듈인 서비스 계층은 저장소라는 추상화에 의존한다.\n        구현의 세부내용은 어떤 영속 저장소를 선택했느냐에 따라 다르지만\n        같은 추상화에 의존한다.\n\n    :param line:\n    :param repo:\n    :param session:\n    :return:\n    \"\"\"</span>\n    batches <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> repo<span class=\"token punctuation\">.</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> is_valid_sku<span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">.</span>sku<span class=\"token punctuation\">,</span> batches<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">raise</span> InvalidSku<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'Invalid sku </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>line<span class=\"token punctuation\">.</span>sku<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n    batchref <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>allocate<span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">,</span> batches<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">await</span> session<span class=\"token punctuation\">.</span>commit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> batchref</code></pre></div>\n<p>그죠?</p>\n<p>프로덕션 상에서는 <code class=\"language-text\">SqlAlchemyRepository</code>를 플라스크가 “제공” 하면 DIP가 이루어진다.</p>\n<p>여기까지의 트레이드오프를 살펴보자</p>\n<table>\n<thead>\n<tr>\n<th>장점</th>\n<th>단점</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>애플리케이션의 모든 유스케이스를 넣을 유일한 위치가 생긴다</td>\n<td>앱이 순수한 웹앱일 경우, 컨트롤러/뷰 함수는 모든 유스케이스를 넣을 유일한 위치가 된다</td>\n</tr>\n<tr>\n<td>정교한 도메인로직을 API뒤로 숨긴다. 리팩토링이 쉬워진다</td>\n<td>서비스 계층도 또다른 추상화 계층이다</td>\n</tr>\n<tr>\n<td>‘HTTP와 말하는 기능’을 ‘할당을 말하는 기능’으로부터 말끔하게 분리했다</td>\n<td>서비스 계층이 너무 커지면 anemic domain 이 된다. 컨트롤러에서 오케스트레이션 로직이 생길 때 서비스 계층을 만드는게 낫다</td>\n</tr>\n<tr>\n<td>저장소 패턴 및 FakeRepository 와 조합하면 도메인 계층보다 더 높은 수준에서 테스트를 쓸 수 있다. 통합테스트 없이 개별 테스트가 가능해진다.</td>\n<td></td>\n</tr>\n<tr>\n<td>(5장에서 더 자세히 보자)</td>\n<td>풍부한 도메인 모델로 얻을 수 있는 이익 대부분은 단순히 컨트롤러에서 로직을 뽑아내 모델 계층으로 보내는 것 만으로 얻을 수 있다. 컨트롤러와 모델 계층 사이에 또다른 계층을 추가할 필요가 없다.</td>\n</tr>\n<tr>\n<td>대부분의 경우 얇은 컨트롤러와 두꺼운 모델로 충분하기 때문이다.</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>개선해야 할 점도 있다</p>\n<ul>\n<li>서비스 계층 API가 <code class=\"language-text\">OrderLine</code> 객체를 사용해 표현되므로, 서비스 계층이 여전히 도메인과 연관되어있다. 이 고리를 끊자.</li>\n<li>서비스 계층은 세션 객체와 밀접하게 결합되어 있다. UoW로 풀어보자.</li>\n</ul>\n<h1 id=\"끝으로\" style=\"position:relative;\"><a href=\"#%EB%81%9D%EC%9C%BC%EB%A1%9C\" aria-label=\"끝으로 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>끝으로</h1>\n<p>잘 되겠지… 하는 코드를 점차 없애자. 저기서 문제가 나면 어떻게 할 거야…</p>\n<p>SQLAlchemy 2.0 쿼리 방안을 좀 익혀두자</p>\n<p><a href=\"https://docs.sqlalchemy.org/en/20/changelog/migration_20.html#migration-orm-usage\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">SQLAlchemy 2.0 - Major Migration Guide\n—\nSQLAlchemy 2.0 Documentation</a></p>\n<h2 id=\"sqlite\" style=\"position:relative;\"><a href=\"#sqlite\" aria-label=\"sqlite permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>sqlite?</h2>\n<p>SQLite는 딱히 TRUNCATE TABLE이 없다. 그래서 <code class=\"language-text\">DELETE FROM</code> 으로 다 날리면 된다</p>\n<p>한편 postgres에서 DB 테스트하고 날릴거면 <code class=\"language-text\">nextval</code> 시퀀스 초기화라거나 그런 부분들도 생각해야한다.</p>","fields":{"slug":"/books/cosmic-python/2023-04-15---pt01-ch04//books/cosmic-python/2023-04-15-pt01-ch04","tagSlugs":["/tag/ddd/","/tag/books/","/tag/backend/","/tag/python/"]},"frontmatter":{"date":"2023-04-15T22:19:24.000Z","description":"파이썬으로 살펴보는 아키텍처 패턴을 읽고 이해한 내용을 작성합니다. 챕터 4, 결합과 추상화에 대한 내용입니다.","tags":["ddd","books","backend","python"],"title":"파이썬으로 살펴보는 아키텍처 패턴 (4)","socialImage":{"publicURL":{"publicURL":"/static/66b1d3acbf31f0d2ad20eee928a14aaa/universe.jpg"}}}}},"pageContext":{"slug":"/books/cosmic-python/2023-04-15---pt01-ch04//books/cosmic-python/2023-04-15-pt01-ch04"}},"staticQueryHashes":["251939775","357378587","401334301"]}