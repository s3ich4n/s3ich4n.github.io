{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/books/cosmic-python/2023-05-18-pt02-ch10","result":{"data":{"markdownRemark":{"id":"1809731f-cc01-5300-a5c0-34877fa5ce57","html":"<p>이 내용은 “파이썬으로 살펴보는 아키텍처 패턴” 을 읽고 작성한 내용입니다. 블로그 게시글과, 작성한 코드를 함께 보시면 더욱 좋습니다.</p>\n<p>11장은 해당 코드를 살펴봐주세요. <a href=\"https://github.com/s3ich4n/cosmicpython-study/tree/main/pt2/ch11\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">코드 링크</a></p>\n<h1 id=\"11장-이벤트-기반-아키텍처-이벤트를-사용한-마이크로서비스-통합\" style=\"position:relative;\"><a href=\"#11%EC%9E%A5-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EA%B8%B0%EB%B0%98-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98-%EC%9D%B4%EB%B2%A4%ED%8A%B8%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C-%EB%A7%88%EC%9D%B4%ED%81%AC%EB%A1%9C%EC%84%9C%EB%B9%84%EC%8A%A4-%ED%86%B5%ED%95%A9\" aria-label=\"11장 이벤트 기반 아키텍처 이벤트를 사용한 마이크로서비스 통합 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>11장 이벤트 기반 아키텍처: 이벤트를 사용한 마이크로서비스 통합</h1>\n<p>제목 길다ㅋㅋ</p>\n<p>이전 장에서는 실제로 ‘배치 수량이 변경됨’ 이라는 이벤트를 어떻게 받을 수 있는지, 재할당에 대해 외부 세계에 어떻게 통지할 수 있는지에 대해서는 논하지 않았다.</p>\n<p>현재까지 만든건 웹 API가 있는 마이크로서비스 한 개다. 다른 시스템과 이야기하는 다른 방법을 생각해보자. 선적이 지연되거나, 수량이 변경되거나 하는건 시스템이 어떻게 알 수 있을까? 시스템이 창고 시스템에게 주문이 할당되었고 다른 고객에게 운송되어야 한다고 어떻게 이야기할 수 있을까?</p>\n<p>이번 장에서는 이벤트 비유를 확장하여 시스템으로 들어오거나 시스템에서 나가는 메시지까지 포용하는 방안을 살펴본다. 여지껏 애플리케이션의 핵심은 메시지 처리기가 되도록 바꾸었다. 이제는 외부로도 이를 처리할 수 있도록 작업해보자.</p>\n<p>외부 이벤트가 들어오는 것은 외부 메시지 버스(이 책에서는 Redis의 pub/sub 대기열을 예제로 사용한다)를 통해 subscribe 하고, 출력은 이벤트 형태로 외부 메시지 버스에 publish 한다.</p>\n<p><img src=\"https://www.cosmicpython.com/book/images/apwp_1101.png\" alt=\"이제 애플리케이션은 메시지 처리기가 되었다\"></p>\n<h1 id=\"111-분산된-진흙-공-명사로-생각하기\" style=\"position:relative;\"><a href=\"#111-%EB%B6%84%EC%82%B0%EB%90%9C-%EC%A7%84%ED%9D%99-%EA%B3%B5-%EB%AA%85%EC%82%AC%EB%A1%9C-%EC%83%9D%EA%B0%81%ED%95%98%EA%B8%B0\" aria-label=\"111 분산된 진흙 공 명사로 생각하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>11.1 분산된 진흙 공, 명사로 생각하기</h1>\n<p>책의 저자는 마이크로서비스 아키텍처(이하 MSA)를 구축하는 사람과 자주 이야기하며 기존 앱을 마이그레이션하는 논의를 자주 한다고 한다. 이 때 본능적으로 하는 일은 시스템을 명사화 하는 것이다.</p>\n<p>현재까지의 시스템에 도입된 명사들을 생각해보자. 재고 배치, 주문, 상품, 고객 등이 있다. 이를 그림과 같이 나누었다. (참고: ‘할당’이라는 동작 대신, ‘배치’라는 명사를 기준으로 이름이 붙어졌음)</p>\n<p><img src=\"https://www.cosmicpython.com/book/images/apwp_1102.png\" alt=\"명사 기반 서비스의 컨텍스트 다이어그램\"></p>\n<p>이 시스템의 ‘물건’ 마다 연관된 서비스가 있고, 그 서비스는 HTTP API를 노출한다.</p>\n<p>아래 command flow 1을 통해 정상경로(<em>happy path</em>) 를 진행해보자.</p>\n<ol>\n<li>사용자가 웹 사이트에 방문하여 재고가 있는 상품을 선택한다</li>\n<li>상품을 장바구니에 담고 재고를 예약한다</li>\n<li>주문이 완료되면 예약을 확정하고 창고에 출고를 지시한다</li>\n<li><code class=\"language-text\">3</code>번째 주문일 경우 고객 레코드를 변경하여 일반 고객을 VIP로 승격시킨다</li>\n</ol>\n<p><img src=\"https://www.cosmicpython.com/book/images/apwp_1103.png\" alt=\"커맨드 플로우 1\"></p>\n<p>각 단계를 이런 커맨드로 생각해볼 수 있겠다:</p>\n<ol>\n<li><code class=\"language-text\">ReserveStock</code></li>\n<li><code class=\"language-text\">ConfirmReservation</code></li>\n<li><code class=\"language-text\">DispatchGoods</code></li>\n<li><code class=\"language-text\">MakeCustomerVIP</code></li>\n</ol>\n<p>이런 스타일의 아키텍처에서는 DB 테이블 단위로 마이크로서비스를 만들고, HTTP API를 빈약한(비즈니스 로직이 없는) 모델에 대한 CRUD 인터페이스로 취급하며, 서비스 중심의 설계를 처음 하는 사람들이 취하는 방식이다.</p>\n<p>간단하면 잘 돌겠지만, 금방 복잡해진다(!!!). 왜냐면 실패 케이스에 대한 고려가 없기 때문이다. 이런 케이스에 대해 살펴보자:</p>\n<ol>\n<li>재고가 도착했는데 배송 중 물에의해 손상된 경우가 있다. 이걸 팔 수는 없으니 폐기하고 다시 재고요청을 해야한다</li>\n<li>이 경우에는 재고 모델을 업데이트 해야할 수도 있고, 그로인해 고객의 주문을 재할당 해야할 수도 있다</li>\n</ol>\n<p>이런 기능들을 어디에 넣어야할까? 대충 봤을 땐(!) 창고 시스템이 하면 될 것 같다. 아래와 같은 command flow 2가 나올 것이다.</p>\n<p><img src=\"https://www.cosmicpython.com/book/images/apwp_1104.png\" alt=\"커맨드 플로우 2: 창고 시스템이 이런 처리를 담당하는 경우\"></p>\n<p>잘 돌아간다. 그렇지만 의존성 그래프가 지저분해진다. 왜인지 보자:</p>\n<ol>\n<li>재고를 할당하려면 ‘주문 서비스’가 ‘배치 시스템’을 제어해야 한다</li>\n<li>‘배치 시스템’은 다시 ‘창고 시스템’을 제어한다</li>\n<li>창고에 생긴 문제를 해결하려면 ‘창고 시스템’은 ‘배치 시스템’을 제어하고, ‘배치 시스템’은 주문을 제어한다</li>\n</ol>\n<p>이 경우 시스템이 제공해야 하는 다른 워크플로우의 숫자만큼 곱한다. 이래선 빠르게 결과를 만들어내는 것만 못한 시스템이 나온다..!</p>\n<h1 id=\"112-분산-시스템에서-오류-처리하기\" style=\"position:relative;\"><a href=\"#112-%EB%B6%84%EC%82%B0-%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%97%90%EC%84%9C-%EC%98%A4%EB%A5%98-%EC%B2%98%EB%A6%AC%ED%95%98%EA%B8%B0\" aria-label=\"112 분산 시스템에서 오류 처리하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>11.2 분산 시스템에서 오류 처리하기</h1>\n<p>‘모든 것은 망가진다(<em>Things break</em>)‘는 소프트웨어 엔지니어링에서 일반적인 규칙이다. 어떤 요청이 실패하면 시스템에 어떤 일이 발생하는지 살펴보자.</p>\n<p>예를 들어, 사용자가 <code class=\"language-text\">MISBEGOTTEN-RUG</code> 에 대해 3개를 주문받고 네트워크 오류가 발생했다 가정하자:</p>\n<p><img src=\"https://www.cosmicpython.com/book/images/apwp_1105.png\" alt=\"오류가 발생한 명령 흐름\"></p>\n<p>이에 대한 두 가지 처리방법이 있다.</p>\n<ol>\n<li>주문은 넣지만 할당을 하지 않거나 할당을 보장할 수 없으므로, 최종적으로 주문을 거부한다. 이 실패를 위로 전달한다 → 주문 서비스의 신뢰성에 영향을 끼칠것이다!\n<ul>\n<li>두 가지를 함께 바꿔야 하는 경우를 결합되었다(<em>coupled</em>) 라고 한다</li>\n<li>이런 식의 연쇄적 실패는 시간적 결합(<em>temporal coupling</em>) 이라고 부른다</li>\n<li>시스템의 모든 부분이 동시에 제대로 작동할 때만 정상적으로 작동하는 경우를 시간적 결합이라고 한다</li>\n<li>시스템이 커지면 시스템 부품 중 일부의 성능이 나빠질 확률이 기하급수적으로 높아진다(<em>exponentially incresing probability</em>)</li>\n<li>아래 동시생산 절을 살펴보자</li>\n</ul>\n</li>\n<li>11.3절에서 이에 대한 대안을 작성할 것이다</li>\n</ol>\n<h2 id=\"1121-동시생산connascence\" style=\"position:relative;\"><a href=\"#1121-%EB%8F%99%EC%8B%9C%EC%83%9D%EC%82%B0connascence\" aria-label=\"1121 동시생산connascence permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>11.2.1 동시생산(<em>Connascence</em>)?</h2>\n<p>본 책에서는 결합(<em>coupling</em>) 이란 말을 사용하나, 시스템 상 현재 예제와 같은 관계를 동시생산(<em>connascence</em>)<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup> 라고도 일컫는다. 이는 다른 유형의 결합을 묘사할 때 사용하는 용어다.</p>\n<p>동시생산은 나쁘지 않다. 그렇지만 어떤 동시생산 케이스는 다른 케이스보다 더 강하다. 보통은 두 클래스가 밀접하게 연관되어(<em>closely related</em>)있으면 강한 동시생산을 지역적으로만 한정시키고 그렇지 않으면 약한 생산으로 떼어놓고자 한다.</p>\n<p>위에서 살펴본 커맨드 플로우 2 예시에서는 <a href=\"https://connascence.io/execution.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">실행의 동시생산</a>(<em>connascence of execution</em>)을 살펴볼 수 있다. 연산이 성공하려면 여러 구성요소의 <strong>정확한</strong> 작업 순서를 알고 있어야 한다.</p>\n<p>여기서는 오류가 발생하는 경우에서는 <a href=\"https://connascence.io/timing.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">타이밍의 동시생산</a>(<em>connascence of timing</em>)을 살펴볼 수 있다. 한 가지 일이 <strong>일어난 직후 바로 다음</strong> 일이 일어나야 한다.</p>\n<p><del>RPC 이야기는 이해못해서 기재하지 않음</del> 이름의 동시생산(<em>connascence of name</em>)에 대해 언급한다.</p>\n<p>소프트웨어가 다른 소프트웨어와 통신하지 않는 경우를 제외하고는 <strong>결합을 완전히 피할 수 없다. 다만 부적절한 결합만큼은 피해야 한다.</strong> 동시생산은 서로 다른 아키텍처 스타일에 내재된 결합의 강도와 유형을 이해하기 위한 멘탈 모델(<em>mental model</em>)을 제공한다.</p>\n<h1 id=\"113-대안-비동기-메시징을-사용한-시간적-결합\" style=\"position:relative;\"><a href=\"#113-%EB%8C%80%EC%95%88-%EB%B9%84%EB%8F%99%EA%B8%B0-%EB%A9%94%EC%8B%9C%EC%A7%95%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%9C-%EC%8B%9C%EA%B0%84%EC%A0%81-%EA%B2%B0%ED%95%A9\" aria-label=\"113 대안 비동기 메시징을 사용한 시간적 결합 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>11.3 대안: 비동기 메시징을 사용한 시간적 결합</h1>\n<p>적절한 결합을 얻기 위해선 명사가 아니라 동사로 생각해야 한다는 점을 살펴봤다. 도메인 모델은 비즈니스 프로세스를 모델링하기 위함이다. 도메인 모델은 어떤 물건에 대한 정적인 데이터 모델이 아닌 동사에 관한 모델이다.</p>\n<p>따라서 주문에 대한 시스템과 배치에 대한 시스템을 생각하는 것이 아니라, 주문 행위(<em>ordering</em>) 에 대한 시스템과 할당행위(<em>allocating</em>)에 대한 시스템을 생각한다.</p>\n<p>이런 식으로 사물을 구별하면 어떤 시스템이 어떤 일을 하는지에 대해 생각하기 쉽다. 주문 행위에 대해 생각해보면, <strong>주문을 넣었을 때 주문이 들어간다는 무조건 되어야 한다</strong>. 다른 모든 일은 언젠가 발생한다는 것만 보장할 수 있다면 <strong>나중에</strong> 발생할 수 있다.</p>\n<blockquote>\n<p>📒 <strong>NOTE</strong> 📒</p>\n</blockquote>\n<p>애그리게이트와 커맨드 설계 시 수행했던 책임 분리가 바로 이것이다.</p>\n<blockquote>\n</blockquote>\n<p>마이크로서비스 또한 <strong>일관성 경계</strong>(<em>consistency boundaries</em>)여야 한다. 두 서비스에는 최종 일관성을 받아들일 수 있고, 이는 동기화된 호출에 의존하지 않아도 된다는 뜻이다. 각 서비스는 외부 세게에서 커맨드를 받고 결과를 저장하기 위해 이벤트를 발생시킨다. 이런 이벤트를 수신하는 다른 서비스는 워크플로우의 다음 단계를 트리거링한다.</p>\n<p>이런 식으로 <em>쉽게 복잡해지기 쉬운 구조</em><sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup>를 방지하기 위해 시간적으로 결합된(<em>temporally coupled</em>) 메시지가 업스트림 시스템으로부터 외부 메시지로 도착하길 바란다. 시스템은 이벤트를 리슨하는 다운스트림 시스템을 위해 <code class=\"language-text\">Allocated</code> 이벤트를 publish한다.</p>\n<p>왜 이런 구조가 더 나은지에 대한 근거는 아래와 같다:</p>\n<ol>\n<li>각 부분이 서로 독립적으로 실패할 수 있다. 잘못된 동작이 발생했을 때 처리하기 더 쉽다. 어떤 시스템이 안되더라도 여전히 처리할 수 있기는 하다</li>\n<li>시스템 사이의 결합 강도를 감소시킬 수 있다. 처리 연산순서를 바꾸거나 새 단계를 추가하더라도 이를 지역적으로 처리할 수 있다</li>\n</ol>\n<h1 id=\"114-redis의-pubsub-channel을-통합에-사용하기\" style=\"position:relative;\"><a href=\"#114-redis%EC%9D%98-pubsub-channel%EC%9D%84-%ED%86%B5%ED%95%A9%EC%97%90-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"114 redis의 pubsub channel을 통합에 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>11.4 Redis의 Pub/Sub Channel을 통합에 사용하기</h1>\n<p>그렇다면 이를 할 수 있는 메시지 버스가 필요하다. 이는 이벤트를 안팎으로 처리할 수 있는 인프라를 의미한다. 흔히들 <strong>메시지 브로커</strong>(<em>message broker</em>) 라고 부른다. 메시지 브로커의 역할은 publisher로부터 메시지를 받아서 subscriber에게 전달<sup id=\"fnref-3\"><a href=\"#fn-3\" class=\"footnote-ref\">3</a></sup>(<em>deliver</em>)하는 것이다.</p>\n<p>made.com(진짜 영국의 가구서비스임)에서는 <a href=\"https://www.eventstore.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Event Store</a> 라는 서비스를 쓴다. <a href=\"https://kafka.apache.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Kafka</a>나 <a href=\"https://www.rabbitmq.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">RabbitMQ</a>도 좋은 대안이다. 책에서는 <a href=\"https://redis.io/docs/manual/pubsub/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Redis pub/sub channel</a>를 사용할 것이다.</p>\n<blockquote>\n<p>📒 <strong>NOTE</strong> 📒</p>\n</blockquote>\n<p>메시징 플랫폼을 선택하는 주요 방안으로는 주로 메시지 순서, 실패 처리, 멱등성(<em>idempotency</em>) 등이 있다. 이는 14.8절에서 다시 살펴보자!</p>\n<blockquote>\n</blockquote>\n<p>그렇다면 새로운 흐름에 대한 시퀀스 다이어그램을 살펴보자. Redis는 전체 프로세스를 시작하는 <code class=\"language-text\">BatchQuantityChanged</code> 를 제공하고, 마지막에는 <code class=\"language-text\">Allocated</code> 이벤트를 Redis에 publish 한다.</p>\n<p><img src=\"https://www.cosmicpython.com/book/images/apwp_1106.png\" alt=\"재할당 흐름의 시퀀스 다이어그램\"></p>\n<h1 id=\"115-엔드투엔드-테스트를-사용하여-모든-기능-시범운영하기\" style=\"position:relative;\"><a href=\"#115-%EC%97%94%EB%93%9C%ED%88%AC%EC%97%94%EB%93%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%EB%AA%A8%EB%93%A0-%EA%B8%B0%EB%8A%A5-%EC%8B%9C%EB%B2%94%EC%9A%B4%EC%98%81%ED%95%98%EA%B8%B0\" aria-label=\"115 엔드투엔드 테스트를 사용하여 모든 기능 시범운영하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>11.5 엔드투엔드 테스트를 사용하여 모든 기능 시범운영하기</h1>\n<p>어떤 식으로 수행하는지 살펴보자. API를 사용하여 배치를 만들고, 인바운드-아웃바운드 메시지를 테스트할 것이다</p>\n<blockquote>\n<p>여기서 잠깐!</p>\n</blockquote>\n<p>나는 현재 DB 커넥션도 Dependency Injector를 통해 구현했는데, Redis도 마찬가지일 것이다. <a href=\"https://python-dependency-injector.ets-labs.org/examples/fastapi-redis.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">이런 예시</a>를 프로젝트에 맞게 구현할 것이다. 아래 방안을 작성하고자 한다:</p>\n<ol>\n<li>Redis 커넥션에 대해 깔끔하게 처리하는 방안 모색</li>\n<li>그렇게 처리하면서 동시에 pub/sub을 쓸 수 있는지도 모색</li>\n</ol>\n<blockquote>\n</blockquote>\n<p>이 로직을 테스트하기 위해선 아래 테스트코드가 필요하다:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@pytest<span class=\"token punctuation\">.</span>mark<span class=\"token punctuation\">.</span>asyncio</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">test_change_batch_quantity_leading_to_reallocation</span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 두 배치와 할당을 수행하여 한 쪽에 할당하는 주문으로 시작한다.</span>\n    orderid<span class=\"token punctuation\">,</span> sku <span class=\"token operator\">=</span> random_orderid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> random_sku<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    earlier_batch<span class=\"token punctuation\">,</span> later_batch <span class=\"token operator\">=</span> random_batchref<span class=\"token punctuation\">(</span><span class=\"token string\">\"old\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> random_batchref<span class=\"token punctuation\">(</span><span class=\"token string\">\"newer\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">await</span> post_to_add_batch<span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">,</span> earlier_batch<span class=\"token punctuation\">,</span> sku<span class=\"token punctuation\">,</span> qty<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> eta<span class=\"token operator\">=</span><span class=\"token string\">\"2023-01-01\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">await</span> post_to_add_batch<span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">,</span> later_batch<span class=\"token punctuation\">,</span> sku<span class=\"token punctuation\">,</span> qty<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> eta<span class=\"token operator\">=</span><span class=\"token string\">\"2023-01-02\"</span><span class=\"token punctuation\">)</span>\n    response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> post_to_allocate<span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">,</span> orderid<span class=\"token punctuation\">,</span> sku<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">assert</span> response<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"batchref\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> earlier_batch\n\n    subscription <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> redis_client<span class=\"token punctuation\">.</span>subscribe_to<span class=\"token punctuation\">(</span><span class=\"token string\">\"line_allocated\"</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 1)</span>\n\n    <span class=\"token keyword\">await</span> redis_client<span class=\"token punctuation\">.</span>publish_message<span class=\"token punctuation\">(</span>                                <span class=\"token comment\"># 2)</span>\n        <span class=\"token string\">\"change_batch_quantity\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span><span class=\"token string\">\"batchref\"</span><span class=\"token punctuation\">:</span> earlier_batch<span class=\"token punctuation\">,</span> <span class=\"token string\">\"qty\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n\n    messages <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">async</span> <span class=\"token keyword\">with</span> async_timeout<span class=\"token punctuation\">.</span>timeout<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>                               <span class=\"token comment\"># 3)</span>\n        message <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> subscription<span class=\"token punctuation\">.</span>get_message<span class=\"token punctuation\">(</span>timeout<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> message<span class=\"token punctuation\">:</span>\n            messages<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>messages<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">assert</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>messages<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span>\n    data <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>messages<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">assert</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">'order_id'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> orderid\n    <span class=\"token keyword\">assert</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">\"batchref\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> later_batch</code></pre></div>\n<ol>\n<li><code class=\"language-text\">line_allocated</code> 라는 채널을 listen 한다.</li>\n<li>외부 서비스가 <code class=\"language-text\">change_batch_quantity</code> 라는 채널에 아래 dict 값을 가진 이벤트를 전송함을 의미한다.</li>\n<li>책에서는 <code class=\"language-text\">tenacity</code> 를 사용해서 3번 정도를 더 수신하도록 기다린다</li>\n</ol>\n<h2 id=\"1151-redis는-메시지-버스를-감싸는-다른-얇은-어댑터\" style=\"position:relative;\"><a href=\"#1151-redis%EB%8A%94-%EB%A9%94%EC%8B%9C%EC%A7%80-%EB%B2%84%EC%8A%A4%EB%A5%BC-%EA%B0%90%EC%8B%B8%EB%8A%94-%EB%8B%A4%EB%A5%B8-%EC%96%87%EC%9D%80-%EC%96%B4%EB%8C%91%ED%84%B0\" aria-label=\"1151 redis는 메시지 버스를 감싸는 다른 얇은 어댑터 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>11.5.1 Redis는 메시지 버스를 감싸는 다른 얇은 어댑터</h2>\n<p>Redis pub/sub 리스너, 혹은 이벤트 소비자(<em>event consumer</em>)는 외부 서비스로부터 메시지를 받고 변환하여 이를 이벤트로 만든다.</p>\n<p>아래는 Redis메시지 리스너의 간단한 버전이다:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    orm<span class=\"token punctuation\">.</span>start_mappers<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    pubsub <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span>pubsub<span class=\"token punctuation\">(</span>ignore_subscribe_messages<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">await</span> pubsub<span class=\"token punctuation\">.</span>subscribe<span class=\"token punctuation\">(</span><span class=\"token string\">\"change_batch_quantity\"</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 1)</span>\n\n    <span class=\"token keyword\">async</span> <span class=\"token keyword\">for</span> m <span class=\"token keyword\">in</span> pubsub<span class=\"token punctuation\">.</span>listen<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">await</span> handle_change_batch_quantity<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">handle_change_batch_quantity</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    logging<span class=\"token punctuation\">.</span>debug<span class=\"token punctuation\">(</span><span class=\"token string\">\"handling %s\"</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span>\n    data <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">[</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>                      <span class=\"token comment\"># 2)</span>\n    cmd <span class=\"token operator\">=</span> commands<span class=\"token punctuation\">.</span>ChangeBatchQuantity<span class=\"token punctuation\">(</span>ref<span class=\"token operator\">=</span>data<span class=\"token punctuation\">[</span><span class=\"token string\">\"batchref\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> qty<span class=\"token operator\">=</span>data<span class=\"token punctuation\">[</span><span class=\"token string\">\"qty\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">await</span> messagebus<span class=\"token punctuation\">.</span>handle<span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">,</span> uow<span class=\"token operator\">=</span>unit_of_work<span class=\"token punctuation\">.</span>SqlAlchemyUnitOfWork<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    asyncio<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ol>\n<li>이 어댑터를 구동하며 <code class=\"language-text\">change_batch_quantity</code> 채널을 subscribe 한다</li>\n<li>엔트리포인트에서는 JSON 역직렬화 후 커맨드로 변환하여 서비스 계층으로 메시지를 전달한다. API가 하는일과 동일하다!</li>\n</ol>\n<p>그렇다면 Redis 이미지 publisher 또한 살펴보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">publish</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">:</span> events<span class=\"token punctuation\">.</span>Event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>       <span class=\"token comment\"># 1)</span>\n    logging<span class=\"token punctuation\">.</span>debug<span class=\"token punctuation\">(</span><span class=\"token string\">\"publishing: channel=%s, event=%s\"</span><span class=\"token punctuation\">,</span> channel<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">await</span> r<span class=\"token punctuation\">.</span>publish<span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">,</span> json<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span>asdict<span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ol>\n<li>여기선 하드코딩한 채널을 사용한다. 이벤트 클래스/이름과 적절한 채널을 매핑하는 정보를 저장할 수도 있다. 이러면 메시지 유형 중 일부에 대해 다른 채널을 사용할 수도 있다</li>\n</ol>\n<h2 id=\"1152-외부로-나가는-새-이벤트\" style=\"position:relative;\"><a href=\"#1152-%EC%99%B8%EB%B6%80%EB%A1%9C-%EB%82%98%EA%B0%80%EB%8A%94-%EC%83%88-%EC%9D%B4%EB%B2%A4%ED%8A%B8\" aria-label=\"1152 외부로 나가는 새 이벤트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>11.5.2 외부로 나가는 새 이벤트</h2>\n<p><code class=\"language-text\">Allocated</code> 라는 이벤트를 살펴보자</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@dataclass</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Allocated</span><span class=\"token punctuation\">(</span>Event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    orderid<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span>\n    sku<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span>\n    qty<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span>\n    batchref<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span></code></pre></div>\n<p>이 이벤트로는 주문 라인 상세정보, 어떤 배치에 주문라인이 할당되었는지 등 할당에 대해 알아야 할 필요가 있는 모든 내용을 저장한다.</p>\n<p>이를 모델의 <code class=\"language-text\">allocate()</code> 메소드에 추가한다. 이를 위한 테스트를 함께 추가하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">test_product_allocate_should_emit_an_event</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    batch <span class=\"token operator\">=</span> Batch<span class=\"token punctuation\">(</span><span class=\"token string\">'batch1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'SMALL-FORK'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> eta<span class=\"token operator\">=</span>today<span class=\"token punctuation\">)</span>\n    product <span class=\"token operator\">=</span> Product<span class=\"token punctuation\">(</span>sku<span class=\"token operator\">=</span><span class=\"token string\">'SMALL-FORK'</span><span class=\"token punctuation\">,</span> batches<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>batch<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    allocation <span class=\"token operator\">=</span> product<span class=\"token punctuation\">.</span>allocate<span class=\"token punctuation\">(</span>OrderLine<span class=\"token punctuation\">(</span><span class=\"token string\">'order1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'SMALL-FORK'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    expected_event <span class=\"token operator\">=</span> events<span class=\"token punctuation\">.</span>Allocated<span class=\"token punctuation\">(</span>\n        orderid<span class=\"token operator\">=</span><span class=\"token string\">\"order1\"</span><span class=\"token punctuation\">,</span>\n        sku<span class=\"token operator\">=</span><span class=\"token string\">\"SMALL-FORK\"</span><span class=\"token punctuation\">,</span>\n        qty<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        batchref<span class=\"token operator\">=</span>batch<span class=\"token punctuation\">.</span>reference<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">assert</span> product<span class=\"token punctuation\">.</span>messages<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> expected_event\n    <span class=\"token keyword\">assert</span> allocation <span class=\"token keyword\">is</span> <span class=\"token string\">\"batch1\"</span></code></pre></div>\n<p>이런 류의 테스트가 있어야겠고, <code class=\"language-text\">Product</code> 애그리게이트에는 이벤트 emit하는 로직이 있어야 할 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Product</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>\n            self<span class=\"token punctuation\">,</span>\n            sku<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span>\n            batches<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>Batch<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            version_number<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span>\n            self<span class=\"token punctuation\">,</span>\n            line<span class=\"token punctuation\">:</span> OrderLine<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n            self<span class=\"token punctuation\">.</span>version_number <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            self<span class=\"token punctuation\">.</span>messages<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>              <span class=\"token comment\"># 1)</span>\n                events<span class=\"token punctuation\">.</span>Allocated<span class=\"token punctuation\">(</span>\n                    orderid<span class=\"token operator\">=</span>line<span class=\"token punctuation\">.</span>orderid<span class=\"token punctuation\">,</span>\n                    sku<span class=\"token operator\">=</span>line<span class=\"token punctuation\">.</span>sku<span class=\"token punctuation\">,</span>\n                    qty<span class=\"token operator\">=</span>line<span class=\"token punctuation\">.</span>qty<span class=\"token punctuation\">,</span>\n                    batchref<span class=\"token operator\">=</span>batch<span class=\"token punctuation\">.</span>reference<span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> batch<span class=\"token punctuation\">.</span>reference\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<ol>\n<li>이런 식으로 <code class=\"language-text\">Allocated</code> 이벤트를 담아야한다.</li>\n</ol>\n<p>그 후에는 메시지 버스에도 관련 핸들러를 추가해주고, 이벤트 발행할 때는 레디스 wrapper가 제공하는 헬퍼함수를 쓰자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MessageBus</span><span class=\"token punctuation\">:</span>\n    EVENT_HANDLERS <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        events<span class=\"token punctuation\">.</span>Allocated<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>handlers<span class=\"token punctuation\">.</span>publish_allocate_event<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\"># 1)</span>\n        events<span class=\"token punctuation\">.</span>OutOfStock<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>handlers<span class=\"token punctuation\">.</span>send_out_of_stock_notification<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> \n    <span class=\"token punctuation\">}</span>   <span class=\"token comment\"># type: Dict[Type[events.Event], List[Callable]]</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">publish_allocate_event</span><span class=\"token punctuation\">(</span>\n        event<span class=\"token punctuation\">:</span> events<span class=\"token punctuation\">.</span>Allocated<span class=\"token punctuation\">,</span>\n        uow<span class=\"token punctuation\">:</span> unit_of_work<span class=\"token punctuation\">.</span>AbstractUnitOfWork<span class=\"token punctuation\">,</span>\n        channel<span class=\"token punctuation\">:</span> redis<span class=\"token punctuation\">.</span>AsyncRedis<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">await</span> channel<span class=\"token punctuation\">.</span>publish<span class=\"token punctuation\">(</span><span class=\"token string\">\"line_allocated\"</span><span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span>              <span class=\"token comment\"># 2)</span></code></pre></div>\n<ol>\n<li>이런 식으로 핸들러를 추가하고</li>\n<li>wrapper함수는 이렇게 감싸준다</li>\n</ol>\n<p>레디스 커넥션 처리는 Dependency Injector로 이렇게 했다</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Container</span><span class=\"token punctuation\">(</span>containers<span class=\"token punctuation\">.</span>DeclarativeContainer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    __self__ <span class=\"token operator\">=</span> providers<span class=\"token punctuation\">.</span>Self<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    config <span class=\"token operator\">=</span> providers<span class=\"token punctuation\">.</span>Configuration<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    config<span class=\"token punctuation\">.</span>from_pydantic<span class=\"token punctuation\">(</span>Settings<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    wiring_config <span class=\"token operator\">=</span> containers<span class=\"token punctuation\">.</span>WiringConfiguration<span class=\"token punctuation\">(</span>    <span class=\"token comment\"># 1)</span>\n        packages<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>\n            <span class=\"token string\">\"pt2.ch11.src.allocation.entrypoints\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">)</span>\n\n    redis_pool <span class=\"token operator\">=</span> providers<span class=\"token punctuation\">.</span>Resource<span class=\"token punctuation\">(</span>                   <span class=\"token comment\"># 2)</span>\n        redis<span class=\"token punctuation\">.</span>init_redis_pool<span class=\"token punctuation\">,</span>\n        redis_uri<span class=\"token operator\">=</span>config<span class=\"token punctuation\">.</span>broker<span class=\"token punctuation\">.</span>REDIS_URI<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n\n    redis <span class=\"token operator\">=</span> providers<span class=\"token punctuation\">.</span>Factory<span class=\"token punctuation\">(</span>                         <span class=\"token comment\"># 3)</span>\n        redis<span class=\"token punctuation\">.</span>AsyncRedis<span class=\"token punctuation\">,</span>\n        session<span class=\"token operator\">=</span>redis_pool<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n</code></pre></div>\n<ol>\n<li>하기 팩토리를 사용할 Wiring 대상인 “패키지”의 경로를 기재했다. 아래 소스를 함께 살펴본다</li>\n<li>리소스를 이렇게 만들어줄 수 있다. 이 리소스는 하기 팩토리에 사용된다</li>\n<li>팩토리를 통해 <code class=\"language-text\">AsyncRedis</code> 라는 클래스의 의존성을 주입한다</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">AsyncRedis</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>\n            self<span class=\"token punctuation\">,</span>\n            session<span class=\"token punctuation\">:</span> redis<span class=\"token punctuation\">.</span>Redis<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>_session <span class=\"token operator\">=</span> session         <span class=\"token comment\"># 1)</span>\n\n    <span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">publish</span><span class=\"token punctuation\">(</span>                  <span class=\"token comment\"># 2)</span>\n            self<span class=\"token punctuation\">,</span>\n            channel<span class=\"token punctuation\">,</span>\n            event<span class=\"token punctuation\">:</span> events<span class=\"token punctuation\">.</span>Event<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">await</span> self<span class=\"token punctuation\">.</span>_session<span class=\"token punctuation\">.</span>publish<span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">,</span> json<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span>asdict<span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">from</span> fastapi <span class=\"token keyword\">import</span> Depends                                             <span class=\"token comment\"># 3)</span>\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>post</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"/allocate\"</span><span class=\"token punctuation\">,</span>\n    status_code<span class=\"token operator\">=</span>status<span class=\"token punctuation\">.</span>HTTP_201_CREATED<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@inject</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">allocate_endpoint</span><span class=\"token punctuation\">(</span>\n        order_line<span class=\"token punctuation\">:</span> OrderLineRequest<span class=\"token punctuation\">,</span>\n        channel<span class=\"token punctuation\">:</span> redis<span class=\"token punctuation\">.</span>AsyncRedis <span class=\"token operator\">=</span> Depends<span class=\"token punctuation\">(</span>Provide<span class=\"token punctuation\">[</span>Container<span class=\"token punctuation\">.</span>redis<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 3)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n        batchref <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> messagebus<span class=\"token punctuation\">.</span>handle<span class=\"token punctuation\">(</span>\n            <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n            channel<span class=\"token operator\">=</span>channel<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span>\n\n<span class=\"token decorator annotation punctuation\">@inject</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">signup_user</span><span class=\"token punctuation\">(</span>\n        channel<span class=\"token punctuation\">:</span> redis<span class=\"token punctuation\">.</span>AsyncRedis <span class=\"token operator\">=</span> Provide<span class=\"token punctuation\">[</span>Container<span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>           <span class=\"token comment\"># 4)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> jsonify<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"status\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">await</span> cache<span class=\"token punctuation\">.</span>ping<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ol>\n<li>상기 세션값은 이런식으로 넣는다</li>\n<li>Wiring을 수행한 측에서는 <code class=\"language-text\">redis.publish(channel, event)</code> 형식으로 사용하면 된다. 이 때 Wiring을 위해 아래 3, 4와 같은 구문을 사용한다</li>\n<li>FastAPI에서는 <code class=\"language-text\">from fastapi import Depends</code> 를 해주고 의존성 주입을 한다</li>\n<li>Flask라면 이런 식으로 의존성 주입을 한다</li>\n</ol>\n<h2 id=\"116-내부-이벤트와-외부-이벤트-비교\" style=\"position:relative;\"><a href=\"#116-%EB%82%B4%EB%B6%80-%EC%9D%B4%EB%B2%A4%ED%8A%B8%EC%99%80-%EC%99%B8%EB%B6%80-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EB%B9%84%EA%B5%90\" aria-label=\"116 내부 이벤트와 외부 이벤트 비교 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>11.6 내부 이벤트와 외부 이벤트 비교</h2>\n<p>내부 외부 이벤트의 구분이 명확할 필요가 있다. 일부 이벤트는 밖에서 들어오지만, 일부 이벤트는 승격되며 외부에 이벤트를 publish 할 수도 있다. 하지만 모든 이벤트가 외부에 이벤트를 emit하지는 않는다. <a href=\"https://io.made.com/blog/2018-04-28-eventsourcing-101.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">이벤트 소싱</a>에 대해서는 저자가 작성한 글을 함께 읽어보자.</p>\n<blockquote>\n<p>TIP</p>\n</blockquote>\n<p>외부로 나가는 이벤트는 검증을 적용하는 것이 중요한 부분에 속한다. Appendix E 도 함께 살펴보자.</p>\n<blockquote>\n</blockquote>\n<h2 id=\"117-마치며\" style=\"position:relative;\"><a href=\"#117-%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"117 마치며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>11.7 마치며</h2>\n<p>이벤트는 외부에서 들어올 수도, 외부로 emit할 수도 있다. <code class=\"language-text\">publish</code> 핸들러는 이벤트를 Redis 메시지 채널의 메시지로 변환한다. 이런즉 이벤트를 사용해 외부 세계와 이야기를 나누는 식의 시간적인 결합을 이용하자. 그렇다면 애플리케이션 통합 시 상당한 유연성을 얻을 수 있다. 하지만 흐름이 명시적이지 않고 디버깅이나 변경이 어려워질 수도 있다. 이 말을 누가했냐고? <a href=\"https://martinfowler.com/articles/201701-event-driven.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">마틴 파울러가 했다</a>.</p>\n<p>이벤트 기반 마이크로서비스 통합의 트레이드오프를 살펴보자:</p>\n<table>\n<thead>\n<tr>\n<th>장점</th>\n<th>단점</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>분산된 큰 진흙 공을 피할 수 있다</td>\n<td>전체 정보 흐름을 알아보기 어렵다</td>\n</tr>\n<tr>\n<td>서비스가 서로 결합되지 않는다. 개별 서비스 변경 및 새 서비스 추가가 쉽다</td>\n<td>일관성은 처리할 필요가 있는 새로운 개념이다</td>\n</tr>\n<tr>\n<td>(이걸 해결하기 위해 SAGA 패턴이나 이벤트 소싱, CQRS가 있다고 하는데, 더 공부해보자)</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>메시지 신뢰성과 at-least-once(최소 한 번) versus at-most-once(최대 한 번)을 서로 생각해봐야 한다</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\"><a href=\"https://connascence.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Connascence</a>은 Meilir Page-Jones가 주장한 개념이다.<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a></li>\n<li id=\"fn-2\">원문에선 Distributed Ball of Mud antipattern 이라고 했다. 이런 설계가 안티패턴임을 시사하는 비꼬기 같은데 이걸 어케 번역함ㅋㅋ<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a></li>\n<li id=\"fn-3\">책에선 ‘배달’ 이란 용어를 쓰는데, 난 이게 더 익숙해서 이렇게 풀거다. 아니면 딜리버라고 바로 말하거나, 영단어를 바로 쓰거나…<a href=\"#fnref-3\" class=\"footnote-backref\">↩</a></li>\n</ol>\n</div>","fields":{"slug":"/books/cosmic-python/2023-05-18---pt02-ch11//books/cosmic-python/2023-05-18-pt02-ch10","tagSlugs":["/tag/ddd/","/tag/books/","/tag/backend/","/tag/python/"]},"frontmatter":{"date":"2023-05-18T03:41:09.000Z","description":"파이썬으로 살펴보는 아키텍처 패턴을 읽고 이해한 내용을 작성합니다. 챕터 11, 이벤트 기반 아키텍처: 이벤트를 사용한 마이크로서비스 통합에 대한 내용입니다.","tags":["ddd","books","backend","python"],"title":"파이썬으로 살펴보는 아키텍처 패턴 (11)","socialImage":{"publicURL":{"publicURL":"/static/66b1d3acbf31f0d2ad20eee928a14aaa/universe.jpg"}}}}},"pageContext":{"slug":"/books/cosmic-python/2023-05-18---pt02-ch11//books/cosmic-python/2023-05-18-pt02-ch10"}},"staticQueryHashes":["251939775","357378587","401334301"]}