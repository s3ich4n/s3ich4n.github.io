{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/books/docker/2023-04-13-pt01-ch03","result":{"data":{"markdownRemark":{"id":"da6013ca-9fc7-568e-846a-0bc010bb9eeb","html":"<p>이 내용은 “파이썬으로 살펴보는 아키텍처 패턴” 을 읽고 작성한 내용입니다. 블로그 게시글과, 작성한 코드를 함께 보시면 더욱 좋습니다.</p>\n<p>3장은 해당 코드를 살펴봐주세요. <a href=\"https://github.com/s3ich4n/cosmicpython-study/tree/main/pt1/ch03\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">코드 링크</a></p>\n<h1 id=\"3장-결합과-추상화\" style=\"position:relative;\"><a href=\"#3%EC%9E%A5-%EA%B2%B0%ED%95%A9%EA%B3%BC-%EC%B6%94%EC%83%81%ED%99%94\" aria-label=\"3장 결합과 추상화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3장 결합과 추상화</h1>\n<p>어떤 컴포넌트가 깨지는 것을 두려워해서 다른 컴포넌트롤 못건들이면, 두 컴포넌트가 결합되어 있다고 말한다. 결합은 엮여있음을 의미한다.</p>\n<p>그런데 지역적 결합은 ‘응집’이라고 표현한다.</p>\n<p>전역적 결합은 코드를 ‘진흙 공’ 처럼 서로 뭉치게 만든다. 앱이 커지면 커질 수록 결합을 훨씬 빠르게 하기 때문에 시스템은 사실상 고착화된다.</p>\n<p>따라서 추상화를 통해 세부사항을 감출 필요가 있다.</p>\n<h1 id=\"31-추상적인-상태는-테스트를-더-쉽게-한다\" style=\"position:relative;\"><a href=\"#31-%EC%B6%94%EC%83%81%EC%A0%81%EC%9D%B8-%EC%83%81%ED%83%9C%EB%8A%94-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EB%8D%94-%EC%89%BD%EA%B2%8C-%ED%95%9C%EB%8B%A4\" aria-label=\"31 추상적인 상태는 테스트를 더 쉽게 한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.1 추상적인 상태는 테스트를 더 쉽게 한다</h1>\n<p>따라가보자…</p>\n<h2 id=\"요구사항\" style=\"position:relative;\"><a href=\"#%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD\" aria-label=\"요구사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>요구사항</h2>\n<p>두 파일 디렉토리를 동기화하는 코드를 작성하고자 한다. 각 디렉토리를 <strong>원본</strong>, <strong>사본</strong>이라고 하자.</p>\n<h2 id=\"해야할일\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EC%95%BC%ED%95%A0%EC%9D%BC\" aria-label=\"해야할일 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해야할일</h2>\n<ol>\n<li>원본에 파일이 있지만 사본에 없으면 파일위치를 원본 → 사본 으로 옮긴다</li>\n<li>원본에 파일이 있지만 사본에 있는(내용이 같은)파일과 이름이 다르면 사본의 파일 이름을 원본 파일이름과 같게 변경한다</li>\n<li>사본에 파일이 있지만 원본에 없다면 사본의 파일을 삭제한다</li>\n</ol>\n<h2 id=\"파일-해시코드-핵심로직\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EC%9D%BC-%ED%95%B4%EC%8B%9C%EC%BD%94%EB%93%9C-%ED%95%B5%EC%8B%AC%EB%A1%9C%EC%A7%81\" aria-label=\"파일 해시코드 핵심로직 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파일 해시코드 (핵심로직)</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> hashlib\n\nBLOCK_SIZE <span class=\"token operator\">=</span> <span class=\"token number\">65_536</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">hash_file</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    hasher <span class=\"token operator\">=</span> hashlib<span class=\"token punctuation\">.</span>sha1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">with</span> path<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"rb\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">:</span>\n        buf <span class=\"token operator\">=</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span>BLOCK_SIZE<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">with</span> buf<span class=\"token punctuation\">:</span>\n            hasher<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span>\n            buf <span class=\"token operator\">=</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span>BLOCK_SIZE<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> hasher<span class=\"token punctuation\">.</span>hexdigest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"311-1차-코드작성안\" style=\"position:relative;\"><a href=\"#311-1%EC%B0%A8-%EC%BD%94%EB%93%9C%EC%9E%91%EC%84%B1%EC%95%88\" aria-label=\"311 1차 코드작성안 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.1.1 1차 코드작성안</h2>\n<p><strong>처음부터 문제를 풀 때는 보통 간단한 구현을 짜고, 이걸 가지고 리팩토링 한다.</strong></p>\n<p><strong>가장 작은 부분부터 일단 만들면서 더 풍부하고, 더 좋은 해법의 설계를 가져가는 것을 반복한다.</strong></p>\n<p>바꿔말하면 <strong>처음 코드는 보통 구지단 말이다. 처음부터 못해도 좋다. 빠르게 이터레이션을 가져가면서 좋은 코드로 바꾸는 연습을 하자.</strong></p>\n<h3 id=\"문제점\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C%EC%A0%90\" aria-label=\"문제점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제점?</h3>\n<ul>\n<li>두 디렉토리 차이점 알아내기 라는 도메인 로직이 I/O 코드와 긴밀하게 “결합” 되어있다\n<ul>\n<li><code class=\"language-text\">pathlib</code>, <code class=\"language-text\">shutil</code>, <code class=\"language-text\">hashlib</code> 을 다 써야함</li>\n<li>비록 퓨어 파이썬 라이브러리라고 하지만….</li>\n</ul>\n</li>\n<li>테스트가 충분하지 않다\n<ul>\n<li>테스트케이스가 모자라다 → 커버리지가 낮다</li>\n<li><code class=\"language-text\">shutil.move()</code> 가 잘못 사용중이다(!)\n<ul>\n<li>버그를 찾으려면 테스트를 더 해야한다</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>확장성이 없음. 아래 요구사항이 오면 코드를 싹 갈아야한다\n<ul>\n<li>되는지 안 되는지만 알려주는 <code class=\"language-text\">--dry-run</code> 같은 기능을 추가하려면?</li>\n<li>원격서버와 동기화 해야한다면?</li>\n<li>클라우드 저장 장치와 동기화 해야한다면?</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"32-올바른-추상화-선택\" style=\"position:relative;\"><a href=\"#32-%EC%98%AC%EB%B0%94%EB%A5%B8-%EC%B6%94%EC%83%81%ED%99%94-%EC%84%A0%ED%83%9D\" aria-label=\"32 올바른 추상화 선택 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.2 올바른 추상화 선택</h1>\n<p>테스트하기 쉽게 짜려면 생각을 다시 해보자.</p>\n<ol>\n<li>요구사항의 어떤 부분을 코드화할지 생각한다</li>\n</ol>\n<p>→ 파일 시스템의 어떤 기능을 코드에서 쓸지 생각해본다\n2. 코드 내에는 3가지 뚜렷한 서로 다른 일이 일어남을 캐치한다. 즉, 코드의 <strong>책임</strong>을 찾는다\n1. <code class=\"language-text\">os.walk</code> 을 사용해 시스템 정보 및 파일해시를 구한다 (원본, 사본 모두에서 처리)\n2. 파일이 새 파일인지, 이름이 변경된 파일인지, 중복된 파일인지 정한다\n3. 원본과 사본을 일치시키기 위해 파일 복사하거나, 옮기거나, 삭제한다.</p>\n<p>세 가지 책임에 대해 <strong>단순화한 추상화(simplifying abstraction)</strong> 을 찾으려는 과정이다. 마치 인터페이스를 만드는 것 처럼… 개선해보자!</p>\n<ol>\n<li>시스템 정보 및 파일 해시를 구하는 딕셔너리를 만들 때, 원본 및 사본의 모든 파일해시를 다 구하고 연산한다면?</li>\n<li>두 번째, 세 번째 책임은 어떻게 해결할 것인가?</li>\n</ol>\n<p>→ “<strong>무엇</strong>” 을 원하는가와 원하는 바를 “<strong>어떻게</strong>” 달성할 지를 분리하자.\n1. 프로그램이 아래와 비슷한 명령 목록을 출력하도록 하자</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    ```python\n    (\"COPY\", \"sourcepath\", \"destpath\"),\n    (\"MOVE\", \"old\", \"new\"),\n    ```\n    \n2. 여기서 파일 시스템을 표현하는 두 딕셔너리를 입력받는 테스트 작성 가능</code></pre></div>\n<ol start=\"3\">\n<li>… 그러면 아래와 같이 말을 바꿀 수 있다\n<ol>\n<li>(이전) 어떤 주어진 실제 파일 시스템에 대해 함수를 실행하면 어떤 일이 일어나는지 검사하자</li>\n<li>(이후) 어떤 파일 시스템의 <strong>추상화</strong>에 대해 함수를 실행하면 어떤 <strong>추상화된</strong> 동작이 일어나는지 검사하자</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"33-선택한-추상화-구현\" style=\"position:relative;\"><a href=\"#33-%EC%84%A0%ED%83%9D%ED%95%9C-%EC%B6%94%EC%83%81%ED%99%94-%EA%B5%AC%ED%98%84\" aria-label=\"33 선택한 추상화 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.3 선택한 추상화 구현</h1>\n<p>어려운 개발 도서들은 말은 좋지. 실제로 코드를 어떻게 짤까? 일단 목표를 다시 생각해보자.</p>\n<ul>\n<li>시스템에서 트릭이 적용된 부분을 분리해서 격리한다</li>\n<li>실제 파일 시스템 없이도 테스트가 되게 한다</li>\n</ul>\n<p>외부 상태에 대해 의존성이 없는 코드의 ‘코어’를 만들고, 외부 세계를 표현하는 입력에 대해 이 코어가 어떻게 반응하는지 생각해보자<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup></p>\n<p>step 1) 코드에서 로직과 상태가 있는 부분을 분리한다.</p>\n<ol>\n<li>입력 수집\n<ol>\n<li>이 코드를 나눠서 원본, 사본의 경로와 해시를 모두 구했다</li>\n</ol>\n</li>\n<li>함수형 코어 호출\n<ol>\n<li>if 구문이 여기서 갈릴 것이다</li>\n<li>개별 테스트로 빼기도 쉽다</li>\n</ol>\n</li>\n<li>출력 적용\n<ol>\n<li>처음에 들어온 명령만 처리하면 된다.</li>\n</ol>\n</li>\n</ol>\n<p>이러면 큰 로직과 저수준 I/O의 의존성을 함수단위로 풀었다. 쉽게 코드의 코어를 테스트할 수 있다(<code class=\"language-text\">determine_actions</code>)!</p>\n<p>전체를 테스트하려는 통합/인수테스트도 유지할 수도 있다만, 더 나아가 <code class=\"language-text\">sync()</code> 를 다듬어서 단위테스트를 겸해서 동시에 e2e 테스트까지 할 수도 있다. 이걸 책의 공동저자는 <code class=\"language-text\">edge-to-edge</code> 테스트라고 부른다.</p>\n<h2 id=\"331-의존성-주입과-가짜를-사용한-edge-to-edge-테스트\" style=\"position:relative;\"><a href=\"#331-%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A3%BC%EC%9E%85%EA%B3%BC-%EA%B0%80%EC%A7%9C%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C-edge-to-edge-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"331 의존성 주입과 가짜를 사용한 edge to edge 테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.3.1 의존성 주입과 가짜를 사용한 edge-to-edge 테스트</h2>\n<p>새 시스템을 짤 때는 위에서 언급한 추상화를 통한 구현을 하자. 어느 시점이 되면 시스템의 더 큰 덩어리를 한번에 테스트하고자 할 것이다.</p>\n<p>저자는 이 때 한번에 테스트하되 가짜 I/O를 사용하는 류의 edge-to-edge 테스트를 추천한다.</p>\n<p>요컨대, 어느 파일 시스템에서(<code class=\"language-text\">filesystem</code>) 액션을 취할지를 테스트하는 방법을 DI를 통한 테스트 더블로 처리할 수 있다.</p>\n<h2 id=\"332-mockpatch-를-쓰지-않는-이유\" style=\"position:relative;\"><a href=\"#332-mockpatch-%EB%A5%BC-%EC%93%B0%EC%A7%80-%EC%95%8A%EB%8A%94-%EC%9D%B4%EC%9C%A0\" aria-label=\"332 mockpatch 를 쓰지 않는 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.3.2 <code class=\"language-text\">mock.patch</code> 를 쓰지 않는 이유</h2>\n<p>mock을 통한 monkey patching을 별로라고 하면서, 테스트 더블을 소개한다. 왜 안쓰는지를 설명하는 지에 대한 이유는 다음과 같다:</p>\n<ol>\n<li>사용중인 의존성을 다른 코드로 패치하면, 테스트는 되지만 설계 개선에 도움되지 않는다.</li>\n<li>mock을 쓴 테스트는 코드 베이스의 세부사항에 더 밀접하게 결합된다. 코드베이스가 뭘 하는지를 모킹하기 때문에, 이 또한 결합이다 라고 한단하는 것 같다.</li>\n<li>결국 코드 베이스를 알아야하니까 test suite을 보고 바로 이해하기 힘들어진다.</li>\n</ol>\n<p>여기 내용은 유닛 테스팅 책을 좀 보고 다시 이해해야겠다… 여전히 모르겠다.</p>\n<h1 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h1>\n<p>비즈니스 로직과 I/O 사이의 인터페이스를 단순화하는게 중요하다는 것을 배웠다. 올바른 추상화를 찾는 것은 어렵다. 아래는 올바른 추상화를 하기 위한 방법이다.</p>\n<ol>\n<li>지저분한 시스템 상태를 표현할 수 있는 파이썬 객체가 있나? 있다면 이를 활용해 시스템의 상태를 반환하는 단일함수를 생각해보자.</li>\n<li>시스템의 구성요소 중 어떤 부분에 선을 그을 수 있을까? 이 각각의 추상화 사이의 <a href=\"https://www.informit.com/articles/article.aspx?p=359417&#x26;seqNum=2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">이음매(seams)</a>를 어떻게 만들 수 있을까?</li>\n<li>시스템의 여러 부분을 서로 다른 책임을 지니는 구성요소로 나누는 합리적인 방법은 무엇일까? 명시적으로 표현해야 하는 암시적인 개념은 무엇일까?</li>\n<li>어떤 의존관계가 존재하는가? 핵심 비즈니스 로직은 무엇인가?</li>\n</ol>\n<p>계속 연습하자… 계속…</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">Gary Bernhardt 가 말한 <a href=\"https://github.com/kbilsted/Functional-core-imperative-shell/blob/master/README.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Functional Core, Imperative Shell</a> 이라는 접근방법이다. 상세한건 링크 참고<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a></li>\n</ol>\n</div>","fields":{"slug":"/books/cosmic-python/2023-04-13---pt01-ch03//books/docker/2023-04-13-pt01-ch03","tagSlugs":["/tag/ddd/","/tag/books/","/tag/backend/","/tag/python/"]},"frontmatter":{"date":"2023-04-13T22:51:20.000Z","description":"파이썬으로 살펴보는 아키텍처 패턴을 읽고 이해한 내용을 작성합니다. 챕터 3, 결합과 추상화에 대한 내용입니다.","tags":["ddd","books","backend","python"],"title":"파이썬으로 살펴보는 아키텍처 패턴 (3)","socialImage":{"publicURL":{"publicURL":"/static/66b1d3acbf31f0d2ad20eee928a14aaa/universe.jpg"}}}}},"pageContext":{"slug":"/books/cosmic-python/2023-04-13---pt01-ch03//books/docker/2023-04-13-pt01-ch03"}},"staticQueryHashes":["251939775","357378587","401334301"]}