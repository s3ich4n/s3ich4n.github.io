{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/devlog/devops/docker-explained-pt02","result":{"data":{"markdownRemark":{"id":"f92be187-2cdd-5a57-8bd1-9e4a1eb5e0a9","html":"<h1 id=\"도커의-개념에-대해-알아보자\" style=\"position:relative;\"><a href=\"#%EB%8F%84%EC%BB%A4%EC%9D%98-%EA%B0%9C%EB%85%90%EC%97%90-%EB%8C%80%ED%95%B4-%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90\" aria-label=\"도커의 개념에 대해 알아보자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>도커의 개념에 대해 알아보자</h1>\n<p>도커의 방식에 따라 개발을 한다고 하면 아래와 같다:</p>\n<ol>\n<li>컨테이너 구축: 앱</li>\n<li>서비스를 구축: 컨테이너가 어떻게 프로덕션 환경에서 작동하는가를 정의</li>\n<li>스택을 구축: 모든 서비스 간 상호작용에 대해 정의</li>\n</ol>\n<h2 id=\"새로운-환경을-구축하는-방식\" style=\"position:relative;\"><a href=\"#%EC%83%88%EB%A1%9C%EC%9A%B4-%ED%99%98%EA%B2%BD%EC%9D%84-%EA%B5%AC%EC%B6%95%ED%95%98%EB%8A%94-%EB%B0%A9%EC%8B%9D\" aria-label=\"새로운 환경을 구축하는 방식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>새로운 환경을 구축하는 방식</h2>\n<p>원래는 가상환경을 설치하고 요구사항을 적어줘야했다면 이미지로 파이썬 런타임을 얻어둔다. 그 후 빌드는 기존의 파이썬 이미지를 코드에 추가하여 앱, 의존성, 런타임이 동시에 돌아가도록 한다. 이런류의 가상 이미지는 <code class=\"language-text\">Dockerfile</code>안에 정의된다.</p>\n<h2 id=\"컨테이너를-dockerfile과-함께-정의\" style=\"position:relative;\"><a href=\"#%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88%EB%A5%BC-dockerfile%EA%B3%BC-%ED%95%A8%EA%BB%98-%EC%A0%95%EC%9D%98\" aria-label=\"컨테이너를 dockerfile과 함께 정의 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컨테이너를 <code class=\"language-text\">Dockerfile</code>과 함께 정의</h2>\n<p><code class=\"language-text\">Dockerfile</code>은 컨테이너 안에 뭐가 들어갈지 에 대해 정의한 것이다. 네트워크 인터페이스, 디스크 드라이브처럼 리소스에 접근하는 것은 환경내에 가상화 되어있으며 이 것들은 시스템의 나머지와 격리되어있다. 그렇기 때문에 외부에 나가는 포트를 매핑해줘야하고, 어떤 파일이 환경설정에 복사되는지 구체화해야 한다. 이런식으로 정의 한 후에는 <code class=\"language-text\">Dockerfile</code>에 정의된 앱의 빌드가 어디서든 똑같이 작동한다고 할 수 있다.</p>\n<h2 id=\"빌드까지-해보자\" style=\"position:relative;\"><a href=\"#%EB%B9%8C%EB%93%9C%EA%B9%8C%EC%A7%80-%ED%95%B4%EB%B3%B4%EC%9E%90\" aria-label=\"빌드까지 해보자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>빌드까지 해보자</h2>\n<p>여기서부터는 Docker의 공식문서와 똑같다.</p>\n<ol>\n<li>도커 <strong>이미지</strong> 를 만든다(<code class=\"language-text\">build</code>)</li>\n<li>도커 이미지에 tag를 붙인다</li>\n<li>\n<p>그 후?</p>\n<ol>\n<li>\n<p>로컬에서 돌린다</p>\n<ul>\n<li>로컬에 도는 <strong>컨테이너</strong> 를 <code class=\"language-text\">docker container ls</code> 로 확인한다</li>\n</ul>\n</li>\n<li>\n<p>배포한다 (이를테면 <code class=\"language-text\">push</code>로)</p>\n<ul>\n<li><code class=\"language-text\">registry</code>에 배포한다; 이는 리포지토리의 컬렉션</li>\n<li>리포지토리는 이미지의 컬렉션; 코드가 이미 빌드되어있다는 점을 빼고는 github 리포랑 비슷한 느낌</li>\n<li>docker hub에 docker login을 하고 <code class=\"language-text\">push</code></li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"service는-무슨-개념인가\" style=\"position:relative;\"><a href=\"#service%EB%8A%94-%EB%AC%B4%EC%8A%A8-%EA%B0%9C%EB%85%90%EC%9D%B8%EA%B0%80\" aria-label=\"service는 무슨 개념인가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Service는 무슨 개념인가?</h1>\n<p>앱 로드밸런싱과 앱 스케일 조절도 가능해진다. 분산 앱에서는 여러 부분의 앱을 가지고 “services” 라고 부른다. 예를들어 동영상 공유 사이트가 있다고 하자. 거기엔 앱 데이터를 DB에 저장하는 서비스, 사용자가 업로드 후 비디오 인/디코딩을 수행하는 서비스, 프론트엔드 서비스, 등이 있을 것이다.</p>\n<p>“service”는 \"\" 이다. 서비스는 하나의 이미지에서만 돌아가지만, 이미지가 돌아가는 방식을 기술해둔다. 예를들면 몇번 포트가 써져야하는지, 몇가지 컨테이너 복제본이 돌아서 얼마나 버틸지 등이 대표적이다. 서비스를 “스케일링” 하는 것은 소프트웨어 조각을 돌리는 컨테이너 수를 변경하는 것이며, 이는 프로세스 내의 서비스에 많은 컴퓨팅 리소스를 할당하는 것이다.</p>\n<p>이런 것들은 도커에선 굉장히 간단하다. <code class=\"language-text\">docker-compose.yml</code> 파일을 만들고 수정하면 되기 때문이다. 도커 공식문서의 예시를 보고 파악해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"3\"</span>\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># web이라는 이름의 서비스를 돌림</span>\n  <span class=\"token key atrule\">web</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> s3ich4n/get<span class=\"token punctuation\">-</span>started<span class=\"token punctuation\">:</span>pt02\n    <span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span>\n      <span class=\"token comment\"># 몇개의 동일한 컨테이너를 굴릴건지?</span>\n      <span class=\"token key atrule\">replicas</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span> \n      <span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">limits</span><span class=\"token punctuation\">:</span>\n          <span class=\"token comment\"># 컨테이너당 10%의 CPU 싱글코어 시간만큼 돌고 메모리는 50M 쓴다</span>\n          <span class=\"token key atrule\">cpus</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"0.1\"</span>\n          <span class=\"token key atrule\">memory</span><span class=\"token punctuation\">:</span> 50M\n        <span class=\"token key atrule\">restart_policy</span><span class=\"token punctuation\">:</span>\n          <span class=\"token comment\"># 하나가 문제가 생기면 바로 재시작</span>\n          <span class=\"token key atrule\">condition</span><span class=\"token punctuation\">:</span> on<span class=\"token punctuation\">-</span>failure\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"4000:80\"</span> <span class=\"token comment\"># 4000번을 80번으로 매핑</span>\n    <span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n      <span class=\"token comment\"># 'web'의 컨테이너가 80번 포트를 webnet 이라하는</span>\n      <span class=\"token comment\"># 로드밸런스 네트워크에 공유하도록 세팅함</span>\n      <span class=\"token punctuation\">-</span> webnet \n<span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># webnet 네트워크를 기본값으로 둠</span>\n  <span class=\"token comment\"># 이는 로드밸런스 오버레이 네트워크다</span>\n  webnet<span class=\"token punctuation\">:</span></code></pre></div>\n<h2 id=\"로드밸런스가-적용된-앱을-굴려보자\" style=\"position:relative;\"><a href=\"#%EB%A1%9C%EB%93%9C%EB%B0%B8%EB%9F%B0%EC%8A%A4%EA%B0%80-%EC%A0%81%EC%9A%A9%EB%90%9C-%EC%95%B1%EC%9D%84-%EA%B5%B4%EB%A0%A4%EB%B3%B4%EC%9E%90\" aria-label=\"로드밸런스가 적용된 앱을 굴려보자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>로드밸런스가 적용된 앱을 굴려보자</h2>\n<p><code class=\"language-text\">docker stack deploy</code>를 쓰기 전에 아래 명령어를 먼저 입력하자.</p>\n<blockquote>\n<p><code class=\"language-text\">docker swarm init</code></p>\n</blockquote>\n<p>이걸 안치면 이런 에러가 난다: <code class=\"language-text\">this node is not a swarm manager</code></p>\n<p>그 후 앱 이름을 하나 만들어주면 된다.</p>\n<p><code class=\"language-text\">docker stack deploy -c docker-compose.yml getstartedlab</code></p>\n<p>이런 식으로 돌리면 5개의 컨테이너가 돌거다.</p>\n<p><code class=\"language-text\">docker-compose.yml</code>을 바꾸고 <code class=\"language-text\">docker stack deploy</code>를 다시 실행시키면 된다. 껐다가 재부팅할 필요는 없다.</p>\n<p>은근히 나오는 <code class=\"language-text\">swarm</code>의 개념은 아래에서 설명하도록 한다.</p>\n<h1 id=\"swarm은-어떤-개념인가\" style=\"position:relative;\"><a href=\"#swarm%EC%9D%80-%EC%96%B4%EB%96%A4-%EA%B0%9C%EB%85%90%EC%9D%B8%EA%B0%80\" aria-label=\"swarm은 어떤 개념인가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Swarm은 어떤 개념인가?</h1>\n<p>앱을 클러스터에 올리고 여러 머신에서 구동하는 것도 가능하다. 멀티컨테이너, 멀티머신앱을 일종의 도커로 묶인(<code class=\"language-text\">Dockerized</code>) 클러스터로 쓸 수 있다. 이들은 <code class=\"language-text\">Swarm</code>(이하 스웜)이라고 부른다.</p>\n<h2 id=\"swarm-클러스터에-대해\" style=\"position:relative;\"><a href=\"#swarm-%ED%81%B4%EB%9F%AC%EC%8A%A4%ED%84%B0%EC%97%90-%EB%8C%80%ED%95%B4\" aria-label=\"swarm 클러스터에 대해 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Swarm 클러스터에 대해</h2>\n<p><code class=\"language-text\">Swarm</code>은 도커가 작동중이고, 클러스터로 묶인 머신의 그룹이다. 묶이고 난 후에도 도커 커맨드는 그대로 쓸 수 있다. 그렇지만 <code class=\"language-text\">swarm manager</code>에 의해 클러스터 상에서 수행된다. 스웜에 포함된 머신은 물리적일수도, 가상일 수도 있다. 스웜에 포함된 후에는 <code class=\"language-text\">node</code>라고 부른다.</p>\n<p>스웜 매니저는 여러 정책을 사용해서 컨테이너를 돌릴 수 있다. 크게 두가지 모드가 있는데, <code class=\"language-text\">emptiest node</code>와 <code class=\"language-text\">global</code>이 그것이다. <code class=\"language-text\">emptiest node</code>는 가장 적게 쓰이는 머신과 컨테이너를 채우는 방식이다. <code class=\"language-text\">global</code>은 각각의 머신들이 정확히 특정한 컨테이너 하나를 가진다고 가정하는 방식이다. 운영시에는 스웜 매니저가 Compose 파일에 이런 정책을 사용하도록 지시한다. 하나의 컨테이너에 대해 하던 것과 비슷하다.</p>\n<p>스웜 매니저는 명령어를 수행하거나 다런 머신이 swarm에 <code class=\"language-text\">worker</code>로 들어갈 수 있는 권한을 주는 스웜의 유일한 머신이다. <code class=\"language-text\">worker</code>는 단순히 capacity만을 제공하고 다른기계에게 무엇은 할 수 있고, 무엇은 할 수 없고 를 말할 권한이 없다.</p>\n<p>지금까지의 예제는 로컬에서 single-host모드로 도커를 사용했지만, 도커는 swarm mode로 스왑할 수 있다. 이 모드가 스웜을 사용할 수 있게 해준다. 스웜모드를 바로 켜면 현재 머신을 스웜매니저로 만든다. 그 때부터 도커는 본인이 관리하는 스웜에 입력한 명령을 수행한다. 현재 머신이 일을 수행하지 않음에 유의하라.</p>\n<h2 id=\"스웜-세팅하기\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%EC%9B%9C-%EC%84%B8%ED%8C%85%ED%95%98%EA%B8%B0\" aria-label=\"스웜 세팅하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스웜 세팅하기</h2>\n<p>스웜은 앞서 말했다시피 여러개의 물리/가상노드로 구성되어있다. 스웜을 세팅하는 기본 개념은 다음과 같다. <code class=\"language-text\">docker swarm init</code>을 수행해서 스웜 모드에 돌입해서 현재 머신을 스웜 매니저로 만든다. 그후 다른 머신이 <code class=\"language-text\">docker swarm join</code>을 입력하여 스웜에 worker로 들어오게 한다. 클러스터를 로컬 VM같은걸로 해서 실습하는 세션을 따라해보자.</p>\n<ol>\n<li><code class=\"language-text\">docker-machine</code>을 통해 여러개의 가상머신을 구축</li>\n<li>VM리스트를 보고 IP 확인하기</li>\n<li>\n<p>swarm 초기화 및 node 추가</p>\n<ol>\n<li><code class=\"language-text\">docker-machine ssh myvm1 \"docker swarm init --advertise-addr &lt;myvm1 ip>\"</code> 을 수행하면 <code class=\"language-text\">myvm1</code> 노드는 스웜 매니저가 된다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ docker-machine <span class=\"token function\">ssh</span> myvm1 <span class=\"token string\">\"docker swarm init --advertise-addr &lt;myvm1 ip>\"</span>\nSwarm initialized: current <span class=\"token function\">node</span> <span class=\"token operator\">&lt;</span>node ID<span class=\"token operator\">></span> is now a manager.\n\nTo <span class=\"token function\">add</span> a worker to this swarm, run the following command:\n\n  <span class=\"token function\">docker</span> swarm <span class=\"token function\">join</span> <span class=\"token punctuation\">\\</span>\n  --token <span class=\"token operator\">&lt;</span>token<span class=\"token operator\">></span> <span class=\"token punctuation\">\\</span>\n  <span class=\"token operator\">&lt;</span>myvm ip<span class=\"token operator\">></span>:<span class=\"token operator\">&lt;</span>port<span class=\"token operator\">></span>\n\nTo <span class=\"token function\">add</span> a manager to this swarm, run <span class=\"token string\">'docker swarm join-token manager'</span> and follow the instructions.</code></pre></div>\n<blockquote>\n<p>Tip: 2377, 2376포트?</p>\n<p>해당 포트는 도커의 스웜 관리용 포트로 쓰인다. 가급적 해당 포트를 피해서 사용하기를 권장한다.</p>\n</blockquote>\n<ol start=\"2\">\n<li><code class=\"language-text\">docker-machine ssh myvm2 \"docker swarm join --token &lt;token> &lt;ip>:2377\"</code>를 수행하면 해당 노드는 worker가 된다.</li>\n</ol>\n<blockquote>\n<p>Tip: 스웜을 나가려면?</p>\n<p><code class=\"language-text\">docker swarm leave</code>를 각 노드별로 실행하기.</p>\n</blockquote>\n</li>\n<li>\n<p>앱을 swarm cluster 상에서 구동하기:<br>\n<strong>스웜 매니저</strong>가 도커 명령을 수행할 수 있다는 점을 염두에 두고 작업하자!</p>\n<ol>\n<li>스웜 매니저의 명령을 바로 수행하기 위해 옵션을 가져오자</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ docker-machine <span class=\"token function\">env</span> myvm1\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">DOCKER_TLS_VERIFY</span><span class=\"token operator\">=</span><span class=\"token string\">\"1\"</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">DOCKER_HOST</span><span class=\"token operator\">=</span><span class=\"token string\">\"tcp://192.168.99.100:2376\"</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">DOCKER_CERT_PATH</span><span class=\"token operator\">=</span><span class=\"token string\">\"/Users/sam/.docker/machine/machines/myvm1\"</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">DOCKER_MACHINE_NAME</span><span class=\"token operator\">=</span><span class=\"token string\">\"myvm1\"</span>\n<span class=\"token comment\"># Run this command to configure your shell:</span>\n<span class=\"token comment\"># eval $(docker-machine env myvm1)</span></code></pre></div>\n<ol start=\"2\">\n<li>그 후 <code class=\"language-text\">myvm1</code>에서 해당 명령어를 실행시켜 앱을 배포하자!<br>\n<br>\n<code class=\"language-text\">docker stack deploy -c docker-compose.yml getstartedlab</code></li>\n</ol>\n<blockquote>\n<p>Docker Hub의 private registry에 있다면 docker login을 먼저 하고<br>\n스웜노드들이 그걸 알고있어야한다!</p>\n<p>따라서 먼저 로그인을 하고 <code class=\"language-text\">--with-registry-auth -c</code> 옵션을 함께 주면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">docker</span> login registry.example.com\n<span class=\"token punctuation\">..</span>.\n$ <span class=\"token function\">docker</span> stack deploy --with-registry-auth -c docker-compose.yml getstartedlab\n<span class=\"token punctuation\">..</span>.</code></pre></div>\n<p>이런식으로 로컬에서 스웜 노드들에게 토큰을 보내주어야 정상접근이 가능하다.</p>\n</blockquote>\n</li>\n</ol>\n<p>설정이 끝나고 <code class=\"language-text\">192.168.99.100</code>, <code class=\"language-text\">192.168.99.101</code> 둘다 접근하면 앱이 뜬다.<br>\n로컬에서 연습할 때는 도커 켜고 실행하는거 까먹지 말고 돌리기!</p>\n<ol start=\"5\">\n<li>stack 및 swarm을 끄려면?</li>\n</ol>\n<blockquote>\n<p><code class=\"language-text\">docker stack rm getstartedlab</code></p>\n</blockquote>\n<blockquote>\n<p>Tip: <code class=\"language-text\">docker swarm leave</code>를 수행하면<br>\n현재 속한 스웜에서 나간다. (매니저일 때는 <code class=\"language-text\">--force</code>옵션 필요!)</p>\n</blockquote>\n<ol start=\"6\">\n<li><code class=\"language-text\">docker-machine</code>쉘 환경변수 해지하기</li>\n</ol>\n<blockquote>\n<p><code class=\"language-text\">eval $(docker-machine env -u)</code></p>\n</blockquote>\n<h1 id=\"stack은-어떤-개념인가\" style=\"position:relative;\"><a href=\"#stack%EC%9D%80-%EC%96%B4%EB%96%A4-%EA%B0%9C%EB%85%90%EC%9D%B8%EA%B0%80\" aria-label=\"stack은 어떤 개념인가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Stack은 어떤 개념인가?</h1>\n<p>분산앱의 가장 끝자락에 있는 <code class=\"language-text\">Stack</code>이란 개념은, 의존성을 공유하는 상호연관된 서비스들의 그룹이다. 또한 함께 orchestrate되고 스케일을 조절받을 수 있다. 단일 스택은 전체 응용 프로그램의 기능을 정의하고 조정할 수 있다(매우 복잡한 응용 프로그램이 여러 스택을 사용할 수도 있음). 여러 서비스를 같이 한다고 했을 때를 생각해보자! <code class=\"language-text\">docker-compose.yml</code>을 수정하고 예제를 따라해보며 이해해보자. indent에 주의!</p>\n<ol>\n<li><code class=\"language-text\">docker-compose.yml</code> 수정하기 (1) <br>\n<code class=\"language-text\">visualiser</code> 추가하기</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># yml은 indent에 굉장히 민감하기 때문에 더 꼼꼼하게 봐야함</span>\n\n<span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"3\"</span>\n\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># web이라는 이름의 서비스를 돌림</span>\n  <span class=\"token key atrule\">web</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> s3ich4n/get<span class=\"token punctuation\">-</span>started<span class=\"token punctuation\">:</span>pt2\n    <span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span>\n      <span class=\"token comment\"># 몇개의 동일한 컨테이너를 굴릴건지?</span>\n      <span class=\"token key atrule\">replicas</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span> \n      <span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">limits</span><span class=\"token punctuation\">:</span>\n          <span class=\"token comment\"># 컨테이너당 10%의 CPU 싱글코어 시간만큼 돌고 메모리는 50M 쓴다</span>\n          <span class=\"token key atrule\">cpus</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"0.1\"</span>\n          <span class=\"token key atrule\">memory</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"50M\"</span>\n      <span class=\"token key atrule\">restart_policy</span><span class=\"token punctuation\">:</span>\n          <span class=\"token comment\"># 하나가 문제가 생기면 바로 재시작</span>\n        <span class=\"token key atrule\">condition</span><span class=\"token punctuation\">:</span> on<span class=\"token punctuation\">-</span>failure\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"4000:80\"</span> <span class=\"token comment\"># 4000번을 80번으로 매핑</span>\n    <span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n      <span class=\"token comment\"># 'web'의 컨테이너가 80번 포트를 webnet 이라하는</span>\n      <span class=\"token comment\"># 로드밸런스 네트워크에 공유하도록 세팅함</span>\n      <span class=\"token punctuation\">-</span> webnet\n  <span class=\"token key atrule\">visualizer</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> dockersamples/visualizer<span class=\"token punctuation\">:</span>stable\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"8080:8080\"</span>\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"/var/run/docker.sock:/var/run/docker.sock\"</span>\n    <span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">placement</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">constraints</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>node.role == manager<span class=\"token punctuation\">]</span>\n    <span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> webnet\n<span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># webnet 네트워크를 기본값으로 둠</span>\n  <span class=\"token comment\"># 이는 로드밸런스 오버레이 네트워크다</span>\n  webnet<span class=\"token punctuation\">:</span></code></pre></div>\n<p>  visualiser라는 서비스가 하나 더 추가됐고, 그 속에 <code class=\"language-text\">volumes</code>라는 키와 <code class=\"language-text\">placement</code>라는 키가 함께 추가되었다. <code class=\"language-text\">volumes</code>는 <code class=\"language-text\">visualiser</code>가 호스트의 도커를 위한 소켓파일에 접근권한을 주는 것이고, <code class=\"language-text\">placement</code>는 해당 서비스가 오직 스웜 매니저에서만 작동하도록 하는 것이다(워커는 안됨).\n이 키를 준 이유는 <a href=\"https://github.com/dockersamples/docker-swarm-visualizer\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">visualiser가 그렇게 만들어져셔</a>다.</p>\n<ol start=\"2\">\n<li><code class=\"language-text\">myvm1</code> 환경변수를 로드 후 쉘 조작</li>\n</ol>\n<p>  위 그림과 같이 <code class=\"language-text\">visualiser</code>는 하나의 단일 이미지를 갖고있고, <code class=\"language-text\">web</code> 인스턴스는 스웜에 나누어져있다. <code class=\"language-text\">docker stack ps getstartedlab</code>으로도 확인할 수 있다. <code class=\"language-text\">visualiser</code>는 스택이 포함된 모든 앱에서 실행할 수 있는 스탠드얼론 서비스다. 다른 것에 의존하지 않는다. 이번엔 <strong>의존</strong>하는 서비스를 달아보자. <code class=\"language-text\">Redis</code>를 통해 방문자 카운트를 수행하는 서비스이다.</p>\n<ol start=\"3\">\n<li><code class=\"language-text\">docker-compose.yml</code> 수정하기 (2)<br>\n<code class=\"language-text\">redis</code> 추가하기</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># yml은 indent에 굉장히 민감하기 때문에 더 꼼꼼하게 봐야함</span>\n\n<span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"3\"</span>\n\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># web이라는 이름의 서비스를 돌림</span>\n  <span class=\"token key atrule\">web</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> s3ich4n/get<span class=\"token punctuation\">-</span>started<span class=\"token punctuation\">:</span>pt2\n    <span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span>\n      <span class=\"token comment\"># 몇개의 동일한 컨테이너를 굴릴건지?</span>\n      <span class=\"token key atrule\">replicas</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span>\n      <span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">limits</span><span class=\"token punctuation\">:</span>\n          <span class=\"token comment\"># 컨테이너당 10%의 CPU 싱글코어 시간만큼 돌고 메모리는 50M 쓴다</span>\n          <span class=\"token key atrule\">cpus</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"0.1\"</span>\n          <span class=\"token key atrule\">memory</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"50M\"</span>\n      <span class=\"token key atrule\">restart_policy</span><span class=\"token punctuation\">:</span>\n          <span class=\"token comment\"># 하나가 문제가 생기면 바로 재시작</span>\n        <span class=\"token key atrule\">condition</span><span class=\"token punctuation\">:</span> on<span class=\"token punctuation\">-</span>failure\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"4000:80\"</span> <span class=\"token comment\"># 4000번을 80번으로 매핑</span>\n    <span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n      <span class=\"token comment\"># 'web'의 컨테이너가 80번 포트를 webnet 이라하는</span>\n      <span class=\"token comment\"># 로드밸런스 네트워크에 공유하도록 세팅함</span>\n      <span class=\"token punctuation\">-</span> webnet\n  <span class=\"token key atrule\">visualizer</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> dockersamples/visualizer<span class=\"token punctuation\">:</span>stable\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"8080:8080\"</span>\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"/var/run/docker.sock:/var/run/docker.sock\"</span>\n    <span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">placement</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">constraints</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>node.role == manager<span class=\"token punctuation\">]</span>\n    <span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> webnet\n  <span class=\"token key atrule\">redis</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> redis\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"6379:6379\"</span>\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"/home/docker/data:/data\"</span>\n    <span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">placement</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">constraints</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>node.role == manager<span class=\"token punctuation\">]</span>\n    <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> redis<span class=\"token punctuation\">-</span>server <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>appendonly yes\n    <span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> webnet\n<span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># webnet 네트워크를 기본값으로 둠</span>\n  <span class=\"token comment\"># 이는 로드밸런스 오버레이 네트워크다</span>\n  webnet<span class=\"token punctuation\">:</span></code></pre></div>\n<p><code class=\"language-text\">Redis</code>는 도커 라이브러리의 공식이미지가 있고, 그렇기에 이름이 저렇게 짧아도 된다. Redis 포트 6379는 컨테이너에서 호스트로 노출되도록 Redis에 의해 사전 구성되어 있다. 여기에서 Compose 파일에는 호스트에서 리얼월드로 노출되므로 실제로 호스트의 IP 주소를 입력 할 수 있다. 필요에 따라 노드를 Redis Desktop Manager로 가져 와서 Redis 인스턴스를 관리할 수도 있다.</p>\n<p>또한 레디스 스펙상에는 몇가지 중요한 사항이 있다. 이것은 구현체들 사이에서 데이터가 변하지 않고 해준다. 다시말해 여러 구현체들이 값을 변경해도 일정하게 유지하도록 해준다는 말이다.</p>\n<ul>\n<li><code class=\"language-text\">redis</code>는 항상 매니저상에서 돌아간다. 그러므로 동일한 파일 시스템을 사용한다.</li>\n<li><code class=\"language-text\">redis</code>는 컨테이너 속의 <code class=\"language-text\">/data</code>라는 호스트의 가상 디렉토리를 접근한다. 이는 <code class=\"language-text\">Redis</code>가 데이터를 저장하는 곳이다.</li>\n</ul>\n<p>이들이 같이 있음으로서 Redis 데이터에 대한 호스트의 물리 파일시스템에 ‘단일정보(source of truth)‘를 만든다. 이 설정이 없다면, <code class=\"language-text\">Redis</code>는 컨테이너 파일 시스템 내의 /data에 그 값을 저장할 것이며, 컨테이너가 재배포되면 값이 사라질 것이다.</p>\n<p>이 ‘단일정보’는 두가지 구성요소를 가지고 있다.</p>\n<ul>\n<li>Redis 서비스에 둔 제약조건. 이는 항상 동일한 호스트를 가정한다.</li>\n<li>컨테이너가 호스트의 <code class=\"language-text\">./data</code>를 레디스 컨테이너의 <code class=\"language-text\">/data</code>처럼 접근하도록 한 볼륨. 컨테이너가 동작하는 동안, 특정 호스트의 <code class=\"language-text\">./data</code>에 저장된 파일들이 계속 유지되어 연속성을 유지한다.</li>\n<li>\n<p><code class=\"language-text\">./data</code> 디렉토리를 스웜 매니저에 생성</p>\n<p><code class=\"language-text\">docker-machine ssh myvm1 \"mkdir ./data\"</code></p>\n</li>\n<li>\n<p><code class=\"language-text\">docker stack deploy</code>를 통해 서비스를 추가</p>\n<p><code class=\"language-text\">$ docker stack deploy -c docker-compose.yml getstartedlab</code></p>\n</li>\n</ul>\n<h1 id=\"나만의-앱을-deploy하려면\" style=\"position:relative;\"><a href=\"#%EB%82%98%EB%A7%8C%EC%9D%98-%EC%95%B1%EC%9D%84-deploy%ED%95%98%EB%A0%A4%EB%A9%B4\" aria-label=\"나만의 앱을 deploy하려면 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>나만의 앱을 deploy하려면?</h1>\n<p>크게 두가지가 필요하다.</p>\n<ul>\n<li><code class=\"language-text\">Dockerfile</code>로 앱 개발</li>\n<li><code class=\"language-text\">docker-compose.yml</code>로 <code class=\"language-text\">Docker app</code>, <code class=\"language-text\">service</code>, <code class=\"language-text\">stack</code> 환경설정</li>\n</ul>\n<p>이 과정을 마치면 <code class=\"language-text\">AWS</code>, <code class=\"language-text\">Azure</code>, 등등 클라우드나 서버에 올리면 될 것이다. 앱이 필요한 프로토콜, 포트를 개방해주는 것도 필요할 것이니 개발시 스스로 알아보고 작업하면 될 것이다. Docker 이미지를 빌드하고 publish하면 어디서든 끌어쓸 수 있을 것이고… <del>나머지는 검색으로 다시 공부하면 될 것이다.</del> <a href=\"https://docs.docker.com/machine/overview/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">이 링크</a>는 꼭 읽어보길 바란다. 문서를 따라읽으며 공부했다면 정말 크게 도움될 것..</p>\n<h2 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h2>\n<ul>\n<li><a href=\"https://docs.docker.com/get-started/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Get Started pt.02 ~ pt.06</a></li>\n<li><a href=\"https://subicura.com/2017/02/10/docker-guide-for-beginners-create-image-and-deploy.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">초보를 위한 도커 안내서</a></li>\n</ul>","fields":{"slug":"/posts/devlog/devops/docker-explained-pt02","tagSlugs":["/tag/dev-ops/"]},"frontmatter":{"date":"2019-05-18T12:00:00.000Z","description":"Docker를 알아봅시다. (2번째 글)","tags":["DevOps"],"title":"Docker pt.02 도커를 자세히 알아보자","socialImage":null}}},"pageContext":{"slug":"/posts/devlog/devops/docker-explained-pt02"}},"staticQueryHashes":["251939775","401334301","825871152"]}