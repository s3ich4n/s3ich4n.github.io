{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/devlog/devops/docker-explained-pt02","result":{"data":{"markdownRemark":{"id":"22e2209a-c795-514b-8241-31923e0330e4","html":"<h1 id=\"도커가-당최-무어야\" style=\"position:relative;\"><a href=\"#%EB%8F%84%EC%BB%A4%EA%B0%80-%EB%8B%B9%EC%B5%9C-%EB%AC%B4%EC%96%B4%EC%95%BC\" aria-label=\"도커가 당최 무어야 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>도커가 당최 무어야?</h1>\n<h2 id=\"what-is-docker\" style=\"position:relative;\"><a href=\"#what-is-docker\" aria-label=\"what is docker permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What is Docker?</h2>\n<p><code class=\"language-text\">Docker</code> 란 개발자, 관리자가 앱에 대해 개발, 배포, 실행을 컨테이너와 함께 하기위한 플랫폼이다. 리눅스 컨테이너를 통해 앱을 배포하는 쓰임새를 <em>containerization</em> 이라고 한다.</p>\n<p>containerization은 가면 갈 수록 널리 퍼지고있는데, 그 이유는 다음과 같다:</p>\n<ul>\n<li>flexible함</li>\n<li>경량화 되어있음</li>\n<li>교체가능함</li>\n<li>가벼움</li>\n<li>크기조절이 쉬움</li>\n<li>스택화 가능</li>\n</ul>\n<h2 id=\"what-is-images-and-containers-in-docker\" style=\"position:relative;\"><a href=\"#what-is-images-and-containers-in-docker\" aria-label=\"what is images and containers in docker permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What is Images and Containers in Docker?</h2>\n<p><code class=\"language-text\">Container</code>는 <code class=\"language-text\">Image</code>를 돌리는 것으로 작동된다. <strong>Image</strong> (이하 이미지)는 실행가능한 패키지이다. 이는 애플리케이션을 돌리기 위해 필요한 모든 것 (코드, 런타임, 라이브러리, 환경설정, 설정파일)을 포함하고 있다.</p>\n<p><strong>Container</strong> (이하 컨테이너)는 이미지의 런타임 인스턴스이다. 이는 실행했을 때 이미지가 메모리에 상주하는 것을 의미한다(즉, 이미지가 상태와 유저 프로세스를 가지고있는 것). 리눅스 상에서는 <code class=\"language-text\">docker ps</code> 명령어를 통해 동작중인 컨테이너의 리스트를 볼 수 있다.</p>\n<h2 id=\"containters-and-virtual-machines\" style=\"position:relative;\"><a href=\"#containters-and-virtual-machines\" aria-label=\"containters and virtual machines permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Containters and Virtual machines</h2>\n<p>컨테이너는 리눅스 상에서 <em>네이티브</em> 하게 돌아가며 다른 컨테이너들과 함께 호스트 컴퓨터의 커널을 공유한다. 각각 독립적이지만 구별되는 프로세스로 작동하며 다른 실행파일과 다르게 메모리를 더 점유하지 않는다. 이런 점이 도커를 <em>가볍게</em> 한다.</p>\n<p>이와 대조되어 <code class=\"language-text\">가상머신(VM)</code>은 <em>가상의</em> 접근을 가진 하나의 정교한 <code class=\"language-text\">guest</code> 운영체제로 돌아가며, <code class=\"language-text\">hypervisor</code>를 통하여 리소스를 제공한다. 일반적으로 VM은 대부분의 앱이 요구하는 것 보다 더 많은 리소스를 가진 환경을 제공한다.</p>\n<h1 id=\"도커란-어떻게-쓰는-것인가\" style=\"position:relative;\"><a href=\"#%EB%8F%84%EC%BB%A4%EB%9E%80-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%93%B0%EB%8A%94-%EA%B2%83%EC%9D%B8%EA%B0%80\" aria-label=\"도커란 어떻게 쓰는 것인가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>도커란 어떻게 쓰는 것인가?</h1>\n<p>도커 설치는 CE 혹은 EE를 알맞은 플랫폼에 맞게 사용한다.</p>\n<p>나는 맥을 사용하니 <a href=\"https://docs.docker.com/docker-for-mac/install/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">이 링크</a>를 타고 들어가서 Docker Desktop을 다운받았다.</p>\n<p>다운로드 받은 후 버전을 알아보려면 이런식으로 나온다 </p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">docker</span> ---version\nDocker version <span class=\"token number\">18.09</span>.2, build <span class=\"token number\">6247962</span></code></pre></div>\n<p>설치한 <code class=\"language-text\">Docker</code>의 상세정보를 알아보려면 아래와 같이 입력하자</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">docker</span> info\n\nContainers: <span class=\"token number\">0</span>\n Running: <span class=\"token number\">0</span>\n Paused: <span class=\"token number\">0</span>\n Stopped: <span class=\"token number\">0</span>\nImages: <span class=\"token number\">0</span>\nServer Version: <span class=\"token number\">18.09</span>.2\nStorage Driver: overlay2\n<span class=\"token punctuation\">..</span>.</code></pre></div>\n<p><code class=\"language-text\">docker run &lt;image-name></code>을 수행하면 docker hub에 등록된 컨테이너를 다운로드 받거나 실행시킨다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">docker</span> run hello-world\nUnable to <span class=\"token function\">find</span> image <span class=\"token string\">'hello-world:latest'</span> locally\nlatest: Pulling from library/hello-world\n1b930d010525: Pull complete \nDigest: sha256:92695bc579f31df7a63da6922075d0666e565ceccad16b59c3374d2cf4e8e50e\nStatus: Downloaded newer image <span class=\"token keyword\">for</span> hello-world:latest\n\nHello from Docker<span class=\"token operator\">!</span>\nThis message shows that your installation appears to be working correctly.\n\nTo generate this message, Docker took the following steps:\n<span class=\"token punctuation\">..</span>.</code></pre></div>\n<p>필요한 명령어는 <a href=\"https://docs.docker.com/engine/reference/commandline/cli/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">여기</a>서 찾거나, 필요에 따라 검색하길 바란다. 나는 <a href=\"https://daeson.tistory.com/290\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">여기</a>가 도움이 되었다.</p>\n<p>containerization은 CI/CD를 별 차이없이 만들었다.</p>\n<ul>\n<li>애플리케이션이 시스템 의존을 가지지 않음</li>\n<li>업데이트가 어떤 분산된 앱의 일부에도 추가될 수 있다.</li>\n<li>자원 밀도를 최적화 할 수 있다. (앱이 달라짐에 따른 자원의 변화를 의미하는 것 같다)</li>\n</ul>\n<p>도커를 쓰면 스케일 업은 새로운 걸 만드는 거지, 무거운 VM 호스트를 돌리는게 아니다.</p>\n<h1 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h1>\n<ul>\n<li><a href=\"https://docs.docker.com/get-started/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Get Started</a></li>\n<li><a href=\"https://docs.docker.com/docker-for-mac/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Get started with Docker Desktop for Mac</a></li>\n<li><a href=\"https://daeson.tistory.com/290\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">도커 명령어</a></li>\n</ul>","fields":{"slug":"/posts/devlog/devops/docker-explained-pt02","tagSlugs":["/tag/dev-ops/"]},"frontmatter":{"date":"2019-05-18T12:00:00.000Z","description":"Docker를 알아봅시다. (1번째 글)","tags":["DevOps"],"title":"Docker pt.01 도커란 무엇이며, 어떻게 쓰는가?","socialImage":null}}},"pageContext":{"slug":"/posts/devlog/devops/docker-explained-pt02"}},"staticQueryHashes":["251939775","401334301","825871152"]}