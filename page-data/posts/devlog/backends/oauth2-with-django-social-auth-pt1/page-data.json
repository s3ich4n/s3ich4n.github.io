{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/devlog/backends/oauth2-with-django-social-auth-pt1","result":{"data":{"markdownRemark":{"id":"dcd39af4-0525-5038-b340-51a30907c2a8","html":"<h1 id=\"django에서-oauth2를-통해-소셜로그인을-하는-법\" style=\"position:relative;\"><a href=\"#django%EC%97%90%EC%84%9C-oauth2%EB%A5%BC-%ED%86%B5%ED%95%B4-%EC%86%8C%EC%85%9C%EB%A1%9C%EA%B7%B8%EC%9D%B8%EC%9D%84-%ED%95%98%EB%8A%94-%EB%B2%95\" aria-label=\"django에서 oauth2를 통해 소셜로그인을 하는 법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Django에서 oauth2를 통해 소셜로그인을 하는 법</h1>\n<p>TBA</p>\n<h1 id=\"python-social-auth-공식문서\" style=\"position:relative;\"><a href=\"#python-social-auth-%EA%B3%B5%EC%8B%9D%EB%AC%B8%EC%84%9C\" aria-label=\"python social auth 공식문서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>python-social-auth 공식문서</h1>\n<p>python-social-auth (psa)가 어떻게 쓰이는지 알아보도록 하자.</p>\n<h2 id=\"1-psa의-url에-대하여\" style=\"position:relative;\"><a href=\"#1-psa%EC%9D%98-url%EC%97%90-%EB%8C%80%ED%95%98%EC%97%AC\" aria-label=\"1 psa의 url에 대하여 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. PSA의 URL에 대하여</h2>\n<p><code class=\"language-text\">urls.py</code> 안에서 어떻게 세팅해야하는가?</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>contrib<span class=\"token punctuation\">.</span>auth <span class=\"token keyword\">import</span> views <span class=\"token keyword\">as</span> auth\n\n<span class=\"token punctuation\">(</span>중략<span class=\"token punctuation\">)</span>\npath<span class=\"token punctuation\">(</span><span class=\"token string\">'oauth/'</span><span class=\"token punctuation\">,</span> include<span class=\"token punctuation\">(</span><span class=\"token string\">'social_django.urls'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'namespace=social'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\npath<span class=\"token punctuation\">(</span><span class=\"token string\">'login/'</span><span class=\"token punctuation\">,</span> auth<span class=\"token punctuation\">.</span>auth_login<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'login'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>이런식으로 다른 서비스들과 OAuth2 정보를 주고받을 엔드포인트 주소를 설정한다.\n로그인 링크는 본인이 사용할 템플릿 파일에 다음과같이 설정해주면 된다.</p>\n<p>{% raw %}</p>\n<div class=\"gatsby-highlight\" data-language=\"django\"><pre class=\"language-django\"><code class=\"language-django\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token django language-django\"><span class=\"token delimiter punctuation\">{%</span> <span class=\"token tag keyword\">url</span> <span class=\"token string\">'social:begin'</span> <span class=\"token string\">'oauth2-provider-name'</span> <span class=\"token delimiter punctuation\">%}</span></span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Login<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>{% endraw %}</p>\n<p>예를들어..\nGithub라면: <code class=\"language-text\">/auth/complete/github/</code> 같은 엔드포인트를,\nGoogle이라면: <code class=\"language-text\">/auth/complete/google-oauth2/</code> 같은 엔드포인트를 거친다.</p>\n<h2 id=\"2-backends에-대하여\" style=\"position:relative;\"><a href=\"#2-backends%EC%97%90-%EB%8C%80%ED%95%98%EC%97%AC\" aria-label=\"2 backends에 대하여 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. <code class=\"language-text\">Backends</code>에 대하여</h2>\n<p>Django의 경우에는 아래의 경우를 추가해주어야 한다.</p>\n<ol>\n<li>\n<p><code class=\"language-text\">SOCIAL_AUTH_{backend}</code>를 <code class=\"language-text\">settings.py</code>에 넣어준다.</p>\n<ul>\n<li>\n<p>Google OAuth2의 경우?</p>\n<ul>\n<li><code class=\"language-text\">SOCIAL_AUTH_GOOGLE_OAUTH2_KEY</code></li>\n<li><code class=\"language-text\">SOCIAL_AUTH_GOOGLE_OAUTH2_SECERT</code></li>\n</ul>\n</li>\n<li>\n<p>Github OAuth2의 경우?</p>\n<ul>\n<li><code class=\"language-text\">SOCIAL_AUTH_GITHUB_KEY</code></li>\n<li><code class=\"language-text\">SOCIAL_AUTH_GITHUB_SECRET</code></li>\n</ul>\n</li>\n<li>그 외 사항은 구현하고자 하는 백엔드에 맞추어 검색하고 옵션을 추가한다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">AUTHENTICATION_BACKENDS</code>에 사용하려는 백엔드 값을 넣어준다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">AUTHENTICATION_BACKENDS <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token comment\"># 지원하는 백엔드 인증방식들</span>\n    <span class=\"token string\">'social_core.backends.open_id.OpenIdAuth'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'social_core.backends.google.GoogleOpenId'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'social_core.backends.google.GoogleOAuth2'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'social_core.backends.github.GithubOAuth2'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'social_core.backends.facebook.FacebookOAuth2'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\"># django.contrib.auth 앱을 추가해야 기본 로그인기능 사용가능</span>\n    <span class=\"token string\">'django.contrib.auth.backends.ModelBackend'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"3-pipeline에-대하여\" style=\"position:relative;\"><a href=\"#3-pipeline%EC%97%90-%EB%8C%80%ED%95%98%EC%97%AC\" aria-label=\"3 pipeline에 대하여 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Pipeline에 대하여</h2>\n<p>{% raw %}<code class=\"language-text\">{% url 'social:begin' 'github' %}</code>{% endraw %}같은 링크를 reverse하면 다음과 같다.</p>\n<blockquote>\n<p><code class=\"language-text\">http://example.com/login/github</code></p>\n</blockquote>\n<p>이 링크를 누르면 “파이프라인”이 시작된다. 파이프라인은 유저에 대한 정보를 모으는 함수들의 리스트다. 모은 정보를 통해 인증 프로세스를 진행한다.</p>\n<p>파이프라인을 거치는 일련의 과정은 이렇다.\n<code class=\"language-text\">social_core/backends/base.py</code> 파일의 <code class=\"language-text\">run_pipeline()</code>을 보며 분석하면 더욱 좋다.</p>\n<ol>\n<li>\n<p>파이프라인은 4개의 딕셔너리를 가지고 시작한다. 이는 각각의 함수의 리턴값으로 업데이트된다. 최초 4가지 변수는 다음과 같다.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">strategy</code></p>\n<ul>\n<li><code class=\"language-text\">strategy</code> 객체를 포함한다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">backend</code></p>\n<ul>\n<li>파이프라인이 작동할 동안 쓰일 백엔드를 포함한다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">request</code></p>\n<ul>\n<li>리쿼스트 키에 대한 딕셔너리를 포함한다. <code class=\"language-text\">self.strategy.request_data()</code>의 결과값을 말한다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">details</code></p>\n<ul>\n<li>빈 딕셔너리를 가진다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>함수가 딕셔너리 혹은 False스러운 값을 리턴하면 딕셔너리 속에 추가로 딕셔너리를 더한다. (<code class=\"language-text\">run_pipeline</code>의 <code class=\"language-text\">out</code>) 그 후 추가된 딕셔너리 값을 가지고 파이프라인의 다음 과정을 부른다.</li>\n<li>뭔가 리턴되면(<code class=\"language-text\">HttpResponse의 서브클래스 같은것들</code>), 브라우저로 리턴한다.</li>\n<li>파이프라인이 끝나고난 뒤, 유저가 인증된다. 즉 파이프라인이 돌고있을 때 인증된 유저객체를 찾으면, 파이프 라인이 시작될 때 사용자가 로그인되었음을 의미한다.</li>\n</ol>\n<p>백엔드 관련 로직이 있다면, 필요에 따라 따로 파이프라인을 거치지 않아도 되는 파이프 라인 단계를 만들어야한다.</p>\n<h2 id=\"4-파이프라인-인터럽트뷰와의-통신\" style=\"position:relative;\"><a href=\"#4-%ED%8C%8C%EC%9D%B4%ED%94%84%EB%9D%BC%EC%9D%B8-%EC%9D%B8%ED%84%B0%EB%9F%BD%ED%8A%B8%EB%B7%B0%EC%99%80%EC%9D%98-%ED%86%B5%EC%8B%A0\" aria-label=\"4 파이프라인 인터럽트뷰와의 통신 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 파이프라인 인터럽트(뷰와의 통신)</h2>\n<p>파이프라인 사이에 추가과정을 넣고싶다면 <code class=\"language-text\">@partial</code> 데코레이터를 통해 진행할 수 있다. 이는 다시말해 파이프라인이 어딘지 쫓아올 수 있다는 말이고, 과정을 이어서 재시작할 수도 있다는 말이다.</p>\n<p>이를 위해 할 일은 뷰가 파이프라인과 통신하도록 세팅하는 것이다. <code class=\"language-text\">settings.py</code>에 어느 값이 세션과 파이프라인 사이에 왔다갔다할지 세팅해주면 된다.</p>\n<p>파이프 라인에 사용자 지정 단계를 추가하려는 경우, 나중에 사용자가 직접 사이트를 방문 할 수 있도록 암호를 설정해야한다고 해보자. 그렇다면 <code class=\"language-text\">settings.py</code>와 <code class=\"language-text\">pipeline.py</code>, <code class=\"language-text\">views.py</code>에는 각각 이렇게 세팅해주면 될 것이다.</p>\n<ul>\n<li><code class=\"language-text\">settings.py</code>의 경우</li>\n</ul>\n<p><code class=\"language-text\">SOCIAL_AUTH_FIELDS_STORED_IN_SESSION = ['local_password',]</code></p>\n<p><code class=\"language-text\">SOCIAL_AUTH_FIELDS_STORED_IN_SESSION</code>은 <a href=\"https://buildmedia.readthedocs.org/media/pdf/python-social-auth/stable/python-social-auth.pdf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">해당 링크</a>에서 검색하면 상세히 나오니 참조하길 바란다.</p>\n<ul>\n<li><code class=\"language-text\">pipeline.py</code>의 경우</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>shortcuts <span class=\"token keyword\">import</span> redirect\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>contrib<span class=\"token punctuation\">.</span>auth<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> User\n<span class=\"token keyword\">from</span> social_core<span class=\"token punctuation\">.</span>pipeline<span class=\"token punctuation\">.</span>partial <span class=\"token keyword\">import</span> partial\n\n<span class=\"token comment\"># partial은, '인터럽트를 걸지만 다시 돌아오겠다' 하는 의미</span>\n<span class=\"token decorator annotation punctuation\">@partial</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">collect_password</span><span class=\"token punctuation\">(</span>strategy<span class=\"token punctuation\">,</span> backend<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> details<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 'local_password'세션은 파이프라인에 의해 오고가도록 세팅 되어있다.</span>\n    local_password <span class=\"token operator\">=</span> strategy<span class=\"token punctuation\">.</span>session_get<span class=\"token punctuation\">(</span><span class=\"token string\">'local_password'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> local_password<span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 만약 딕셔너리나 None이외의 것이 리턴되면 유저에게 리턴된다.</span>\n        <span class=\"token comment\"># 이 경우, 패스워드로 쓸 수 있는 뷰로 리디렉션 될 것이다.</span>\n        <span class=\"token keyword\">return</span> redirect<span class=\"token punctuation\">(</span><span class=\"token string\">\"myapp.views.collect_password\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># email address was captured in an earlier step.)</span>\n    <span class=\"token comment\"># 유저 객체를 DB로부터 가져오고(아직 로그인 되어있지 않음), 비밀번호를 세팅한다(이메일정보는 이전에 가져왔다고 가정하자).</span>\n    user <span class=\"token operator\">=</span> User<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>email<span class=\"token operator\">=</span>kwargs<span class=\"token punctuation\">[</span><span class=\"token string\">'email'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    user<span class=\"token punctuation\">.</span>set_password<span class=\"token punctuation\">(</span>local_password<span class=\"token punctuation\">)</span>\n    user<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 파이프라인을 재개한다.</span>\n    <span class=\"token keyword\">return</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">views.py</code>의 경우</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">PasswordForm</span><span class=\"token punctuation\">(</span>forms<span class=\"token punctuation\">.</span>Form<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    secret_word <span class=\"token operator\">=</span> forms<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_user_password</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> request<span class=\"token punctuation\">.</span>method <span class=\"token operator\">==</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">:</span>\n        form <span class=\"token operator\">=</span> PasswordForm<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>POST<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> form<span class=\"token punctuation\">.</span>is_valid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># FIELDS_STORED_IN_SESSION 때문에, 파이프라인이 재개되면</span>\n            <span class=\"token comment\"># request dictionary로 복사될 것이다.</span>\n            request<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">[</span><span class=\"token string\">'local_password'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> form<span class=\"token punctuation\">.</span>cleaned_data<span class=\"token punctuation\">[</span><span class=\"token string\">'secret_word'</span><span class=\"token punctuation\">]</span>\n\n            <span class=\"token comment\"># 일단 세션에 숨겨진 비밀번호를 얻을 수 있다면,</span>\n            <span class=\"token comment\"># 파이프라인이 완성된 엔드포인트를 이용해 재개하도록 명령할 수 있다.</span>\n            <span class=\"token keyword\">return</span> redirect<span class=\"token punctuation\">(</span>reverse<span class=\"token punctuation\">(</span><span class=\"token string\">'social:complete'</span><span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"backend_name,\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        form <span class=\"token operator\">=</span> PasswordForm<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> render<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token string\">\"password_form.html\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>여기서 <code class=\"language-text\">social:complete</code>는 파이프라인에 인터럽트된 동일 함수에 다시 들어갈 것이다.</p>","fields":{"slug":"/posts/devlog/backends/oauth2-with-django-social-auth-pt1","tagSlugs":["/tag/django/"]},"frontmatter":{"date":"2019-03-28T12:00:00.000Z","description":"Django에서 django-social-auth를 사용하여 OAuth2 인증을 사용하는 방법에 대해 설명합니다.","tags":["Django"],"title":"Autentication OAuth2 w/ django-social-auth pt. 1","socialImage":null}}},"pageContext":{"slug":"/posts/devlog/backends/oauth2-with-django-social-auth-pt1"}},"staticQueryHashes":["251939775","401334301","825871152"]}