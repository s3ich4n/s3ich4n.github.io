{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/devlog/backends/oauth2-with-django-social-auth-pt2","result":{"data":{"markdownRemark":{"id":"f75b155e-9f50-567a-8d4d-4b6167afcef2","html":"<h1 id=\"pipeline-strategy-and-storage\" style=\"position:relative;\"><a href=\"#pipeline-strategy-and-storage\" aria-label=\"pipeline strategy and storage permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pipeline, Strategy and Storage</h1>\n<h2 id=\"pipeline이란\" style=\"position:relative;\"><a href=\"#pipeline%EC%9D%B4%EB%9E%80\" aria-label=\"pipeline이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pipeline이란?</h2>\n<p><code class=\"language-text\">python-social-auth</code>는 확장성있는 파이프라인 메커니즘을 쓴다. 이를 통해 authentication, association, disconnection 중 임의의 함수를 추가로 사용할 수 있다.</p>\n<p>함수는 현재 프로세스와 연관된 여러 변수들을 매개변수로 받는다. 이는 각각 <code class=\"language-text\">strategy</code>, <code class=\"language-text\">user</code>, <code class=\"language-text\">request</code>이다. <code class=\"language-text\">**kwargs</code>를 파라미터로 추가해두어 예상치못한 매개변수를 처리하도록 하는 것이 좋다.</p>\n<h2 id=\"strategy란\" style=\"position:relative;\"><a href=\"#strategy%EB%9E%80\" aria-label=\"strategy란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Strategy란?</h2>\n<p>가능한 한 많은 코드를 재사용하여 공통 API 하에서 다른 프레임 워크 기능을 캡슐화하기 위해 여러 strategy들을 정의해 두었다.</p>\n<p>Strategy가 서비스하는 범위는 다음과 같다:</p>\n<ul>\n<li>데이터, 호스트의 정보를 받기, 주어진 경로에 대한 URI 빌딩</li>\n<li>세션 액세스</li>\n<li>프로젝트 세팅</li>\n<li>응답 타입 (HTML 혹은 리다이렉트)</li>\n<li>HTML 렌더링</li>\n</ul>\n<p>서로 다른 프레임워크들이 다르게 구현되어있더라도 이런 인터페이스를 통해 해당 기능을 사용하는 것이 권장된다.</p>\n<p>새로운 Strategy를 구현하려면 아래 링크의 요소들이 구현되어 있어야 한다:</p>\n<p><a href=\"https://python-social-auth-docs.readthedocs.io/en/latest/strategies.html#implementing-a-new-strategy\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">링크 참조</a></p>\n<h2 id=\"storage란\" style=\"position:relative;\"><a href=\"#storage%EB%9E%80\" aria-label=\"storage란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Storage란?</h2>\n<p>프레임워크들은 서로다른 ORM을 제공한다. Storage는 공통 인터페이스를 mixin 클래스로 API들을 모아두었다. 기본 파이프라인과 그에 대해 구현해야 할 부분은 <a href=\"https://python-social-auth.readthedocs.io/en/latest/storage.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">해당 링크</a>를 참조하길 바란다.</p>\n<p><code class=\"language-text\">SQLAlcehmy ORM</code>과 <code class=\"language-text\">Django ORM</code>의 일부 mixin은 구현되어있다.\n<a href=\"https://github.com/python-social-auth/social-app-django/blob/master/social_django/storage.py\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Django ORM 의 일부 구현체</a>는 링크를 참조하길 바란다.</p>\n<h2 id=\"authentication-pipeline\" style=\"position:relative;\"><a href=\"#authentication-pipeline\" aria-label=\"authentication pipeline permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Authentication Pipeline?</h2>\n<p>인증 파이프라인에는 기존에 제공되는 파이프라인을 쓰거나 사용자 파이프라인을 추가해서 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">SOCIAL_AUTH_PIPELINE <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'social_core.pipeline.social_auth.social_details'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'social_core.pipeline.social_auth.social_uid'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'social_core.pipeline.social_auth.auth_allowed'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'social_core.pipeline.social_auth.social_user'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'social_core.pipeline.user.get_username'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'social_core.pipeline.mail.mail_validation'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'social_core.pipeline.social_auth.associate_by_email'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'social_core.pipeline.user.create_user'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'social_core.pipeline.social_auth.associate_user'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'social_core.pipeline.social_auth.load_extra_data'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'social_core.pipeline.user.user_details'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<table>\n<thead>\n<tr>\n<th>이름</th>\n<th>역할</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>social<em>auth.social</em>details</td>\n<td>유저에 관련된 정보를 가지고와서 유저 인스턴스를 만들 수 있도록 리턴한다</td>\n</tr>\n<tr>\n<td>social<em>auth.social</em>uid</td>\n<td>인증하는 서비스의 social uid를 받아온다</td>\n</tr>\n<tr>\n<td>social<em>auth.auth</em>allowed</td>\n<td>현재 인증 프로세스가 현재 프로젝트에 유효한지 검증한다</td>\n</tr>\n<tr>\n<td>social<em>auth.social</em>user</td>\n<td>소셜계정이 현재 사이트에 이미 associate 되어있는지 체크한다</td>\n</tr>\n<tr>\n<td>user.get_username</td>\n<td>해당 유저의 username을 세팅한다. 충돌이 있다면 끝에 random string을 추가한다</td>\n</tr>\n<tr>\n<td>mail.mail_validation</td>\n<td>이메일 인증을 받아야 계정이 유효하도록 만든다. 기본적으로 <code class=\"language-text\">disable</code> 되어있다</td>\n</tr>\n<tr>\n<td>social<em>auth.associate</em>by_email</td>\n<td>현재 소셜 세부 정보를 비슷한 이메일 주소를 가진 다른 사용자 계정과 연결한다. 기본적으로 <code class=\"language-text\">disable</code> 되어있다</td>\n</tr>\n<tr>\n<td>create_user</td>\n<td>user 계정이 없다면 만든다</td>\n</tr>\n<tr>\n<td>social<em>auth.associate</em>user</td>\n<td>소셜계정이 유저와 associate한 레코드를 생성한다</td>\n</tr>\n<tr>\n<td>social<em>auth.load</em>extra_data</td>\n<td>소셜 레코드의 extra<em>data 필드에 설정에 지정된 값(기본값은 access</em>token 등)을 채운다</td>\n</tr>\n<tr>\n<td>user.user_details</td>\n<td>기존 인증 서비스로부터 변경된 유저 레코드 정보를 업데이트한다</td>\n</tr>\n</tbody>\n</table>\n<p>각 파이프라인 함수는 아래 파라미터들을 받는다.</p>\n<ul>\n<li>현재 strategy(이는 현재 storage, backend, request에 액세스할 수 있게 해준다)</li>\n<li>인증 제공자에게서 받은 유저ID, 유저 상세정보</li>\n<li><code class=\"language-text\">is_new</code> 플래그 (기본값은 <code class=\"language-text\">false</code>)</li>\n<li>\n<p>auth_complete 백엔드 메소드로부터 받은 arguments. 기본적으로 이 arguments들이 온다</p>\n<ul>\n<li>현재 로그인한 유저. 아니라면 <code class=\"language-text\">None</code></li>\n<li>현재 request</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"파이프라인-확장\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EC%9D%B4%ED%94%84%EB%9D%BC%EC%9D%B8-%ED%99%95%EC%9E%A5\" aria-label=\"파이프라인 확장 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파이프라인 확장</h2>\n<p>파이프라인의 주요목적은 확장성에 있다. 함수 중간에서 데이터를 만들고, 모델 인스턴스를 만들고, 유저에게 다른 데이터를 요청하거나, 프로세스를 멈추게 할 수도 있다.</p>\n<p>파이프라인을 확장하는건 아래과정이 필요하다.</p>\n<ol>\n<li>함수작성</li>\n<li>import할 수 있을 곳에 위치</li>\n<li>\n<p>새로 만든 함수를 포함시켜 파이프라인 정의에 오버라이딩. 단, 순서가 중요하다.</p>\n<ul>\n<li><code class=\"language-text\">social_core.pipeline.user.create_user</code>뒤에 사용자 정의 함수를 선언하면 이 함수는 user상태를 None값이 아니라 in-stance(만들어져있거나 이미 있는 상태)로 가져온다. </li>\n</ul>\n</li>\n</ol>\n<p>파이프라인 함수는 사용중인 백엔드, 다른 모델 인스턴스, 서버 요청 및 공급자 응답에 이르기까지 상당히 많은 인수를 갖게된다.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">strategy</code></p>\n<ul>\n<li>현재 strategy 인스턴스.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">backend</code></p>\n<ul>\n<li>현재 백엔드 인스턴스.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">uid</code></p>\n<ul>\n<li>서비스 제공자의 UID. 이 값으로 현재 서비스 제공자의 유저를 판별한다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">response = {}</code> or <code class=\"language-text\">object()</code></p>\n<ul>\n<li>서버의 유저 상세정보 응답이다. 이 값은 현재 사용중인 프로토콜에 의존적이다. 보통은 <code class=\"language-text\">dict</code> 타입으로 정보를 넣어둔다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">details = {}</code></p>\n<ul>\n<li>백엔드에 의해 기본적으로 생성된 유저의 상세정보다. 유저 모델의 상세정보를 생성, 수정할 때 사용한다. 이 <code class=\"language-text\">dict</code>는 <code class=\"language-text\">username</code>, <code class=\"language-text\">email</code>, <code class=\"language-text\">first_name</code>, <code class=\"language-text\">lastname</code>, <code class=\"language-text\">fullname</code>을 담고있다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">user = None</code></p>\n<ul>\n<li>DB 생성, 조회여부에 따라 유저 인스턴스, 혹은 <code class=\"language-text\">None</code>값.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">social = None</code></p>\n<ul>\n<li>DB 생성, 조회여부에 따라 주어진 유저에 대한 <code class=\"language-text\">UserSocialAuth</code> 인스턴스값, 혹은 <code class=\"language-text\">None</code>값.</li>\n</ul>\n</li>\n</ul>\n<p>일반적으로 커스텀 파이프라인 함수를 작성할 때, <code class=\"language-text\">response</code> 파라미터로부터 값을 얻어온다. 그 외에도 더 할 수 있다. API 엔드포인트를 호출해서 더 많은 정보를 불러오거나 다른곳에 저장하거나 하는 것도 가능하다.</p>\n<p>예를들어 페이스북에서 가져온 response값을 보고, 유저의 프로필링크, 성별, Profile 모델의 타임존을 구하는 코드를 작성한다고 해보자:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    'username'<span class=\"token operator\">:</span> 'foobar'<span class=\"token punctuation\">,</span>\n    'access_token'<span class=\"token operator\">:</span> 'CAAD...'<span class=\"token punctuation\">,</span>\n    'first_name'<span class=\"token operator\">:</span> 'Foo'<span class=\"token punctuation\">,</span>\n    'last_name'<span class=\"token operator\">:</span> 'Bar'<span class=\"token punctuation\">,</span>\n    'verified'<span class=\"token operator\">:</span> True<span class=\"token punctuation\">,</span>\n    'name'<span class=\"token operator\">:</span> 'Foo Bar'<span class=\"token punctuation\">,</span>\n    'locale'<span class=\"token operator\">:</span> 'en_US'<span class=\"token punctuation\">,</span>\n    'gender'<span class=\"token operator\">:</span> 'male'<span class=\"token punctuation\">,</span>\n    'expires'<span class=\"token operator\">:</span> '<span class=\"token number\">5183999</span>'<span class=\"token punctuation\">,</span>\n    'email'<span class=\"token operator\">:</span> 'foo@bar.com'<span class=\"token punctuation\">,</span>\n    'updated_time'<span class=\"token operator\">:</span> '<span class=\"token number\">2014</span><span class=\"token number\">-01</span>-14T15<span class=\"token operator\">:</span><span class=\"token number\">58</span><span class=\"token operator\">:</span><span class=\"token number\">35</span>+<span class=\"token number\">0000</span>'<span class=\"token punctuation\">,</span>\n    'link'<span class=\"token operator\">:</span> 'https<span class=\"token operator\">:</span><span class=\"token comment\">//www.facebook.com/foobar',</span>\n    'timezone'<span class=\"token operator\">:</span> <span class=\"token number\">-3</span><span class=\"token punctuation\">,</span>\n    'id'<span class=\"token operator\">:</span> '<span class=\"token number\">100000126636010</span>'<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이런식의 값이 오면 다음과 같이 조립할 수 있다:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">save_profile</span><span class=\"token punctuation\">(</span>backend<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> backend<span class=\"token punctuation\">.</span>name <span class=\"token operator\">==</span> <span class=\"token string\">'facebook'</span><span class=\"token punctuation\">:</span>\n        profile <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span>get_profile<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> profile <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            profile <span class=\"token operator\">=</span> Profile<span class=\"token punctuation\">(</span>user_id<span class=\"token operator\">=</span>user<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span>\n        profile<span class=\"token punctuation\">.</span>gender <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'gender'</span><span class=\"token punctuation\">)</span>\n        profile<span class=\"token punctuation\">.</span>link <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'link'</span><span class=\"token punctuation\">)</span>\n        profile<span class=\"token punctuation\">.</span>timezone <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'timezone'</span><span class=\"token punctuation\">)</span>\n        profile<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>다만 이 새로운 함수는 <code class=\"language-text\">SOCIAL_AUTH_PIPELINE</code>의 해당 라인에 위치해야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">SOCIAL_AUTH_PIPELINE <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'social_core.pipeline.social_auth.social_details'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'social_core.pipeline.social_auth.social_uid'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'social_core.pipeline.social_auth.auth_allowed'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'social_core.pipeline.social_auth.social_user'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'social_core.pipeline.user.get_username'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'social_core.pipeline.user.create_user'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'path.to.save_profile'</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># &lt;--- 함수위치를 여기 세팅</span>\n    <span class=\"token string\">'social_core.pipeline.social_auth.associate_user'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'social_core.pipeline.social_auth.load_extra_data'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'social_core.pipeline.user.user_details'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>위의 함수는 {}가 리턴되듯 None이 리턴된다. 만일 해당변수를 다음 파이프라인에서도 쓰고싶다면 <code class=\"language-text\">{'profile':profile}</code>을 리턴하면 된다.</p>","fields":{"slug":"/posts/devlog/backends/oauth2-with-django-social-auth-pt2","tagSlugs":["/tag/django/"]},"frontmatter":{"date":"2019-03-29T12:00:00.000Z","description":"Django에서 django-social-auth를 사용하여 OAuth2 인증을 사용하는 방법에 대해 이어서 설명합니다.","tags":["Django"],"title":"Autentication OAuth2 w/ django-social-auth pt. 1","socialImage":null}}},"pageContext":{"slug":"/posts/devlog/backends/oauth2-with-django-social-auth-pt2"}},"staticQueryHashes":["251939775","401334301","825871152"]}