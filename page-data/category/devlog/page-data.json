{"componentChunkName":"component---src-templates-category-template-category-template-tsx","path":"/category/devlog","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"fields":{"slug":"/devlog/python/2025-02-02---python-and-overloading//devlog/python/2025-02-02-python-and-overloading","categorySlug":"/category/devlog/"},"frontmatter":{"description":"파이썬이 가지는 언어적 측면과 철학의 차이때문에 의도적으로 없습니다. 그렇다면 어떤 차이가 있고 어떤 개념 차이가 있는지 파악 후 왜 오버로딩이 없으며, 대체제는 무엇인지 살펴봅시다.","category":"devlog","title":"파이썬에는 오버로딩이 없다고요?","date":"2025-02-02T18:45:07.000Z","slug":"/devlog/python/2025-02-02-python-and-overloading"}}},{"node":{"fields":{"slug":"/devlog/python/2025-01-19---refactoring-and-design-pattern-in-python//devlog/python/2025-01-19-refactoring-and-design-pattern","categorySlug":"/category/devlog/"},"frontmatter":{"description":"파이썬으로 디자인 패턴과 리팩터링 2판을 읽는 스터디를 시작했습니다. 이를 통해 배운 점을 공유드립니다.","category":"devlog","title":"파이썬으로 살펴보는 디자인 패턴과 리팩터링","date":"2025-01-19T18:57:14.000Z","slug":"/devlog/python/2025-01-19-refactoring-and-design-pattern"}}},{"node":{"fields":{"slug":"/devlog/python/2024-11-24---python-container-101-pt03//devlog/python/2024-11-24-python-container-101-pt03","categorySlug":"/category/devlog/"},"frontmatter":{"description":"파이썬 컨테이너 최적화 기법을 이용하여 CPU bound 작업과 IO bound 작업을 직접 구동해봅니다.","category":"devlog","title":"[연재] 파이썬 컨테이너 선택 제 3형 - 파이썬 컨테이너 실전비교","date":"2024-11-24T23:57:00.000Z","slug":"/devlog/python/2024-11-24-python-container-101-pt03"}}},{"node":{"fields":{"slug":"/devlog/python/2024-10-26---python-container-101-pt02//devlog/python/2024-10-26-python-container-101-pt02","categorySlug":"/category/devlog/"},"frontmatter":{"description":"컨테이너 사이즈 최소화의 필요성과, 최소화 과정 중 파이썬 라이브러리 설치 과정에서의 최적화 제안(PEP 656)을 소개합니다.","category":"devlog","title":"[연재] 파이썬 컨테이너 선택 제 2형 - 파이썬 컨테이너 최적화","date":"2024-10-26T05:08:00.000Z","slug":"/devlog/python/2024-10-26-python-container-101-pt02"}}},{"node":{"fields":{"slug":"/devlog/python/2024-10-13---python-container-101-pt01//devlog/python/2024-10-13-python-container-101-pt01","categorySlug":"/category/devlog/"},"frontmatter":{"description":"컨테이너 기술에 대해 간략히 설명하고, 파이썬 컨테이너는 어떻게 선택할 수 있는지 대해 설명합니다.","category":"devlog","title":"[연재] 파이썬 컨테이너 선택 제 1형 - 컨테이너에 대해","date":"2024-10-13T03:00:00.000Z","slug":"/devlog/python/2024-10-13-python-container-101-pt01"}}},{"node":{"fields":{"slug":"/devlog/backend/2023-03-13---from-servlet-to-spring//devlog/docker/2023-03-13-from-servlet-to-spring","categorySlug":"/category/devlog/"},"frontmatter":{"description":"PEP 333을 보고, 자바 진영의 서블릿과 웹 프레임워크의 금자탑인 스프링 프레임워크 까지 함께 알아보게 되었습니다.","category":"devlog","title":"서블릿부터 스프링 프레임워크까지","date":"2023-03-13T23:00:00.000Z","slug":"/devlog/docker/2023-03-13-from-servlet-to-spring"}}},{"node":{"fields":{"slug":"/books/clean-code/2023-03-06---chatper13//books/clean-code/2023-03-07-pt01","categorySlug":"/category/devlog/"},"frontmatter":{"description":"2023년 1월부터 시작한 클린 코드 독파 스터디 후, 매 모임 전 준비하는 게시글을 공유합니다. 이 글은 13장, 동시성(concurrency)에 대해 알아봅니다.","category":"devlog","title":"클린 코드 스터디 (13): 동시성(Concurrency)","date":"2023-03-07T22:51:00.000Z","slug":"/books/clean-code/2023-03-07-pt01"}}}]}},"pageContext":{"group":"devlog","limit":7,"offset":0,"pagination":{"currentPage":0,"prevPagePath":"/category/devlog","nextPagePath":"/category/devlog/page/1","hasNextPage":true,"hasPrevPage":false}}},"staticQueryHashes":["251939775","357378587","401334301","63107425"]}