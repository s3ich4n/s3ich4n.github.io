{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/devlog/backend/2022-10-05-considering-http-authn-pt02","result":{"data":{"markdownRemark":{"id":"3565b798-cce6-5c64-a6dc-6b8f8dac88b9","html":"<p>이 시리즈에서는 HTTP의 인증(Authentication) 중 일부에 대해 다룹니다.</p>\n<p>이번 글에서는 JWT가 인증에서는 어떻게 쓰이며 인가에서는 어떻게 쓰이는지, JWT를 제대로 이해하고 사용하기 위한 방안에 대해 살펴보겠습니다.</p>\n<h1 id=\"목차\" style=\"position:relative;\"><a href=\"#%EB%AA%A9%EC%B0%A8\" aria-label=\"목차 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>목차</h1>\n<ul>\n<li><a href=\"/devlog/backend/2022-10-05-considering-http-authn-pt01\">HTTP의 인증에 대해 (1)</a></li>\n<li>HTTP의 인증에 대해 (2)</li>\n</ul>\n<h1 id=\"jwt의-사용방안\" style=\"position:relative;\"><a href=\"#jwt%EC%9D%98-%EC%82%AC%EC%9A%A9%EB%B0%A9%EC%95%88\" aria-label=\"jwt의 사용방안 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JWT의 사용방안</h1>\n<p>JWT는 일반적으로 인증, 인가에 필요한 정보를 담는 도구로써 사용됩니다.</p>\n<ul>\n<li>인증서버와 다른 서비스 서버를 각각 분리하여 운용할 수 있습니다(Single sign-on)\n<ul>\n<li>OAuth 2.0 <strong>인가</strong> 용 Bearer Token으로, OpenID Connect(이하 OIDC) <strong>인증</strong> 의 Bearer Token으로 쓰일 수 있습니다.\n<ul>\n<li>OAuth 2.0의 Authorization Code Grant 플로우 중 Access Token과 Refresh Token을 리턴하는 시접에서 이 토큰들을 JWT로 전달할 수 있습니다.\n<ul>\n<li>이 토큰에는 <strong>인가 정보</strong>를 담는 것이 목표입니다. 그런 이유로 이 토큰을 사용하여 <strong>인증으로 오용하지 않아야</strong>합니다. <a href=\"https://oauth.net/articles/authentication/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">관련 링크</a>를 반드시 일독하시길 권장합니다.</li>\n<li>다시말해, OAuth 2.0으로는 권한부여에 집중해야 한다는 의미가 되겠습니다. (상기 관련링크를 누르면 <em>OAuth 2.0 is not an authentication protocol.</em> 이란 말이 바로 나오는군요…)</li>\n</ul>\n</li>\n<li>OIDC는 OAuth 2.0을 통해 만들어진 <strong>인증</strong> 레이어 입니다.\n<ul>\n<li>유저 인증을 위한 값으로 <code class=\"language-text\">id_token</code> 이 추가되었으며, 이 값이 JWT 형식입니다.</li>\n<li>OIDC 의 인증, 인가 시점에서의 다양한 response 대해서는 <a href=\"https://darutk.medium.com/diagrams-of-all-the-openid-connect-flows-6968e3990660\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">이 글</a>을 읽어보시면 좋습니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>OAuth 2.0과 OIDC의 차이점 및 오용방지를 위한 정보에 대해서는 <a href=\"https://gruuuuu.github.io/security/ssofriends/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">이 링크</a>에 정말 자세히 설명되어 있습니다.</li>\n</ul>\n<p>간략히 정리하자면 인증과 인가의 요소로서 JWT 토큰을 전달하여 사용할 수 있습니다. 이런 탓에, 상호간 신뢰할 수 있는 서비스들 간 데이터를 주고받는 식의 시나리오에서는 매우 유용하게 쓰일 수 있지만, 잘못쓰기 매우 쉽다는 단점이 있습니다.</p>\n<h2 id=\"기존-설명들하고-좀-다른데요\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EC%A1%B4-%EC%84%A4%EB%AA%85%EB%93%A4%ED%95%98%EA%B3%A0-%EC%A2%80-%EB%8B%A4%EB%A5%B8%EB%8D%B0%EC%9A%94\" aria-label=\"기존 설명들하고 좀 다른데요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기존 설명들하고 좀 다른데요?</h2>\n<p>사실 그래서 준비했습니다. JWT를 도입하고자 연구할 때, 흔히 맞닥뜨리는 여러 실수들(pitfalls)에 대해 바로잡고, JWT를 보다 상황에 맞도록 쓸 수 있게 논의하려고 합니다.</p>\n<h1 id=\"jwt에-대한-오해를-바로잡읍시다\" style=\"position:relative;\"><a href=\"#jwt%EC%97%90-%EB%8C%80%ED%95%9C-%EC%98%A4%ED%95%B4%EB%A5%BC-%EB%B0%94%EB%A1%9C%EC%9E%A1%EC%9D%8D%EC%8B%9C%EB%8B%A4\" aria-label=\"jwt에 대한 오해를 바로잡읍시다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JWT에 대한 오해를 바로잡읍시다</h1>\n<p>아래와 같은 세션으로 나누어 작성하고자 합니다</p>\n<ol>\n<li>문서 전반에 사용될 개념정리</li>\n<li>JWT에 대한 오해 바로잡기</li>\n<li>JWT를 오해함으로 인해 발생하는 문제</li>\n</ol>\n<h2 id=\"개념정리\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EB%85%90%EC%A0%95%EB%A6%AC\" aria-label=\"개념정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개념정리</h2>\n<p>아래에 걸쳐 사용할 개념정리를 하고 갑시다</p>\n<h3 id=\"개념정리-1-쿠키-vs-jwt를-비교하는게-맞냐\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EB%85%90%EC%A0%95%EB%A6%AC-1-%EC%BF%A0%ED%82%A4-vs-jwt%EB%A5%BC-%EB%B9%84%EA%B5%90%ED%95%98%EB%8A%94%EA%B2%8C-%EB%A7%9E%EB%83%90\" aria-label=\"개념정리 1 쿠키 vs jwt를 비교하는게 맞냐 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개념정리 (1) 쿠키 vs. JWT를 비교하는게 맞냐?</h3>\n<p>세션을 담는 쿠키와 JWT는 비교대상이 아닙니다. 완전 다르기 때문에 둘을 비교하는 것은 의미가 없습니다. 세션과 JWT, 그리고 쿠키와 LocalStorage를 비교하는 것이 의미있습니다.</p>\n<h3 id=\"개념정리-2\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EB%85%90%EC%A0%95%EB%A6%AC-2\" aria-label=\"개념정리 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개념정리 (2)</h3>\n<ul>\n<li>stateless JWT: 세션 데이터가 담긴 JWT 토큰. 인코딩하면 바로 토큰 되는 케이스.</li>\n<li>stateful JWT: 세션을 가리키는 레퍼런스나 ID가 담긴 JWT 토큰. 세션 자체는 서버에 있음 (얘는 암호학적으로 사인되어있어요)</li>\n<li>session token/cookie: 통상의 세션 ID. 여느 웹 프레임워크에 있는 그것을 의미합니다. (얘는 평문이에요)</li>\n<li>LocalStorage\n<ul>\n<li>자바스크립트 API입니다.</li>\n<li>유저가 브라우저에 자바스크립트만 접근가능한 값을 저장할 수 있게 합니다.</li>\n<li>세션 스토리지라고 부르기도 합니다.</li>\n<li>쿠키를 사용해 세션 데이터를 저장하는 것의 대체제로 많이 인식되지요.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"jwt에-대한-오해\" style=\"position:relative;\"><a href=\"#jwt%EC%97%90-%EB%8C%80%ED%95%9C-%EC%98%A4%ED%95%B4\" aria-label=\"jwt에 대한 오해 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JWT에 대한 오해</h2>\n<p>인터넷에 흔히 JWT로 로그인하는 방식을 구현하는 게시글은 아래와 같이 작성되어 있습니다.</p>\n<ol>\n<li>credential 정보를 가지고 로그인한다.</li>\n<li>credential 정보가 유효한지 확인하고 JWT 토큰을 생성한다</li>\n<li>JWT를 담고 리턴한다.</li>\n<li>브라우저는 JWT를 LocalStorage에 저장한다.</li>\n<li>위에 저장한 토큰을 꺼내와서 다음 요청에 사용한다.</li>\n</ol>\n<p>이거 지난 장에서 살펴보던 쿠키와 세션을 이용한 인증방식과 매우 유사하네요 그리고 이러한 방식으로 JWT를 사용했을 때 생기는 함정이(pitfall) 있습니다.</p>\n<h3 id=\"훨씬-유연하다\" style=\"position:relative;\"><a href=\"#%ED%9B%A8%EC%94%AC-%EC%9C%A0%EC%97%B0%ED%95%98%EB%8B%A4\" aria-label=\"훨씬 유연하다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>훨씬 유연하다?</h3>\n<p>세션 쿠키를 사용하더라도 똑같이 커스텀 필드를 넣을 수 있습니다. Private Claim names를 쓰는 것 처럼요.</p>\n<h3 id=\"스케일-아웃이-쉽다\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%EC%BC%80%EC%9D%BC-%EC%95%84%EC%9B%83%EC%9D%B4-%EC%89%BD%EB%8B%A4\" aria-label=\"스케일 아웃이 쉽다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스케일-아웃이 쉽다?</h3>\n<ul>\n<li>외부 DB가 별도로 필요없긴 합니다. 이미 정보를 담고있으니까요. 하지만,\nstateful JWT에는 적용하기 어렵습니다. 세션 자체가 서버에 있으니, 여전히 DB 호출을 해야합니다.</li>\n<li>로그인해서 받아오는 stateful 세션을 쓴다고 해도 스케일-아웃이 가능합니다.\n<ul>\n<li>매번 세션 검증을 해야하는 속도를 올리려면? → 캐시를 둡니다.</li>\n<li>여러 서버, 여러 클러스터에 대해서도 적용하려면? → sticky session이나 dedicated session storage 확보와 스토리지 클러스터링 등을 통해 얻을 수 있습니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"쓰기-쉽다\" style=\"position:relative;\"><a href=\"#%EC%93%B0%EA%B8%B0-%EC%89%BD%EB%8B%A4\" aria-label=\"쓰기 쉽다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>쓰기 쉽다?</h3>\n<ul>\n<li>글쎄요. 앞단 뒷단 모두 JWT 토큰을 가공하고 사용하는 것, 세션 스토리지에 접근하거나 세션을 관리하고 주는 것 모두 필요합니다.</li>\n<li>JWT 외부 라이브러리를 쓰는 것 만큼, 이미 오랜기간동안 수많은 웹 프레임워크에서 증명되었고 장고에서도 <a href=\"https://docs.djangoproject.com/en/4.1/topics/http/sessions/#using-sessions-in-views\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">쓰기 쉽게 구현</a> 되어있습니다.</li>\n</ul>\n<h3 id=\"만료기간을-정해줄-수-있다\" style=\"position:relative;\"><a href=\"#%EB%A7%8C%EB%A3%8C%EA%B8%B0%EA%B0%84%EC%9D%84-%EC%A0%95%ED%95%B4%EC%A4%84-%EC%88%98-%EC%9E%88%EB%8B%A4\" aria-label=\"만료기간을 정해줄 수 있다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>만료기간을 정해줄 수 있다?</h3>\n<ul>\n<li>세션도 충분히 가능합니다. 위에 첨부한 링크에서 <a href=\"https://docs.djangoproject.com/en/4.1/topics/http/sessions/#django.contrib.sessions.backends.base.SessionBase.set_expiry\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">set_expiry(value)</code> 함수</a> 가 정확히 그 역할을 합니다.\n<ul>\n<li>세션 관련 <a href=\"https://docs.djangoproject.com/en/4.1/ref/settings/#sessions\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">변수들</a>도 눈여겨 봐야겠죠.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"보안이-강화되어있다\" style=\"position:relative;\"><a href=\"#%EB%B3%B4%EC%95%88%EC%9D%B4-%EA%B0%95%ED%99%94%EB%90%98%EC%96%B4%EC%9E%88%EB%8B%A4\" aria-label=\"보안이 강화되어있다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>보안이 강화되어있다?</h3>\n<ul>\n<li>\n<p>아니오, 암호화된 서명을 한다고 해서 보안이 강화되는 것은 아닙니다.</p>\n</li>\n<li>\n<p>먼저, HTTPS 통신으로 메시지 자체를 못 보게 하는 것이 우선입니다.</p>\n</li>\n<li>\n<p>쿠키에 제한을 걸어 자바스크립트 코드가 함부로 사용하지 못하게 하는 것이 방법입니다.</p>\n</li>\n<li>\n<p><code class=\"language-text\">CSRF</code>를 웹 프레임워크 수준에서 방어하고, 프론트엔드 파트에 <code class=\"language-text\">XSS</code>를 방어하도록 하는 로직을 작성하도록 요청하는 것이 그 다음입니다.</p>\n</li>\n</ul>\n<h2 id=\"jwt를-오해하면-이런-문제가-생깁니다\" style=\"position:relative;\"><a href=\"#jwt%EB%A5%BC-%EC%98%A4%ED%95%B4%ED%95%98%EB%A9%B4-%EC%9D%B4%EB%9F%B0-%EB%AC%B8%EC%A0%9C%EA%B0%80-%EC%83%9D%EA%B9%81%EB%8B%88%EB%8B%A4\" aria-label=\"jwt를 오해하면 이런 문제가 생깁니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JWT를 오해하면 이런 문제가 생깁니다!</h2>\n<h3 id=\"용량이-훨씬-커진다\" style=\"position:relative;\"><a href=\"#%EC%9A%A9%EB%9F%89%EC%9D%B4-%ED%9B%A8%EC%94%AC-%EC%BB%A4%EC%A7%84%EB%8B%A4\" aria-label=\"용량이 훨씬 커진다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>용량이 훨씬 커진다</h3>\n<ul>\n<li>JWT는 기본적으로 크기가 큽니다. 커스텀 필드를 조금 넣었다 하면, 세션보다 훨씬 커집니다.</li>\n<li>세션이 단순히 32bit의 문자열이라면, JWT는 못해도 그 10배 이상입니다.</li>\n</ul>\n<h3 id=\"로그아웃-기능이-사실상-없다\" style=\"position:relative;\"><a href=\"#%EB%A1%9C%EA%B7%B8%EC%95%84%EC%9B%83-%EA%B8%B0%EB%8A%A5%EC%9D%B4-%EC%82%AC%EC%8B%A4%EC%83%81-%EC%97%86%EB%8B%A4\" aria-label=\"로그아웃 기능이 사실상 없다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>로그아웃 기능이 사실상 “없다”</h3>\n<ul>\n<li>\n<p>만료기간 전까지는 사실상 로그아웃 기능이 없다고 봐야합니다. 그리하여 이를 관리하기 위해 revocation list(일종의 만료 세션 리스트)를 따로 관리하면 될텐데, 그러면 기존의 세션 관리와 다를게 없지요. 게다가 용량이 훨씬 큰 토큰이 bandwidth를 잡아먹습니다.</p>\n</li>\n<li>\n<p>그리하여 이런 해결책 또한 제기되었습니다[1]:</p>\n<ol>\n<li>특정 로그아웃 콜을 받으면, 만료기간 전에 revoke 시킨 토큰의 글로벌 리스트를 갖고있습니다.</li>\n<li>로그인 관련 서버가 매븐 해당 리스트에 대해 요청/응답 하지 않고 각 비즈니스 서버에 pub/sub 메커니즘을 통해서 즉각 처리하도록 합니다.</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"jwt-스펙-오용abuse으로-인한-보안-취약점\" style=\"position:relative;\"><a href=\"#jwt-%EC%8A%A4%ED%8E%99-%EC%98%A4%EC%9A%A9abuse%EC%9C%BC%EB%A1%9C-%EC%9D%B8%ED%95%9C-%EB%B3%B4%EC%95%88-%EC%B7%A8%EC%95%BD%EC%A0%90\" aria-label=\"jwt 스펙 오용abuse으로 인한 보안 취약점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JWT 스펙 오용(abuse)으로 인한 보안 취약점</h3>\n<ul>\n<li>설정이 잘못되면 아무나 JWT 토큰을 생성할 수 있고, 유저가 다른 유저인 척 하는게 가능합니다.</li>\n<li>Auth0에는 <a href=\"https://insomniasec.com/blog/auth0-jwt-validation-bypass\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JWT Validation bypass</a> 과 같이, 권한을 무시하고 요청할 수 있는 버그가 있었습니다.</li>\n<li>그 외에도 <a href=\"https://infosecwriteups.com/attacks-on-json-web-token-jwt-278a49a1ad2e\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JWT의 각종 취약점</a>에 대한 글을 소개드립니다.</li>\n</ul>\n<h2 id=\"정리해보면\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC%ED%95%B4%EB%B3%B4%EB%A9%B4\" aria-label=\"정리해보면 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리해보면?</h2>\n<ul>\n<li>JWT는 일회용 인증 토큰(single-use authorization token) 으로 쓰는 편이 좋겠습니다.</li>\n<li>JWT 스펙을 살펴보면 다음과 같은 글귀가 나옵니다.</li>\n</ul>\n<blockquote>\n<p>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.\n(두 당사자 간에 전송되는 클레임을 나타내는 간결한 URL 안전 수단입니다.)</p>\n<p>[…] enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.\n(디지털 서명하거나 MAC(메시지 인증 코드) 또는 암호화된 무결성 보호를 가능하게 합니다.)</p>\n</blockquote>\n<ul>\n<li>다시말해 “claim”은 마치 명령처럼, 이것 할 수 있다던데 하는 일회성 식별표 정도로 인식하면 될 것 입니다. 그리고 암호화된 서명도 함께요.</li>\n<li>그런 의미로 제가 참고한 모든 글들을 공통적으로 살펴보면, 세션과 JWT 토큰을 병행해서 쓰거나 각각 용도에 맞게 쓰는 것이 좋겠습니다.</li>\n<li>제 생각에는 유저 간의 로그인은 세션으로 처리하고, 목표에 따라 잘 분리 된 API 서버간의 통신에서 JWT를 활용하는 것이 어떨까 싶습니다. 예를 들면 다음과 같겠습니다:\n<ol>\n<li>서버-서버 간 JWT를 담고 필요한 요청-응답을 수행해야 한다면 이는 충분히 말이되는 내용이다.</li>\n<li>예를들어 SPA(Single-page Application) 에서 이것저것 많은 API를 호출해야 하고, 그 권한을 토큰을 통해 관리한다면 훨씬 효율적일 것으로 보입니다.</li>\n</ol>\n</li>\n</ul>\n<p>그 정도로 큰 서비스에 대해 다루게 될 때를 위해, 다음번엔 OAuth 2.0과 OIDC 및 <a href=\"https://en.wikipedia.org/wiki/Federated_identity\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Fedarated identity</a>와 같은 키워드를 알아보는 글을 작성해보겠습니다.</p>\n<h1 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h1>\n<p>이번 글을 통해, 아래 내용들을 살펴볼 수 있었습니다:</p>\n<ol>\n<li>JWT를 세션 쿠키처럼 사용하면 아래와 같은 문제가 생깁니다.\n<ol>\n<li>좋은 줄 알았던 점은 사실 세션으로도 처리가 가능했습니다.</li>\n<li>JWT를 잘못 사용함으로 인한 문제를 해결하기 위한 사이드 이펙트가 있었습니다.</li>\n</ol>\n</li>\n<li>쉽게 구할 수 있고, 장점<strong>만</strong> 보인다는 이유로 이해없이 기술을 사용하지 맙시다. 정말 위합니다. 보안과 기능의 장단점과 잠재적 문제사항을 모두 알고 있어야 합니다.‘보일러플레이트’ 및 템플릿에서 제외하고 기본 선택으로 만들지 마십시오.</li>\n<li>기술을 잘못 쓰지 않도록, 많은 케이스를 배워둡시다. 필요와 적절한 요구사항에 따라 기술을 택해야겠습니다.</li>\n</ol>\n<p>읽어주셔서 감사합니다.</p>\n<hr>\n<ul>\n<li>References\n<ul>\n<li>[1] <a href=\"https://evertpot.com/jwt-is-a-bad-default/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">sidenotes 항목</a> 참조</li>\n<li>[2] <a href=\"https://developer.okta.com/blog/2017/08/17/why-jwts-suck-as-session-tokens\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">링크참조</a></li>\n<li>[3] <a href=\"http://cryto.net/~joepie91/blog/2016/06/13/stop-using-jwt-for-sessions/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">링크참조</a></li>\n<li>[4] <a href=\"https://redis.com/blog/json-web-tokens-jwt-are-dangerous-for-user-sessions/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">링크참조</a></li>\n<li>[5] <a href=\"https://www.youtube.com/watch?v=GdJ0wFi1Jyo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">링크참조</a></li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/devlog/backend/2022-10-05---considering-http-authn-pt02//devlog/backend/2022-10-05-considering-http-authn-pt02","tagSlugs":["/tag/backend/"]},"frontmatter":{"date":"2022-10-05T22:52:00.000Z","description":"JWT의 사용방안과, 세션 쿠키처럼 사용하는 JWT 토큰 사용방식이 과연 타당한 쓰임새인지 살펴봅시다.","tags":["backend"],"title":"HTTP의 인증에 대해 (2) 인증으로 JWT를 쓰는게 맞나?","socialImage":{"publicURL":{"publicURL":"/static/dea51fa8699a4271ec9f6c743a646182/domado.jpg"}}}}},"pageContext":{"slug":"/devlog/backend/2022-10-05---considering-http-authn-pt02//devlog/backend/2022-10-05-considering-http-authn-pt02"}},"staticQueryHashes":["251939775","357378587","401334301"]}