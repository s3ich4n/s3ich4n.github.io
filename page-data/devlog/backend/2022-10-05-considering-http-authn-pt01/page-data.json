{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/devlog/backend/2022-10-05-considering-http-authn-pt01","result":{"data":{"markdownRemark":{"id":"a83b5d82-53a4-5ed9-93dc-9067f8e6aac1","html":"<p>이 시리즈에서는 HTTP의 인증(Authentication)에 대해 다룹니다.</p>\n<p>이번 글에서는 HTTP의 인증이 어떤 방식으로 발전되어 왔으며, JWT가 뭐고 무엇인지를 다루도록 하겠습니다.</p>\n<h1 id=\"목차\" style=\"position:relative;\"><a href=\"#%EB%AA%A9%EC%B0%A8\" aria-label=\"목차 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>목차</h1>\n<ul>\n<li>HTTP의 인증에 대해 (1)</li>\n<li><a href=\"/devlog/backend/2022-10-05-considering-http-authn-pt02\">HTTP의 인증에 대해 (2)</a></li>\n</ul>\n<h1 id=\"인증authentication과-인가authorization\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EC%A6%9Dauthentication%EA%B3%BC-%EC%9D%B8%EA%B0%80authorization\" aria-label=\"인증authentication과 인가authorization permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인증(Authentication)과 인가(Authorization)?</h1>\n<p>헷갈리기 쉬운 인증과 인가부터 짚고 넘어가도록 하겠습니다.</p>\n<ul>\n<li>\n<p>인증</p>\n<ul>\n<li>서버가 유저에게, “리소스에 접근하는 당신이 누구십니까?”를 물어볼 수 있도록 하는 과정입니다. 쉽게말해 열쇠로 문을 여는 것이죠.</li>\n<li>유저가 인증을 하면, 서버는 “이 유저가 정말 맞는지” 감별합니다.</li>\n<li>유저가 인증에 성공했다면 <code class=\"language-text\">2xx</code> 응답을, 실패했다면 <code class=\"language-text\">4xx</code> 응답을 받을 것입니다.</li>\n</ul>\n</li>\n<li>\n<p>인가</p>\n<ul>\n<li>서버가 유저에게, “리소스에 당신이 무엇을 할 수 있습니까?”를 물어볼 수 있도록 하는 과정입니다. 쉽게말해 권한부여 입니다.</li>\n<li>유저가 인가를 거쳐 리소스에 “요청”을 수행하면, 서버는 “이 유저가 할 수 있는 요청”인지 감별합니다</li>\n<li>유저의 권한이 올바르다면 <code class=\"language-text\">2xx</code> 응답을, 올바르지 않다면 <code class=\"language-text\">4xx</code> 응답을 받을 것입니다.</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"1-http의-초창기-인증\" style=\"position:relative;\"><a href=\"#1-http%EC%9D%98-%EC%B4%88%EC%B0%BD%EA%B8%B0-%EC%9D%B8%EC%A6%9D\" aria-label=\"1 http의 초창기 인증 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. HTTP의 초창기 인증</h1>\n<p>데이터를 받아보는 당신이 누구인지를 묻는 요구사항은 HTTP/1.0 스펙부터 등장하였습니다[1]. 1996년부터 등장했고 현재는 사용하지 않습니다. 다만 어떤식으로 발전했는지를 살펴봅시다.</p>\n<h2 id=\"basic-인증\" style=\"position:relative;\"><a href=\"#basic-%EC%9D%B8%EC%A6%9D\" aria-label=\"basic 인증 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">BASIC</code> 인증</h2>\n<ul>\n<li>유저명과 패스워드를 <code class=\"language-text\">base64(유저명 + \":\" + 패스워드)</code>로 인코딩하여 아래와 같은 방식으로 헤더에 추가합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Authorization: \"Basic dXNlcjpwYXNz\"</code></pre></div>\n<h2 id=\"digest-인증\" style=\"position:relative;\"><a href=\"#digest-%EC%9D%B8%EC%A6%9D\" aria-label=\"digest 인증 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">Digest</code> 인증</h2>\n<ul>\n<li>먼저 <code class=\"language-text\">401</code> 응답으로 거부를 받은 후, 거기서 얻은 정보를 가지고 재요청을 하는 것이 특징입니다.</li>\n<li>공통된 해시 함수를 이용하여 서버와 유저 모두 인증에 필요한 값을 연산하여 “인증”을 수행합니다.</li>\n<li>과정은 아래와 같습니다.</li>\n</ul>\n<ol>\n<li>\n<p>보호된 영역에 접속하려할 때, <code class=\"language-text\">401 Unauthorized</code>를 받고, 서버로부터 특정 값을 받습니다(<code class=\"language-text\">handle_401</code> 호출).</p>\n<ol>\n<li><code class=\"language-text\">WWW-Authenticate: Digest realm=\"영역명\", nonce=\"임의의값\", algorithm=\"알고리즘명\", qop=\"auth\"</code>\n<ol>\n<li>접근하고자 하는 영역(<code class=\"language-text\">realm</code>)</li>\n<li>서버에서 무작위로 생성하는 데이터(<code class=\"language-text\">nonce</code>)</li>\n<li>서버의 보호수준 (<code class=\"language-text\">qop</code>)</li>\n<li><code class=\"language-text\">nonce</code>를 통해 호출한 횟수 (<code class=\"language-text\">nc</code>)</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>유저는(사실은 유저의 클라이언트죠) <code class=\"language-text\">A1</code>, <code class=\"language-text\">A2</code>와, 무작위로 생성한 <code class=\"language-text\">cnonce</code> 라는 값을 토대로 <code class=\"language-text\">response</code>를 계산합니다(<code class=\"language-text\">build_digest_header</code>).</p>\n<ol>\n<li><code class=\"language-text\">A1</code>: 유저명 ”:” realm ”:” 패스워드</li>\n<li><code class=\"language-text\">A2</code>: HTTP 메소드 ”:” 컨텐츠 URI</li>\n<li><code class=\"language-text\">response</code>: MD5(MD5(<code class=\"language-text\">A1</code>) ”:” nonce ”:” nc ”:” cnonce ”:” qop ”:” MD5(<code class=\"language-text\">A2</code>))</li>\n</ol>\n</li>\n<li>\n<p>서버측은 자신이 가진 유저명/패스워드와 위 과정에서 받은 정보를 가지고 “동일한”response를 계산하게 되면, 인증에 성공하게 됩니다.</p>\n</li>\n</ol>\n<h2 id=\"옛-인증의-한계점\" style=\"position:relative;\"><a href=\"#%EC%98%9B-%EC%9D%B8%EC%A6%9D%EC%9D%98-%ED%95%9C%EA%B3%84%EC%A0%90\" aria-label=\"옛 인증의 한계점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>옛 인증의 한계점</h2>\n<p>이런 인증을 현대에 대응하기에는 무리가 있습니다. 이유는 아래와 같습니다.</p>\n<ol>\n<li>요청/응답마다 매번 연산하는 것이 부담입니다.</li>\n<li>로그인 화면을 사용자화 하기 어렵습니다.</li>\n<li>명시적 로그오프 명령을 내리기 어렵습니다.</li>\n<li>로그인한 유저를 식별할 수 없습니다.</li>\n</ol>\n<p>이러한 사항 때문에, <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">HTML의 <code class=\"language-text\">Form</code></a>을 이용한 로그인과, 쿠키를 이용한 세션관리 조합으로 발달되게 되었습니다.</p>\n<h1 id=\"2-쿠키와-세션을-사용한-인증\" style=\"position:relative;\"><a href=\"#2-%EC%BF%A0%ED%82%A4%EC%99%80-%EC%84%B8%EC%85%98%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%9C-%EC%9D%B8%EC%A6%9D\" aria-label=\"2 쿠키와 세션을 사용한 인증 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 쿠키와 세션을 사용한 인증</h1>\n<p>현대에까지 널리 사용되고 있는 브라우저 쿠키와 세션을 통한 인증이 있곘습니다. 아래에서 기본적인 개념을 살펴보겠습니다.</p>\n<h2 id=\"쿠키와-세션을-이용한-인증\" style=\"position:relative;\"><a href=\"#%EC%BF%A0%ED%82%A4%EC%99%80-%EC%84%B8%EC%85%98%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%9D%B8%EC%A6%9D\" aria-label=\"쿠키와 세션을 이용한 인증 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>쿠키와 세션을 이용한 인증</h2>\n<ul>\n<li>유저는 Form을 통해 ID와 비밀전호를 직접 전송합니다.\n<ul>\n<li>이 탓에 SSL/TLS가 필수입니다.</li>\n<li>보안 통신을 통해 HTTP 요청/응답을 주고받는 것은 HTTP/1.1 스펙부터 등장했습니다.</li>\n</ul>\n</li>\n<li>서버는 인증 후 문제가 없으면 세션 토큰을 발행해두고 자신의 데이터베이스에 저장합니다(장고에서의 방안은 아래에 후술합니다).\n<ul>\n<li>이 때, 관련 토큰을 쿠키에 저장하도록 유저(클라이언트)에게 값을 돌려줍니다.</li>\n<li>이런 쿠키 사용에는 제약이 걸려있습니다.</li>\n<li>쿠키도 평문으로 갈 수 있고, 원칙상 유저가 쿠키를 변조해서 보낼 수도 있습니다(!)</li>\n<li>따라서 쿠키 사용에는 아래와 같은 제약이 걸릴 수 있지요.\n<ul>\n<li>쿠키의 수명을 결정하기(<code class=\"language-text\">Expires</code>, <code class=\"language-text\">Max-Age</code> 속성)</li>\n<li>유저가 쿠키를 전송할 대상 서버 (<code class=\"language-text\">Domain</code> 속성)</li>\n<li>유저가 쿠키를 전송할 대상 서버의 경로 (<code class=\"language-text\">Path</code> 속성)</li>\n<li><code class=\"language-text\">HTTPS</code> 를 통한 접속일 때만 서버로 쿠키를 전송 (<code class=\"language-text\">Secure</code> 속성)</li>\n<li>자바스크립트 엔진으로부터 쿠키를 감추는 속성을 추가 (<code class=\"language-text\">HttpOnly</code> 속성)</li>\n<li>(Chrome 브라우저 추가스펙) 동일한 Origin의 도메인에만 전송(<code class=\"language-text\">SameSite</code> 속성, 비표준입니다!)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>인증을 마쳤으므로, 이후 쿠키를 재전송하고 서버에서는 “서명”을 확인하여 클라이언트를 재확인하며 서비스합니다. (인가는 그 다음 이야기겠지요.)</li>\n</ul>\n<h2 id=\"장고에서는\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EA%B3%A0%EC%97%90%EC%84%9C%EB%8A%94\" aria-label=\"장고에서는 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장고에서는?</h2>\n<p>여러 방법이 있겠습니다만, <a href=\"https://docs.djangoproject.com/en/4.1/topics/http/sessions/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">장고에서 세션을 활용하는 방안</a>은 여러가지가 있습니다.</p>\n<p>세션을 어떤 식으로 관리할지에 대한 설정은 아래와 같습니다:</p>\n<ul>\n<li>Database-backend 세션관리</li>\n<li>Cached 세션관리</li>\n<li>file-based 세션관리</li>\n<li>cookie-based 세션관리</li>\n</ul>\n<h2 id=\"django-rest-framework-에서는\" style=\"position:relative;\"><a href=\"#django-rest-framework-%EC%97%90%EC%84%9C%EB%8A%94\" aria-label=\"django rest framework 에서는 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Django REST Framework 에서는?</h2>\n<ul>\n<li><a href=\"https://www.django-rest-framework.org/api-guide/authentication/#sessionauthentication\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">SessionAuthentication</a> 을 통해 구현됩니다. 이 값을 사용하면 장고 설정 내의 기본 세션정보(위의 4가지 방법 중 하나)를 따라갑니다. 필요에 따라 상기 장고에서의 설정값을 확실히 알아둬야 올바르게 쓸 수 있을 것입니다.</li>\n</ul>\n<h1 id=\"3-jwtjson-web-token의-등장\" style=\"position:relative;\"><a href=\"#3-jwtjson-web-token%EC%9D%98-%EB%93%B1%EC%9E%A5\" aria-label=\"3 jwtjson web token의 등장 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. JWT(JSON Web Token)의 등장</h1>\n<p>이어서 JWT입니다. 우선은 간략하게 JWT가 무엇인지 살펴보겠습니다.</p>\n<h2 id=\"jwt란\" style=\"position:relative;\"><a href=\"#jwt%EB%9E%80\" aria-label=\"jwt란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JWT란?</h2>\n<p>JSON Web Token(JWT)는 2010년 10월 28일, 처음 발표되었습니다. 간략한 정보는 아래와 같습니다.</p>\n<ul>\n<li><a href=\"https://datatracker.ietf.org/doc/html/rfc7519\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">RFC 7519</a> 로 발표된 proposed Internet standard 입니다.</li>\n<li>JSON을 상호간 안전하게 교환하려는 체계로써 제시된 토큰이지요(중요!)</li>\n<li>claim이란 값을 가진 JSON 페이로드와, 시그니처 데이터를 생성합니다.</li>\n<li>이 토큰은 공개키/비밀키(RSA나 ECDSA 등)로 열고 잠그거나, shared secrets값(HAMC)을 통해 열고 잠글 수 있습니다.</li>\n</ul>\n<p>소개는 이쯤하고, 구조를 먼저 살펴본 후 사용례를 살펴봅시다.</p>\n<h2 id=\"구조\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%EC%A1%B0\" aria-label=\"구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구조</h2>\n<p>JWT의 구조를 살펴봅시다. JWT는 헤더.페이로드.시그니처 의 세 부분으로 구성됩니다. <code class=\"language-text\">.</code>은 구분자로 사용됩니다.</p>\n<p>JWT는 이런 모양을 가집니다.</p>\n<p><code class=\"language-text\">aaaaa.bbbbb.ccccc</code></p>\n<p>보다 정확한 스펙은 상술한 RFC 문서를 참고해주세요.</p>\n<h3 id=\"헤더\" style=\"position:relative;\"><a href=\"#%ED%97%A4%EB%8D%94\" aria-label=\"헤더 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>헤더</h3>\n<ul>\n<li>\n<p>두 가지 값을 가집니다.</p>\n<ul>\n<li>알고리즘: 시그니처가 어떤 알고리즘으로 생성되었는지 식별합니다. 예를 들어 <code class=\"language-text\">HS256</code> 이라는 값은, <code class=\"language-text\">HMAC-SHA256</code>을 사용하여 이 토큰을 생성하였음을 의미합니다. 통상적으로 사용할 수 있는 알고리즘은 <a href=\"https://datatracker.ietf.org/doc/html/draft-ietf-jose-json-web-algorithms-40\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">이 링크</a>를 참고해주세요.</li>\n<li>타입: <code class=\"language-text\">JWT</code> 를 사용하거나 스펙에 맞게 사용합니다.</li>\n</ul>\n</li>\n<li>\n<p>아래와 같은 모양으로 생겼습니다.</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n  \"alg\": \"HS256\",\n  \"typ\": \"JWT\"\n}</code></pre></div>\n<h3 id=\"페이로드\" style=\"position:relative;\"><a href=\"#%ED%8E%98%EC%9D%B4%EB%A1%9C%EB%93%9C\" aria-label=\"페이로드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>페이로드</h3>\n<ul>\n<li><code class=\"language-text\">claim</code>의 모임입니다. 클레임은 크게 세 종류로 나눌 수 있습니다.\n<ul>\n<li>Registered Claim names\n<ul>\n<li>JWT 설계자들이 일반적으로 담아서 쓸만한 값들을 미리 정의한 값입니다. 아래와 같습니다\n<ul>\n<li><code class=\"language-text\">iss</code>: 누가 이 토큰을 발급했는지를 표기합니다.</li>\n<li><code class=\"language-text\">exp</code>: 만기 시간을 기재합니다. (단위: miliseconds가 반영된 Epoch time)</li>\n<li><code class=\"language-text\">sub</code>: 토큰의 발급 목적을 의미합니다.</li>\n<li><code class=\"language-text\">aud</code>: 토큰을 받는 사람을 의미합니다.</li>\n<li><code class=\"language-text\">nbf</code>: 연산의 이유로 이 시간 전에는 토큰이 유효하지 않다는 시간을 의미합니다. (단위: miliseconds가 반영된 Epoch time)</li>\n<li><code class=\"language-text\">iat</code>: 언제 이 토큰이 발급되었는지를 의미합니다.</li>\n<li><code class=\"language-text\">jti</code>: JWT 토큰의 고유ID 입니다. 중복되지 않는 값으로 생성시켜야 합니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Public Claim names\n<ul>\n<li><a href=\"https://www.iana.org/assignments/jwt/jwt.xhtml\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">IANA JWT 레지스트리</a>에 정의되거나 중복 방지 등의 이유로 URI로 지정되기도 합니다.</li>\n</ul>\n</li>\n<li>Private Claim names\n<ul>\n<li>말 그대로인 커스텀 클레임 값입니다. 상기 클레임들과 중복되지 않는 값입니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>상기 클레임 값들을 필요에 따라 넣어서 사용할 수 있습니다. registered clame name에 속한 값을 반드시 사용하도록 강제되진 않으나, 해당 의미를 가지는 값이라면 기재된 이름을 쓰면 됩니다.</li>\n</ul>\n<p>(!) claim: JWT에 의해 전달된 개별 값들이 구성원인 JSON 개체를 나타냅니다.</p>\n<ul>\n<li>아래와 같은 모양으로 생겼습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n  \"sub\": \"1\",\n  \"name\": \"s3ich4n\",\n  \"admin\": false\n}</code></pre></div>\n<h3 id=\"시그니처\" style=\"position:relative;\"><a href=\"#%EC%8B%9C%EA%B7%B8%EB%8B%88%EC%B2%98\" aria-label=\"시그니처 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>시그니처</h3>\n<p>토큰이 유효한지 검증합니다. 시그니처는 <a href=\"https://datatracker.ietf.org/doc/html/rfc4648\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">RFC 4648(Base64Url)</a>을 사용하여 헤더와 페이로드를 인코딩하기위해 계산됩니다. 그리고 구분자 <code class=\"language-text\">.</code>을 이용하여 둘을(헤더, 페이로드) 합칩니다. 이후 공개키/비밀키(RSA나 ECDSA 등)나 shared secrets값(HAMC)을 통해 시그니처를 생성합니다.</p>\n<p>예를들어 HMAC SHA-256 알고리즘을 사용한다면, 시그니처는 아래와 같이 생성됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">HMAC_SHA256(\n  secret,\n  base64UrlEncode(header) + \".\" +\n  base64UrlEncode(payload)\n)</code></pre></div>\n<h3 id=\"세-값을-모두-합치면\" style=\"position:relative;\"><a href=\"#%EC%84%B8-%EA%B0%92%EC%9D%84-%EB%AA%A8%EB%91%90-%ED%95%A9%EC%B9%98%EB%A9%B4\" aria-label=\"세 값을 모두 합치면 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>세 값을 모두 합치면?</h3>\n<p>이런 모양이 나옵니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsb2dnZWRJbkFzIjoiYWRtaW4iLCJpYXQiOjE0MjI3Nzk2Mzh9.gzSraSYS8EXBxLN_oWnFSRgCzcmJmMjLiuyu5CSpyHI</code></pre></div>\n<h1 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h1>\n<p>이번 글을 통해, 아래 내용들을 살펴볼 수 있었습니다:</p>\n<ol>\n<li>HTTP 상에서의 인증에 대해 Basic 부터 쿠키와 세션, JWT에 이르기까지를 간략히 살펴볼 수 있었습니다.</li>\n<li>JWT가 무슨 목적으로 만들어졌으며, 어떤 구조로 이루어져 있는지 간략히 알 수 있었습니다.</li>\n</ol>\n<p>다음 글에서는 JWT가 어떤식으로 인증(및 인가)에 쓰이게 되는지, JWT의 특성을 오해하고 잘못 사용중인건 아닌지 살펴보겠습니다.</p>\n<p>읽어주셔서 감사합니다.</p>\n<hr>\n<ul>\n<li>References\n<ul>\n<li>[1] <a href=\"https://www.w3.org/Protocols/HTTP/1.0/spec.html#BasicAA\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">해당 링크</a>를 참고해주세요.</li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/devlog/backend/2022-10-05---considering-http-authn-pt01//devlog/backend/2022-10-05-considering-http-authn-pt01","tagSlugs":["/tag/web/","/tag/backend/"]},"frontmatter":{"date":"2022-10-05T22:51:00.000Z","description":"HTTP 기본 스펙을 이용한 기초적 인증부터 쿠키와 세션을, 그리고 갑자기 들불처럼 등장한 JWT이 뭔지까지만 살펴봅니다.","tags":["web","backend"],"title":"HTTP의 인증에 대해 (1) 인증의 발전사","socialImage":{"publicURL":{"publicURL":"/static/dea51fa8699a4271ec9f6c743a646182/domado.jpg"}}}}},"pageContext":{"slug":"/devlog/backend/2022-10-05---considering-http-authn-pt01//devlog/backend/2022-10-05-considering-http-authn-pt01"}},"staticQueryHashes":["251939775","357378587","401334301"]}