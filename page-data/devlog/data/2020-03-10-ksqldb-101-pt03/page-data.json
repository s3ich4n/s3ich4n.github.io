{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/devlog/data/2020-03-10-ksqldb-101-pt03","result":{"data":{"markdownRemark":{"id":"8afb912b-a099-558b-97df-97bd6e9732f0","html":"<p>이 글은 <code class=\"language-text\">ksqlDB</code>(당시에는 <code class=\"language-text\">KSQL</code>이라는 명칭이었습니다)를 학습하기 위해 정리한 연재글입니다.</p>\n<p>이 글의 순서는 아래와 같습니다.</p>\n<h1 id=\"목차\" style=\"position:relative;\"><a href=\"#%EB%AA%A9%EC%B0%A8\" aria-label=\"목차 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>목차</h1>\n<ol>\n<li><a href=\"https://blog.s3ich4n.me/devlog/data/2020-02-05-ksqldb-101-pt01\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">part 1. 배경지식</a></li>\n<li><a href=\"https://blog.s3ich4n.me/devlog/data/2020-02-17-ksqldb-101-pt02\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">part 2. Kafka Streams에 대해</a></li>\n<li>part 3. 실전 예시: 오픈소스를 통해 살펴보는 실시간 보안 이벤트 탐지 룰</li>\n</ol>\n<h1 id=\"3-ksqldb란\" style=\"position:relative;\"><a href=\"#3-ksqldb%EB%9E%80\" aria-label=\"3 ksqldb란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. ksqlDB란?</h1>\n<ul>\n<li>\n<p>카프카를 위한 Streaming SQL engine이며, Kafka Stream 기반으로 만들어졌습니다.</p>\n</li>\n<li>\n<p>파트 2에 언급한 해당 개념 또한 모두 SQL 쿼리로 수행할 수 있습니다:</p>\n<ul>\n<li>stateless processing(<code class=\"language-text\">Filtering</code>, <code class=\"language-text\">Mapping</code>의 개념)</li>\n<li>stateful processing(<code class=\"language-text\">JOIN</code>, <code class=\"language-text\">Aggregation</code>의 개념),\n<ul>\n<li>여러개의 스트림에 대해 실시간으로 JOIN 연산을 수행할 수도 있습니다.</li>\n</ul>\n</li>\n<li>windowing operations 를 지원합니다(<code class=\"language-text\">WINDOW TUMBLING</code>, 정의한 이상행위가 발생했다면 새로운 토픽에 씀)\n<ul>\n<li>이를 활용한 Anomaly Detection이 가능합니다. (<code class=\"language-text\">WINDOW TUMBLING</code> 범위 설정등을 의미합니다.)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>SQL 기반의 real-time 앱을 작성하는데 쓰인다 (별도의 프로세싱)</p>\n<ul>\n<li>그런 이유로 카프카 브로커 위에서 작동하는게 아닙니다. <br />앞서 설명한 Kafka Streams API를 사용하는 앱처럼 구동됩니다.</li>\n<li>ksqlDB에 맞는 SQL문을 작성 후 서비스를 구동하면 프로세싱이 됩니다!</li>\n<li>User-defined Function은 Java/Scala로 사용하여 ksqlDB에 별도로 추가하여 구동하면 됩니다!</li>\n</ul>\n</li>\n<li>\n<p>ksqlDB를 통해 검증하고 배포하는 방법은 아래와 같습니다</p>\n<ul>\n<li>SQL문을 별도로 준비해놓고 Interactive ksqlDB for development에서 쿼리를 개발한다</li>\n<li>Headless ksqlDB inproduction… 필요에 따른 SQL구문을 준비하고 deploy한다</li>\n<li><a href=\"https://docs.ksqldb.io/en/latest/operate-and-deploy/how-it-works/#ksql-deployment-modes\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">참고링크</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"ksqldb을-도입한다면-어떤-관점에서-기술을-바라볼까\" style=\"position:relative;\"><a href=\"#ksqldb%EC%9D%84-%EB%8F%84%EC%9E%85%ED%95%9C%EB%8B%A4%EB%A9%B4-%EC%96%B4%EB%96%A4-%EA%B4%80%EC%A0%90%EC%97%90%EC%84%9C-%EA%B8%B0%EC%88%A0%EC%9D%84-%EB%B0%94%EB%9D%BC%EB%B3%BC%EA%B9%8C\" aria-label=\"ksqldb을 도입한다면 어떤 관점에서 기술을 바라볼까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ksqlDB을 도입한다면? ~어떤 관점에서 기술을 바라볼까~</h2>\n<p>이벤트를 가공하여 필요한 카프카 토픽에 별도로 저장하거나 데이터를 저장하여 유의미한 데이터를 뽑아낼 수 있도록 하는 관점으로 바라봐야 한다는 것입니다.</p>\n<p>이는 Apache Spark나 앞서 살펴본 Faust로도 가능하지만, ksqlDB는 이를 쿼리로 빠르게 작성하여 결과를 얻어볼 수 있다는 점에서 의의를 가집니다.</p>\n<ol>\n<li>빠른 테스트를 통해 데이터가 입증을 수행하고 고도화가 필요한 그 시점에 다른 기술을 통하여 비율절감, 성능개선을 수행하면 될 것으로 보입니다.</li>\n</ol>\n<h2 id=\"ksqldb-실전예시-helkhunting-elk\" style=\"position:relative;\"><a href=\"#ksqldb-%EC%8B%A4%EC%A0%84%EC%98%88%EC%8B%9C-helkhunting-elk\" aria-label=\"ksqldb 실전예시 helkhunting elk permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ksqlDB 실전예시: HELK(Hunting ELK)</h2>\n<p>ksqlDB를 통해 Anomaly Detection을 수행하고자 하는 예시는 사이버보안 파트에서도 충분히 활용될 수 있는 문제입니다. 소개할 HELK라는 시스템은 이를 잘 활용한 훌륭한 오픈소스입니다. 해커의 고도화된 공격과 같은 <strong>“이상행위”</strong> 가 무엇인지 면밀히 이해한 후, 시스템 이벤트를 수집하고 이를 실시간으로 탐지하고 알림을 준다는 것이 주요 골자입니다.</p>\n<p><img src=\"https://raw.githubusercontent.com/Cyb3rWard0g/HELK/master/docs/images/HELK-Design.png\" alt=\"HELK의 전체 구조. 이 글에선 Kafka와 KSQL(현 ksqlDB)를 주요하게 살펴볼 것입니다\"></p>\n<p>그렇다면, 이상행위를 어떻게 탐지하는지 살펴봅시다. 실제 HELK라는 큰 프로젝트에서 어떻게 쓰이는지는 <a href=\"https://posts.specterops.io/real-time-sysmon-processing-via-ksql-and-helk-part-3-basic-use-case-8fbf383cb54f\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">해당 링크</a>를 참고해주세요(아래 Reference에도 기재해두었습니다).</p>\n<h2 id=\"ksqldb-쿼리-작성-1\" style=\"position:relative;\"><a href=\"#ksqldb-%EC%BF%BC%EB%A6%AC-%EC%9E%91%EC%84%B1-1\" aria-label=\"ksqldb 쿼리 작성 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ksqlDB 쿼리 작성 (1)</h2>\n<p>WinlogBeat라는 프로그램을 통해 수집된 윈도우즈의 시스템 이벤트를 수집하는 스트림을 생성하였습니다. 아래 쿼리는 해당 내용을 ksqlDB가 해석하도록 하는 코드입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> STREAM WINLOGBEAT_STREAM <span class=\"token punctuation\">(</span>\n  source_name <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">type</span> <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">,</span>\n  task <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">,</span>\n  log_name <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">,</span>\n  computer_name <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">,</span>\n  event_data STRUCT<span class=\"token operator\">&lt;</span>\n    UtcTime <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">,</span>\n    ProcessGuid <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">,</span>\n    ProcessId <span class=\"token keyword\">INTEGER</span><span class=\"token punctuation\">,</span>\n    Image <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">,</span>\n    FileVersion <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">,</span>\n    Description <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">,</span>\n    Product <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">,</span>\n    Company <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">,</span>\n    CommandLine <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">,</span>\n    CurrentDirectory <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">User</span> <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">,</span>\n    LogonGuid <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">,</span>\n    LogonId <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">,</span>\n    TerminalSessionId <span class=\"token keyword\">INTEGER</span><span class=\"token punctuation\">,</span>\n    IntegrityLevel <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">,</span>\n    Hashes <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">,</span>\n    ParentProcessGuid <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">,</span>\n    ParentProcessId <span class=\"token keyword\">INTEGER</span><span class=\"token punctuation\">,</span>\n    ParentImage <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">,</span>\n    ParentCommandLine <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">,</span>\n    Protocol <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">,</span>\n    Initiated <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">,</span>\n    SourceIsIpv6 <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">,</span>\n    SourceIp <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">,</span>\n    SourceHostname <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">,</span>\n    SourcePort <span class=\"token keyword\">INTEGER</span><span class=\"token punctuation\">,</span>\n    SourcePortName <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">,</span>\n    DestinationIsIpv6 <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">,</span>\n    DestinationIp <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">,</span>\n    DestinationHostname <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">,</span>\n    DestinationPort <span class=\"token keyword\">INTEGER</span><span class=\"token punctuation\">,</span>\n    DestinationPortName <span class=\"token keyword\">VARCHAR</span>\n  <span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n  event_id <span class=\"token keyword\">INTEGER</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">WITH</span> <span class=\"token punctuation\">(</span>KAFKA_TOPIC<span class=\"token operator\">=</span><span class=\"token string\">'winlogbeat'</span><span class=\"token punctuation\">,</span> VALUE_FORMAT<span class=\"token operator\">=</span><span class=\"token string\">'JSON'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"ksqldb-쿼리-작성-2\" style=\"position:relative;\"><a href=\"#ksqldb-%EC%BF%BC%EB%A6%AC-%EC%9E%91%EC%84%B1-2\" aria-label=\"ksqldb 쿼리 작성 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ksqlDB 쿼리 작성 (2)</h2>\n<p>(1)에서 작성한 쿼리를 토대로, 별도의 스트림을 통해 키값을 새로 추가하여 새 스트림을 만들어낼 수도 있습니다. 아래는 해당 내용에 대한 쿼리입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> STREAM WINLOGBEAT_STREAM_REKEY\n<span class=\"token keyword\">WITH</span> <span class=\"token punctuation\">(</span>VALUE_FORMAT<span class=\"token operator\">=</span><span class=\"token string\">'JSON'</span><span class=\"token punctuation\">,</span> PARTITIONS<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">TIMESTAMP</span><span class=\"token operator\">=</span><span class=\"token string\">'event_date_creation'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">AS</span> <span class=\"token keyword\">SELECT</span> STRINGTOTIMESTAMP<span class=\"token punctuation\">(</span>event_data<span class=\"token operator\">-</span><span class=\"token operator\">></span>UtcTime<span class=\"token punctuation\">,</span> <span class=\"token string\">'yyyy-MM-dd HH:mm:ss.SSS'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">AS</span>\n  event_date_creation<span class=\"token punctuation\">,</span>\n  event_data<span class=\"token operator\">-</span><span class=\"token operator\">></span>ProcessGuid <span class=\"token keyword\">AS</span> process_guid<span class=\"token punctuation\">,</span>\n  event_data<span class=\"token operator\">-</span><span class=\"token operator\">></span>ProcessId <span class=\"token keyword\">AS</span> process_id<span class=\"token punctuation\">,</span>\n  event_data<span class=\"token operator\">-</span><span class=\"token operator\">></span>Image <span class=\"token keyword\">AS</span> process_path<span class=\"token punctuation\">,</span>\n  event_data<span class=\"token operator\">-</span><span class=\"token operator\">></span>FileVersion <span class=\"token keyword\">AS</span> file_version<span class=\"token punctuation\">,</span>\n  event_data<span class=\"token operator\">-</span><span class=\"token operator\">></span>Description <span class=\"token keyword\">AS</span> file_description<span class=\"token punctuation\">,</span>\n  event_data<span class=\"token operator\">-</span><span class=\"token operator\">></span>Company <span class=\"token keyword\">AS</span> file_company<span class=\"token punctuation\">,</span>\n  event_data<span class=\"token operator\">-</span><span class=\"token operator\">></span>CommandLine <span class=\"token keyword\">AS</span> process_command_line<span class=\"token punctuation\">,</span>\n  event_data<span class=\"token operator\">-</span><span class=\"token operator\">></span>CurrentDirectory <span class=\"token keyword\">AS</span> process_current_directory<span class=\"token punctuation\">,</span>\n  event_data<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token keyword\">User</span> <span class=\"token keyword\">AS</span> user_account<span class=\"token punctuation\">,</span>\n  event_data<span class=\"token operator\">-</span><span class=\"token operator\">></span>LogonGuid <span class=\"token keyword\">AS</span> user_logon_guid<span class=\"token punctuation\">,</span>\n  event_data<span class=\"token operator\">-</span><span class=\"token operator\">></span>LogonId <span class=\"token keyword\">AS</span> user_logon_id<span class=\"token punctuation\">,</span>\n  event_data<span class=\"token operator\">-</span><span class=\"token operator\">></span>TerminalSessionId <span class=\"token keyword\">AS</span> user_session_id<span class=\"token punctuation\">,</span>\n  event_data<span class=\"token operator\">-</span><span class=\"token operator\">></span>IntegrityLevel <span class=\"token keyword\">AS</span> process_integrity_level<span class=\"token punctuation\">,</span>\n  event_data<span class=\"token operator\">-</span><span class=\"token operator\">></span>Hashes <span class=\"token keyword\">AS</span> hashes<span class=\"token punctuation\">,</span>\n  event_data<span class=\"token operator\">-</span><span class=\"token operator\">></span>ParentProcessGuid <span class=\"token keyword\">AS</span> parent_process_guid<span class=\"token punctuation\">,</span>\n  event_data<span class=\"token operator\">-</span><span class=\"token operator\">></span>ParentProcessId <span class=\"token keyword\">AS</span> parent_process_id<span class=\"token punctuation\">,</span>\n  event_data<span class=\"token operator\">-</span><span class=\"token operator\">></span>ParentImage <span class=\"token keyword\">AS</span> parent_process_path<span class=\"token punctuation\">,</span>\n  event_data<span class=\"token operator\">-</span><span class=\"token operator\">></span>ParentCommandLine <span class=\"token keyword\">AS</span> parent_process_command_line<span class=\"token punctuation\">,</span>\n  event_data<span class=\"token operator\">-</span><span class=\"token operator\">></span>Protocol <span class=\"token keyword\">AS</span> network_protocol<span class=\"token punctuation\">,</span>\n  event_data<span class=\"token operator\">-</span><span class=\"token operator\">></span>Initiated <span class=\"token keyword\">AS</span> network_connection_initiated<span class=\"token punctuation\">,</span>\n  event_data<span class=\"token operator\">-</span><span class=\"token operator\">></span>SourceIsIpv6 <span class=\"token keyword\">AS</span> src_is_ipv6<span class=\"token punctuation\">,</span>\n  event_data<span class=\"token operator\">-</span><span class=\"token operator\">></span>SourceIp <span class=\"token keyword\">AS</span> src_ip_addr<span class=\"token punctuation\">,</span>\n  event_data<span class=\"token operator\">-</span><span class=\"token operator\">></span>SourceHostname <span class=\"token keyword\">AS</span> src_host_name<span class=\"token punctuation\">,</span>\n  event_data<span class=\"token operator\">-</span><span class=\"token operator\">></span>SourcePort <span class=\"token keyword\">AS</span> src_port<span class=\"token punctuation\">,</span>\n  event_data<span class=\"token operator\">-</span><span class=\"token operator\">></span>SourcePortName <span class=\"token keyword\">AS</span> src_port_name<span class=\"token punctuation\">,</span>\n  event_data<span class=\"token operator\">-</span><span class=\"token operator\">></span>DestinationIsIpv6 <span class=\"token keyword\">AS</span> dst_is_ipv6<span class=\"token punctuation\">,</span>\n  event_data<span class=\"token operator\">-</span><span class=\"token operator\">></span>DestinationIp <span class=\"token keyword\">AS</span> dst_ip_addr<span class=\"token punctuation\">,</span>\n  event_data<span class=\"token operator\">-</span><span class=\"token operator\">></span>DestinationHostname <span class=\"token keyword\">AS</span> dst_host_name<span class=\"token punctuation\">,</span>\n  event_data<span class=\"token operator\">-</span><span class=\"token operator\">></span>DestinationPort <span class=\"token keyword\">AS</span> dst_port<span class=\"token punctuation\">,</span>\n  event_data<span class=\"token operator\">-</span><span class=\"token operator\">></span>DestinationPortName <span class=\"token keyword\">AS</span> dst_port_name<span class=\"token punctuation\">,</span>\n  event_id<span class=\"token punctuation\">,</span>\n  source_name<span class=\"token punctuation\">,</span>\n  log_name\n<span class=\"token keyword\">FROM</span> WINLOGBEAT_STREAM\n<span class=\"token keyword\">WHERE</span> source_name<span class=\"token operator\">=</span><span class=\"token string\">'Microsoft-Windows-Sysmon'</span> <span class=\"token keyword\">PARTITION</span> <span class=\"token keyword\">BY</span> process_guid<span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"ksqldb-쿼리-작성-3-응용\" style=\"position:relative;\"><a href=\"#ksqldb-%EC%BF%BC%EB%A6%AC-%EC%9E%91%EC%84%B1-3-%EC%9D%91%EC%9A%A9\" aria-label=\"ksqldb 쿼리 작성 3 응용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ksqlDB 쿼리 작성 (3): 응용</h2>\n<p>앞서 작성한 내용을 통해, sysmon에서 유의미한 데이터를 가져오는 쿼리를 작성해보도록 합시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> STREAM SYSMON_PROCESS_CREATE\n<span class=\"token keyword\">WITH</span> <span class=\"token punctuation\">(</span>VALUE_FORMAT<span class=\"token operator\">=</span><span class=\"token string\">'JSON'</span><span class=\"token punctuation\">,</span> PARTITIONS<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">TIMESTAMP</span><span class=\"token operator\">=</span><span class=\"token string\">'event_date_creation'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">AS</span> <span class=\"token keyword\">SELECT</span>\n  event_date_creation<span class=\"token punctuation\">,</span>\n  process_guid<span class=\"token punctuation\">,</span>\n  process_id<span class=\"token punctuation\">,</span>\n  process_path<span class=\"token punctuation\">,</span>\n  file_version<span class=\"token punctuation\">,</span>\n  file_description<span class=\"token punctuation\">,</span>\n  file_company<span class=\"token punctuation\">,</span>\n  process_command_line<span class=\"token punctuation\">,</span>\n  process_current_directory<span class=\"token punctuation\">,</span>\n  user_account<span class=\"token punctuation\">,</span>\n  user_logon_guid<span class=\"token punctuation\">,</span>\n  user_logon_id<span class=\"token punctuation\">,</span>\n  user_session_id<span class=\"token punctuation\">,</span>\n  process_integrity_level<span class=\"token punctuation\">,</span>\n  hashes<span class=\"token punctuation\">,</span>\n  parent_process_guid<span class=\"token punctuation\">,</span>\n  parent_process_id<span class=\"token punctuation\">,</span>\n  parent_process_path<span class=\"token punctuation\">,</span>\n  parent_process_command_line<span class=\"token punctuation\">,</span>\n  event_id<span class=\"token punctuation\">,</span>\n  source_name<span class=\"token punctuation\">,</span>\n  log_name\n<span class=\"token keyword\">FROM</span> WINLOGBEAT_STREAM_REKEY\n<span class=\"token keyword\">WHERE</span> event_id<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>관련 내용을 테이블에 저장할 수도 있습니다:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> SYSMON_PROCESS_CREATE_TABLE <span class=\"token punctuation\">(</span>\n  event_date_creation <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">,</span>\n  process_guid <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">,</span>\n  process_id <span class=\"token keyword\">INTEGER</span><span class=\"token punctuation\">,</span>\n  process_path <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">,</span>\n  file_version <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">,</span>\n  file_description <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">,</span>\n  file_company <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">,</span>\n  process_command_line <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">,</span>\n  process_current_directory <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">,</span>\n  user_account <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">,</span>\n  user_logon_guid <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">,</span>\n  user_logon_id <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">,</span>\n  user_session_id <span class=\"token keyword\">INTEGER</span><span class=\"token punctuation\">,</span>\n  process_integrity_level <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">,</span>\n  hashes <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">,</span>\n  parent_process_guid <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">,</span>\n  parent_process_id <span class=\"token keyword\">INTEGER</span><span class=\"token punctuation\">,</span>\n  parent_process_path <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">,</span>\n  parent_process_command_line <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">,</span>\n  event_id <span class=\"token keyword\">INTEGER</span><span class=\"token punctuation\">,</span>\n  source_name <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">,</span>\n  log_name <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">WITH</span> <span class=\"token punctuation\">(</span>KAFKA_TOPIC<span class=\"token operator\">=</span><span class=\"token string\">'SYSMON_PROCESS_CREATE'</span><span class=\"token punctuation\">,</span> VALUE_FORMAT<span class=\"token operator\">=</span><span class=\"token string\">'JSON'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">KEY</span><span class=\"token operator\">=</span><span class=\"token string\">'process_guid'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"ksqldb-쿼리-작성-4-이상행위-탐지\" style=\"position:relative;\"><a href=\"#ksqldb-%EC%BF%BC%EB%A6%AC-%EC%9E%91%EC%84%B1-4-%EC%9D%B4%EC%83%81%ED%96%89%EC%9C%84-%ED%83%90%EC%A7%80\" aria-label=\"ksqldb 쿼리 작성 4 이상행위 탐지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ksqlDB 쿼리 작성 (4): 이상행위 탐지</h2>\n<p>상기 과정을 이용하여, Lateral Movement 를 수행하여 타 PC에 “측면이동”을 하여 네트워크를 살펴보는 악성행위를 감지할 수 있습니다. 아래 내용이 해당 쿼리입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> STREAM SYSMON_JOIN <span class=\"token keyword\">WITH</span> <span class=\"token punctuation\">(</span>PARTITIONS<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">AS</span> <span class=\"token keyword\">SELECT</span>\n  N<span class=\"token punctuation\">.</span>EVENT_DATE_CREATION<span class=\"token punctuation\">,</span>\n  N<span class=\"token punctuation\">.</span>PROCESS_GUID<span class=\"token punctuation\">,</span>\n  N<span class=\"token punctuation\">.</span>PROCESS_ID<span class=\"token punctuation\">,</span>\n  N<span class=\"token punctuation\">.</span>PROCESS_PATH<span class=\"token punctuation\">,</span>\n  N<span class=\"token punctuation\">.</span>USER_ACCOUNT<span class=\"token punctuation\">,</span>\n  N<span class=\"token punctuation\">.</span>NETWORK_PROTOCOL<span class=\"token punctuation\">,</span>\n  N<span class=\"token punctuation\">.</span>NETWORK_CONNECTION_INITIATED<span class=\"token punctuation\">,</span>\n  N<span class=\"token punctuation\">.</span>SRC_IS_IPV6<span class=\"token punctuation\">,</span>\n  N<span class=\"token punctuation\">.</span>SRC_IP_ADDR<span class=\"token punctuation\">,</span>\n  N<span class=\"token punctuation\">.</span>SRC_HOST_NAME<span class=\"token punctuation\">,</span>\n  N<span class=\"token punctuation\">.</span>SRC_PORT<span class=\"token punctuation\">,</span>\n  N<span class=\"token punctuation\">.</span>SRC_PORT_NAME<span class=\"token punctuation\">,</span>\n  N<span class=\"token punctuation\">.</span>DST_IS_IPV6<span class=\"token punctuation\">,</span>\n  N<span class=\"token punctuation\">.</span>DST_IP_ADDR<span class=\"token punctuation\">,</span>\n  N<span class=\"token punctuation\">.</span>DST_HOST_NAME<span class=\"token punctuation\">,</span>\n  N<span class=\"token punctuation\">.</span>DST_PORT<span class=\"token punctuation\">,</span>\n  N<span class=\"token punctuation\">.</span>DST_PORT_NAME<span class=\"token punctuation\">,</span>\n  N<span class=\"token punctuation\">.</span>SOURCE_NAME<span class=\"token punctuation\">,</span>\n  N<span class=\"token punctuation\">.</span>LOG_NAME<span class=\"token punctuation\">,</span>\n  P<span class=\"token punctuation\">.</span>PROCESS_COMMAND_LINE<span class=\"token punctuation\">,</span>\n  P<span class=\"token punctuation\">.</span>HASHES<span class=\"token punctuation\">,</span>\n  P<span class=\"token punctuation\">.</span>PARENT_PROCESS_PATH<span class=\"token punctuation\">,</span>\n  P<span class=\"token punctuation\">.</span>PARENT_PROCESS_COMMAND_LINE<span class=\"token punctuation\">,</span>\n  P<span class=\"token punctuation\">.</span>USER_LOGON_GUID<span class=\"token punctuation\">,</span>\n  P<span class=\"token punctuation\">.</span>USER_LOGON_ID<span class=\"token punctuation\">,</span>\n  P<span class=\"token punctuation\">.</span>USER_SESSION_ID<span class=\"token punctuation\">,</span>\n  P<span class=\"token punctuation\">.</span>PROCESS_CURRENT_DIRECTORY<span class=\"token punctuation\">,</span>\n  P<span class=\"token punctuation\">.</span>PROCESS_INTEGRITY_LEVEL<span class=\"token punctuation\">,</span>\n  P<span class=\"token punctuation\">.</span>PARENT_PROCESS_GUID<span class=\"token punctuation\">,</span>\n  P<span class=\"token punctuation\">.</span>PARENT_PROCESS_ID\n<span class=\"token keyword\">FROM</span> SYSMON_NETWORK_CONNECT N <span class=\"token keyword\">INNER</span> <span class=\"token keyword\">JOIN</span> SYSMON_PROCESS_CREATE_TABLE P <span class=\"token keyword\">ON</span> N<span class=\"token punctuation\">.</span>PROCESS_GUID <span class=\"token operator\">=</span> P<span class=\"token punctuation\">.</span>PROCESS_GUID<span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h2>\n<p>이번 글을 통해, 아래 내용들을 살펴볼 수 있었습니다:</p>\n<ol>\n<li><code class=\"language-text\">ksqlDB</code>에 대해 이해하였습니다.</li>\n<li>의미있는 데이터를 추려낼 수 있도록 작업하는 것이 <code class=\"language-text\">ksqlDB</code>의 로직을 작성하는 핵심입니다.</li>\n<li>실전 예시를 통해, 어떤식으로 사용하는지에 대한 쿼리 작성법을 배웠습니다.</li>\n</ol>\n<p>읽어주셔서 대단히 감사합니다.</p>\n<hr>\n<p>References</p>\n<ul>\n<li><a href=\"https://docs.confluent.io/platform/current/ksqldb/tutorials/index.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">KSQL Tutorials end Examples</a></li>\n<li><a href=\"https://github.com/kafkakru/meetup/blob/master/conference/1st-conference/KSQL%20vs%20Kafka%20Streams.pdf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">KSQL and Kafka Streams</a></li>\n<li><a href=\"https://www.confluent.io/ja-jp/blog/sysmon-security-event-processing-real-time-ksql-helk/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">HELK, Hunting ELK</a></li>\n<li><a href=\"https://posts.specterops.io/real-time-sysmon-processing-via-ksql-and-helk-part-3-basic-use-case-8fbf383cb54f\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Real-time sysmon processing via ksql and HELP pt.3</a></li>\n</ul>","fields":{"slug":"/devlog/data/2020-03-10---ksqldb-101-pt03//devlog/data/2020-03-10-ksqldb-101-pt03","tagSlugs":["/tag/data-processing/"]},"frontmatter":{"date":"2020-03-10T06:19:00.000Z","description":"ksqlDB을 활용한 오픈소스의 예시를 통해, 보안 이벤트를 실시간으로 걸러내는 방안에 대해 학습해보고 이를 토대로 어떤식으로 활용하면 좋을지 살펴봅시다.","tags":["data_processing"],"title":"ksqlDB 101, part 3. 실전 예시: 오픈소스를 통해 살펴보는 실시간 보안 이벤트 탐지 룰","socialImage":{"publicURL":{"publicURL":"/static/06a6ac3882d79b0e2efd58e03fb2c3d0/j1.jpg"}}}}},"pageContext":{"slug":"/devlog/data/2020-03-10---ksqldb-101-pt03//devlog/data/2020-03-10-ksqldb-101-pt03"}},"staticQueryHashes":["251939775","357378587","401334301"]}