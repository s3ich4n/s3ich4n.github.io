{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/devlog/data/2020-02-17-ksqldb-101-pt01","result":{"data":{"markdownRemark":{"id":"cd92cb4d-ccb9-570d-aef9-872e6ffb2aab","html":"<p>이 글은 <code class=\"language-text\">ksqlDB</code>(당시에는 <code class=\"language-text\">KSQL</code>이라는 명칭이었습니다)를 학습하기 위해 정리한 연재글입니다.</p>\n<p>이 글의 순서는 아래와 같습니다.</p>\n<h1 id=\"목차\" style=\"position:relative;\"><a href=\"#%EB%AA%A9%EC%B0%A8\" aria-label=\"목차 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>목차</h1>\n<ol>\n<li><a href=\"https://blog.s3ich4n.me/devlog/data/2020-02-05-ksqldb-101-pt01\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">part 1. 배경지식</a></li>\n<li>part 2. Kafka Streams에 대해</li>\n<li><a href=\"https://blog.s3ich4n.me/devlog/data/2020-03-10-ksqldb-101-pt03\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">part 3. 실전 예시: 오픈소스를 통해 살펴보는 실시간 보안 이벤트 탐지 룰</a></li>\n</ol>\n<h1 id=\"2-kafka-streams-details\" style=\"position:relative;\"><a href=\"#2-kafka-streams-details\" aria-label=\"2 kafka streams details permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Kafka Streams details</h1>\n<p>상술하였던 아파치 카프카의 API에 대해 상세히 살펴봅시다.</p>\n<h2 id=\"stream-이란\" style=\"position:relative;\"><a href=\"#stream-%EC%9D%B4%EB%9E%80\" aria-label=\"stream 이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Stream 이란?</h2>\n<p>아파치 카프카에서의 Stream이 무슨의미를 지니는지 살펴봅시다.</p>\n<ul>\n<li>말 그대로 물줄기처럼 연속성있는 real-time flow of records를 의미합니다.</li>\n<li>새 레코드를 달라고 명시적으로 하는게 아니라 계속해서 받는것을 의미합니다.</li>\n<li>스트림은 <code class=\"language-text\">[k|v] -> [k|v] -> [k|v] -> [k|v]</code> 모양으로 계속 흐르며, <code class=\"language-text\">[k|v]</code> 한 쌍은 데이터 레코드라고 부릅니다.</li>\n</ul>\n<h3 id=\"그렇다면-kafka-stream은-무엇을-의미하나요\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%A0%87%EB%8B%A4%EB%A9%B4-kafka-stream%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%84-%EC%9D%98%EB%AF%B8%ED%95%98%EB%82%98%EC%9A%94\" aria-label=\"그렇다면 kafka stream은 무엇을 의미하나요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그렇다면 Kafka Stream은 무엇을 의미하나요?</h3>\n<ul>\n<li>real-time 앱을 작성하는데 쓰입니다.\n<ul>\n<li>카프카 브로커 위에서 작동하는게 아님에 유의합니다. 별도의 앱임을 의미합니다!</li>\n</ul>\n</li>\n<li>Java/Scala로 만들어진 마이크로서비스(JVM application)입니다.\n<ul>\n<li>Python 구현체로는 <a href=\"https://github.com/faust-streaming/faust\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Faust</a> 가 있습니다.</li>\n</ul>\n</li>\n<li>Deploy 후 앱을 구동해야 작동합니다.</li>\n<li>scalable하게 늘릴 수 있다.</li>\n<li>kafka streams API는 데이터를 변환/강화(enrichment) 하는데 쓰입니다. (이하 내용은 후술될 것입니다.)\n<ul>\n<li>per-record 스트림 프로세싱을 밀리초 단위로 지원합니다.</li>\n<li>stateless processing(Filtering, Mapping의 개념)을 지원합니다.</li>\n<li>이전 스트림의 처리 결과와 관계없이 현재 데이터로만 처리를 함을 의미합니다.</li>\n<li>stateful processing(JOIN, AGGREGATION의 개념)을 지원합니다.</li>\n<li>windowing operations 를 지원합니다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"kafka-streams의-주요-용어\" style=\"position:relative;\"><a href=\"#kafka-streams%EC%9D%98-%EC%A3%BC%EC%9A%94-%EC%9A%A9%EC%96%B4\" aria-label=\"kafka streams의 주요 용어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Kafka Streams의 주요 용어</h2>\n<p>카프카 스트림의 주요 용어에 대해 살펴보겠습니다.</p>\n<ul>\n<li>\n<p>스트림 처리 애플리케이션(Stream Processing Application)</p>\n<ul>\n<li>카프카 스트림 클라이언트를 사용하는 애플리케이션. 하나 이상의 프로세서 토폴로지에서 처리되는 로직을 의미한다.</li>\n<li>프로세서 토폴로지는 스트림 프로세서가 서로 연결된 그래프를 의미한다.</li>\n<li>스트림으로 정제한 데이터를 흘려보내는 앱을 의미</li>\n</ul>\n</li>\n<li>\n<p>스트림 프로세서(Stream Processor)</p>\n<ul>\n<li>프로세서 토폴로지를 이루는 하나의 노드.</li>\n<li>데이터를 받고 처리하거나(소스 프로세서), 받기만 한다(싱크프로세서)</li>\n</ul>\n</li>\n<li>\n<p>소스 프로세서(Source Processor)</p>\n<ul>\n<li>위쪽으로 연결된 프로세서가 없는 프로세서를 말한다.</li>\n<li>하나 이상의 카프카 토픽에서 데이터 레코드를 읽어서 아래쪽 프로세서에 전달한다.</li>\n</ul>\n</li>\n<li>\n<p>싱크 프로세서(Sink Processor)</p>\n<ul>\n<li>토폴로지 아래쪽에 프로세서 연결이 없는 프로세서</li>\n<li>상위 프로세서로부터 받은 데이터 레코드를 카프카 <strong>특정 토픽에 저장</strong>한다.</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&#x26;fname=http%3A%2F%2Fcfile29.uf.tistory.com%2Fimage%2F99AFC23E5C98CDEA2D64B0\" alt=\"Kafka Streams의 도식. 상기 내용들이 표시되어 있습니다.\"></p>\n<h3 id=\"kstream과-ktable이란\" style=\"position:relative;\"><a href=\"#kstream%EA%B3%BC-ktable%EC%9D%B4%EB%9E%80\" aria-label=\"kstream과 ktable이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">KStream</code>과 <code class=\"language-text\">KTable</code>이란?</h3>\n<ul>\n<li><code class=\"language-text\">KStream</code>은 stream의 abstraction입니다.</li>\n<li>stream of records를 원하면 <code class=\"language-text\">KStream</code>을, changelog 주어진 키에 대해 가장 최신값만 원한다면 <code class=\"language-text\">KTable</code>을 사용하는 것이 좋습니다.</li>\n</ul>\n<h3 id=\"kstream과-ktable의-차이\" style=\"position:relative;\"><a href=\"#kstream%EA%B3%BC-ktable%EC%9D%98-%EC%B0%A8%EC%9D%B4\" aria-label=\"kstream과 ktable의 차이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">KStream</code>과 <code class=\"language-text\">KTable</code>의 차이?</h3>\n<ul>\n<li>\n<p><code class=\"language-text\">KStream</code></p>\n<ul>\n<li>an unbounded collection of facts: immutable things; 쉬지않고 들어오는값, 바뀔 수 없는(immutable) 하나의 메시지를 의미합니다.</li>\n<li>e.g. <code class=\"language-text\">postgres.exe</code> 프로세스에 대한 1500번 이벤트가 10월 31일, A클라이언트에서 발생했다 (서로 독립적)</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">KTable</code></p>\n<ul>\n<li>a collection of evolving facts; 변하는 프로파일</li>\n<li>e.g. 다섯달 전엔 대구에 살았는데 지금은 서울에 산다.. 하고 업데이트; Overwrite하는 경우를 의미하지요.</li>\n<li><code class=\"language-text\">KTable</code> 은 time-evolving stream 과 관련있습니다. 시간이 흐름에 따라 값이 변화하는 스트림에 주로 사용될 수 있겠습니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"kafka-streams의-time의-개념\" style=\"position:relative;\"><a href=\"#kafka-streams%EC%9D%98-time%EC%9D%98-%EA%B0%9C%EB%85%90\" aria-label=\"kafka streams의 time의 개념 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Kafka Streams의 <code class=\"language-text\">Time</code>의 개념</h3>\n<p>스트림 프로세싱의 핵심은 시간을 가지고 작업하는 개념입니다.</p>\n<ul>\n<li>\n<p>event time</p>\n<ul>\n<li>레코드가 emit 되는 시점의 시간</li>\n</ul>\n</li>\n<li>\n<p>ingestion time</p>\n<ul>\n<li>emitted records 가 브로커에 의해 Kafka 토픽에 저장되는 시간(데이터 통신 메커니즘에 따라 이벤트 시간 및 처리 시간이 달라짐) 대부분의 경우 타임 스탬프가 데이터 레코드 자체에 포함되므로 처리 시간은 이벤트 시간과 거의 같다</li>\n</ul>\n</li>\n<li>\n<p>processing time</p>\n<ul>\n<li>스트림 처리 응용 프로그램에서 이벤트 또는 데이터 레코드를 처리하는 시점(예 : 레코드가 소비되는 시점). 처리 시간은 원래 이벤트 시간보다 밀리 초, 시간 또는 며칠이 걸릴 수 있다</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"stateful-stateless-in-ksqldb\" style=\"position:relative;\"><a href=\"#stateful-stateless-in-ksqldb\" aria-label=\"stateful stateless in ksqldb permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Stateful, Stateless in ksqlDB</h3>\n<ul>\n<li>상태가 필요없이 다른 메시지와 독립적으로 처리하는 것을 <em>stateless</em> 라고 일컫습니다.</li>\n<li>한 스트림을 변환만 할 필요가 있을 때, 혹은 상태에 맞게 스트림을 걸러내는 것을 말합니다.</li>\n<li>상태를 필요로 하는 것을 <em>stateful</em> 이라고 하며, 대부분의 앱은 상태를 필요로 합니다. stateful한 스트림은 input 스트림을 join, aggregate, window 처리할 수 있습니다.</li>\n</ul>\n<h2 id=\"kafka-streams-앱-구현-java\" style=\"position:relative;\"><a href=\"#kafka-streams-%EC%95%B1-%EA%B5%AC%ED%98%84-java\" aria-label=\"kafka streams 앱 구현 java permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Kafka Streams 앱 구현: Java</h2>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=7JYEEx7SBuE\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">이 영상</a>을 참고해주세요.</li>\n<li>소스코드는 <a href=\"https://github.com/confluentinc/kafka-streams-examples\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">여기</a> 를 참고 바랍니다.</li>\n</ul>\n<ol>\n<li>config 변수를 만들어서 <code class=\"language-text\">APPLICATION_ID_CONFIG</code>, <code class=\"language-text\">BOOTSTRAP_SERVERS_CONFIG</code>을 설정합니다.\n<ul>\n<li><code class=\"language-text\">APPLICATION_ID_CONFIG</code>: 새로 만들 필터링 앱의 이름 (unique)</li>\n<li><code class=\"language-text\">BOOSTRAP_SERVERS_CONFIG</code>: 데이터 스트림을 가져올 카프카의 주소</li>\n</ul>\n</li>\n<li><code class=\"language-text\">new StreamsBuilder()</code> 구문으로 빌더를 만들고(토폴로지 정의 빌더), <code class=\"language-text\">KStream</code> 변수타입을 사용해서 어느 토픽에 어떤 필터로 값을 가져올지 정합니다.</li>\n<li>그 후 <code class=\"language-text\">KafkaStreams</code> 타입의 변수를 만들고 빌더, 설정값을 세팅합니다.</li>\n<li><code class=\"language-text\">kafka stream</code> 설정을 입력합니다.</li>\n<li><code class=\"language-text\">KStream</code>, <code class=\"language-text\">KTable</code> 및 <code class=\"language-text\">GlobalKTable</code>을 정의합니다 (앞서 입력한 설정을 추가)</li>\n<li><code class=\"language-text\">KafkaStreams</code> 객체를 선언하고 consume 을 통해 새로운 스트림 생성합니다.</li>\n</ol>\n<h2 id=\"faust-python의-스트림-프로세싱-라이브러리\" style=\"position:relative;\"><a href=\"#faust-python%EC%9D%98-%EC%8A%A4%ED%8A%B8%EB%A6%BC-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8B%B1-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC\" aria-label=\"faust python의 스트림 프로세싱 라이브러리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Faust: Python의 스트림 프로세싱 라이브러리</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> os\n\n<span class=\"token keyword\">import</span> faust\n\n\nCONSUMER_NAME <span class=\"token operator\">=</span> <span class=\"token string\">\"TEST_CLICK_CONSUMER_01\"</span>\nKAFKA_BROKER <span class=\"token operator\">=</span> <span class=\"token string\">\"임의의 브로커 주소\"</span>\nSRC_TOPIC <span class=\"token operator\">=</span> <span class=\"token string\">\"임의의 토픽주소\"</span>\n\n<span class=\"token comment\"># 앱 구동 전, 기본 설정값 세팅</span>\napp <span class=\"token operator\">=</span> faust<span class=\"token punctuation\">.</span>App<span class=\"token punctuation\">(</span>\n    CONSUMER_NAME<span class=\"token punctuation\">,</span>\n    broker<span class=\"token operator\">=</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"kafka://</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>KAFKA_BROKER<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 값을 가져오기위한 메인토픽</span>\n<span class=\"token comment\"># data sent to 'clicks' topic sharded by URL key.</span>\n<span class=\"token comment\"># e.g. key=\"http://example.com\" value=\"1\"</span>\nclick_topic <span class=\"token operator\">=</span> app<span class=\"token punctuation\">.</span>topic<span class=\"token punctuation\">(</span>\n    SRC_TOPIC<span class=\"token punctuation\">,</span>\n    key_type<span class=\"token operator\">=</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span>\n    value_type<span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 새로이 저장할 토픽</span>\n<span class=\"token comment\"># default value for missing URL will be 0 with `default=int`</span>\ncounts <span class=\"token operator\">=</span> app<span class=\"token punctuation\">.</span>Table<span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'click_counts'</span><span class=\"token punctuation\">,</span>\n    default<span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>agent</span><span class=\"token punctuation\">(</span>src_topic<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">count_click</span><span class=\"token punctuation\">(</span>clicks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">async</span> <span class=\"token keyword\">for</span> url<span class=\"token punctuation\">,</span> count <span class=\"token keyword\">in</span> clicks<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        counts<span class=\"token punctuation\">[</span>url<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> count</code></pre></div>\n<p>도커 이미지를 아래와 같이 작성 후 구동하면 파이썬 코드로도 상기 Kafka Streams 처리가 가능합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token instruction\"><span class=\"token keyword\">FROM</span> python:3.9</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> . /app</span>\n<span class=\"token instruction\"><span class=\"token keyword\">WORKDIR</span> /app</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> <span class=\"token operator\">\\</span>\n    pip install -r requirements.txt</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> [<span class=\"token string\">\"python\"</span>, <span class=\"token string\">\"stream.py\"</span>]</span></code></pre></div>\n<p>Faust 에 대한 상세한 설명은 <a href=\"https://faust-streaming.github.io/faust/userguide/index.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">여기</a>를 살펴봐주세요.</p>\n<h3 id=\"caveats\" style=\"position:relative;\"><a href=\"#caveats\" aria-label=\"caveats permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Caveats</h3>\n<p>만일 파이썬 베이스 이미지를 통해 <a href=\"https://github.com/confluentinc/confluent-kafka-python\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">librdkafka 기반의 카프카 처리 라이브러리</a>를 사용해야 한다면, 추가적인 의존성을 필요로 할 수 있습니다. 관련 내용은 <a href=\"https://github.com/confluentinc/confluent-kafka-python/blob/master/INSTALL.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">이 링크</a>를 참고해주세요.</p>\n<h1 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h1>\n<p>이번 글을 통해, 아래 내용들을 살펴볼 수 있었습니다:</p>\n<ol>\n<li>Kafka Streams과 주요 용어 및 개념을 살펴보았습니다.</li>\n<li>Kafka Streams 앱 구현을 Java 및 Python 라이브러리를 통하여 어떻게 진행하는지 살펴보았습니다.</li>\n</ol>\n<p>다음 파트에선 본격적으로 ksqlDB가 무엇인지, 그리고 이를 통해 어떤식으로 실시간 이벤트 처리를 수행할 수 있는지를 대표적인 예시로 살펴보겠습니다.</p>\n<p>읽어주셔서 대단히 감사합니다.</p>\n<hr>\n<ul>\n<li>References\n<ul>\n<li><a href=\"https://docs.confluent.io/current/streams/introduction.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Kafka Streams Introduction</a></li>\n<li><a href=\"https://medium.com/@stephane.maarek/introduction-to-schemas-in-apache-kafka-with-the-confluent-schema-registry-3bf55e401321\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Introduction to Schemas in Apache Kafka with the Confluent Schema Registry</a></li>\n<li><a href=\"https://github.com/kafkakru/meetup/blob/master/conference/1st-conference/KSQL%20vs%20Kafka%20Streams.pdf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">KSQL and Kafka Streams</a></li>\n<li><a href=\"https://faust.readthedocs.io/en/latest/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Faust: Python Stream Processing</a></li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/devlog/data/2020-02-06---ksqldb-101-pt02//devlog/data/2020-02-17-ksqldb-101-pt01","tagSlugs":["/tag/data-processing/"]},"frontmatter":{"date":"2020-02-17T19:00:00.000Z","description":"ksqlDB의 내부 구조인 Apache Kafka의 Kafka Streams를 간략하게 살펴봅시다.","tags":["data_processing"],"title":"ksqlDB 101, part 2. Kafka Streams에 대해","socialImage":{"publicURL":{"publicURL":"/static/06a6ac3882d79b0e2efd58e03fb2c3d0/j1.jpg"}}}}},"pageContext":{"slug":"/devlog/data/2020-02-06---ksqldb-101-pt02//devlog/data/2020-02-17-ksqldb-101-pt01"}},"staticQueryHashes":["251939775","357378587","401334301"]}