{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/devlog/terraform/2022-12-10-cloudneta-terraform-101-pt07","result":{"data":{"markdownRemark":{"id":"1f043a7e-21ae-5273-bc56-f48a5c2cc4ff","html":"<p>이 내용은 <a href=\"https://www.notion.so/gasidaseo/CloudNet-Blog-c9dfa44a27ff431dafdd2edacc8a1863\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CloudNet@</a> 에서 진행하는 테라폼 기초 입문 스터디에 대한 연재글입니다.</p>\n<p>스터디에서 사용하는 교재는 <a href=\"http://www.yes24.com/Product/Goods/101511312\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Terraform Up &#x26; Running 2nd Edition</a> 입니다.</p>\n<h1 id=\"prerequisites\" style=\"position:relative;\"><a href=\"#prerequisites\" aria-label=\"prerequisites permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Prerequisites</h1>\n<ul>\n<li>따로 없습니다. 어차피 처음부터 다시 밟아갈거에요.</li>\n</ul>\n<h1 id=\"본문\" style=\"position:relative;\"><a href=\"#%EB%B3%B8%EB%AC%B8\" aria-label=\"본문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>본문</h1>\n<p>이번 장은, 1장부터 6장까지의 내용을 리와인드하는 장으로 하기로 하였습니다. 중간 스터디를 하면서도 복습했지만 스터디 모임이 한 주 쉬어가며 문서화를 하여 개념을 스스로 정리해야겠다 싶었습니다.</p>\n<h2 id=\"테라폼-복습\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EB%9D%BC%ED%8F%BC-%EB%B3%B5%EC%8A%B5\" aria-label=\"테라폼 복습 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테라폼 복습</h2>\n<h3 id=\"아키텍처\" style=\"position:relative;\"><a href=\"#%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98\" aria-label=\"아키텍처 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아키텍처</h3>\n<ul>\n<li>전과 크게 다르지 않습니다!</li>\n<li>ALB, ASG, EC2 구성대로 진행합니다.</li>\n<li>staging, production 환경을 나눕니다.</li>\n<li>모듈을 활용하여 무중단 업그레이드를 진행합니다.</li>\n</ul>\n<h3 id=\"도구-안내\" style=\"position:relative;\"><a href=\"#%EB%8F%84%EA%B5%AC-%EC%95%88%EB%82%B4\" aria-label=\"도구 안내 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>도구 안내</h3>\n<ul>\n<li><code class=\"language-text\">tfenv</code> 를 통한 테라폼 버전관리를 수행해봅시다. 저는 리눅스 환경에서 실습을 진행하므로, 공식 repository에 작성된 Manual 설치대로 진행하겠습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># ${HOME}/.tfenv에 관련 내용 설치</span>\n<span class=\"token function\">git</span> clone <span class=\"token parameter variable\">--depth</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> https://github.com/tfutils/tfenv.git ~/.tfenv\n\n<span class=\"token comment\"># 사용하고있는 쉘에 따라 ${PATH} 추가.</span>\n<span class=\"token comment\"># 저는 zsh을 사용하고 있습니다.</span>\n<span class=\"token comment\"># 해당명령 수행 후 쉘을 종료하고 다시 켜주세요.</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'export PATH=$PATH:$HOME/.tfenv/bin'</span> <span class=\"token operator\">>></span> ~/.zshrc\n\n<span class=\"token comment\"># 설치 가능 버전 확인</span>\ntfenv list-remote <span class=\"token operator\">|</span> <span class=\"token function\">head</span>\n<span class=\"token number\">1.4</span>.0-alpha20221109\n<span class=\"token number\">1.3</span>.6\n<span class=\"token punctuation\">..</span>.\n\n<span class=\"token comment\"># 현재 설치된 버전 확인</span>\ntfenv list\nNo versions available. Please <span class=\"token function\">install</span> one with: tfenv <span class=\"token function\">install</span>\n\n<span class=\"token comment\"># 특정 버전 설치</span>\n<span class=\"token comment\">#(옵션) export TFENV_ARCH=arm64  # mac Apple silicon M1/M2</span>\ntfenv <span class=\"token function\">install</span> <span class=\"token number\">1.2</span>.3\ntfenv list\n\n<span class=\"token comment\"># 특정 버전 사용</span>\ntfenv use <span class=\"token number\">1.2</span>.3\nSwitching default version to v1.2.3\nDefault version <span class=\"token punctuation\">(</span>when not overridden by .terraform-version or TFENV_TERRAFORM_VERSION<span class=\"token punctuation\">)</span> is now: <span class=\"token number\">1.2</span>.3\n\n<span class=\"token comment\"># 테라폼 버전 확인</span>\nterraform version\non linux_amd64</code></pre></div>\n<h3 id=\"자격증명-리전-변경\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EA%B2%A9%EC%A6%9D%EB%AA%85-%EB%A6%AC%EC%A0%84-%EB%B3%80%EA%B2%BD\" aria-label=\"자격증명 리전 변경 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자격증명 리전 변경</h3>\n<p>오하이오 리전(<code class=\"language-text\">us-east-2</code>)으로 변경합시다.</p>\n<p>저는 direnv를 사용하고 있으므로, 작업이 필요한 하부 워킹디렉토리에 <code class=\"language-text\">.envrc</code> 파일을 생성 후 <code class=\"language-text\">AWS_DEFAULT_REGION</code> 을 오하이오 리전으로 변경하여 사용하였습니다. 아래 커맨드로 바꾸고, 확인해봅시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># AWS_DEFAULT_REGION 수정</span>\n<span class=\"token function\">vi</span> .envrc\n\n<span class=\"token comment\"># direnv 내의 추가/수정된 .envrc 파일을 사용합시다.</span>\ndirenv allow\n\n<span class=\"token comment\"># 반영여부 확인</span>\naws configure list\n      Name                    Value             Type    Location\n      ----                    -----             ----    --------\n   profile                <span class=\"token operator\">&lt;</span>not set<span class=\"token operator\">></span>             None    None\naccess_key     ************REDACTED              <span class=\"token function\">env</span>\nsecret_key     ************REDACTED              <span class=\"token function\">env</span>\n    region                us-east-2              <span class=\"token function\">env</span>    <span class=\"token punctuation\">[</span><span class=\"token string\">'AWS_REGION'</span>, <span class=\"token string\">'AWS_DEFAULT_REGION'</span><span class=\"token punctuation\">]</span></code></pre></div>\n<h2 id=\"코드-분석\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C-%EB%B6%84%EC%84%9D\" aria-label=\"코드 분석 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드 분석</h2>\n<p>먼저, 영문 개정 3판의 코드를 클론합시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone https://github.com/brikis98/terraform-up-and-running-code.git\n<span class=\"token builtin class-name\">cd</span> terraform-up-and-running/code/terraform</code></pre></div>\n<h3 id=\"테라폼-문법-분석파트\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EB%9D%BC%ED%8F%BC-%EB%AC%B8%EB%B2%95-%EB%B6%84%EC%84%9D%ED%8C%8C%ED%8A%B8\" aria-label=\"테라폼 문법 분석파트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테라폼 문법 분석파트</h3>\n<p>테라폼 교재 예시의 가장 기본입니다. 위에서 설명드린 아키텍처에 작성된 내용을 코드로 배포하는 것이 주요 내용인지라, 해당 내용을 이해하고 넘어가야 다음 진도를 이해하며 넘어가실 수 있습니다!</p>\n<ol>\n<li>(신규) 테라폼 구동 버전과 프로바이더의 버전을 기재하였습니다.\n<ol>\n<li>이 부분은 버전 명시 및 프로바이더에 대한 명확한 기재를 의미합니다.</li>\n<li>향후 리팩토링을 수행하며, 관련 중요성에 대해 다시 말씀드리겠습니다.</li>\n</ol>\n</li>\n<li>구동할 EC2 이미지를 찾고, 임의의 유저 데이터를 추가해두었습니다.</li>\n<li>기본 VPC에 서브넷을 생성하고, 시큐리티 그룹을 설정하였습니다.</li>\n<li>ALB 설정이 존재합니다</li>\n<li>ASG 설정이 존재합니다</li>\n</ol>\n<p>아래 명령으로 구동을 진행할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># [터미널2]</span>\n<span class=\"token builtin class-name\">cd</span> 02-intro-to-terraform-syntax/webserver-cluster\n<span class=\"token function\">cat</span> main.tf variables.tf\n\n<span class=\"token comment\"># 배포</span>\nterraform init\nterraform plan\nterraform apply -auto-approve\n\n<span class=\"token comment\"># 배포 완료 후 ALB 접속 확인</span>\n<span class=\"token assign-left variable\">ALBDNS</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span>terraform output <span class=\"token parameter variable\">-raw</span> alb_dns_name<span class=\"token variable\">)</span></span>\n<span class=\"token keyword\">while</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span> <span class=\"token function\">curl</span> --connect-timeout <span class=\"token number\">1</span>  http://<span class=\"token variable\">$ALBDNS</span>/ <span class=\"token punctuation\">;</span> <span class=\"token builtin class-name\">echo</span><span class=\"token punctuation\">;</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"------------------------------\"</span><span class=\"token punctuation\">;</span> <span class=\"token function\">date</span><span class=\"token punctuation\">;</span> <span class=\"token function\">sleep</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">done</span>\n\n<span class=\"token comment\"># 삭제</span>\nterraform destroy -auto-approve\n<span class=\"token builtin class-name\">cd</span> ~/terraform-up-and-running-code/code/terraform</code></pre></div>\n<h3 id=\"테라폼-state-파트\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EB%9D%BC%ED%8F%BC-state-%ED%8C%8C%ED%8A%B8\" aria-label=\"테라폼 state 파트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테라폼 state 파트</h3>\n<p>이 장에서는, <code class=\"language-text\">.tfstate</code> 파일이나 폴더구조 관리에 대해 배웠습니다. 관리를 제대로 하지 않았을 때의 리스크는 <a href=\"https://charity.wtf/2016/03/30/terraform-vpc-and-why-you-want-a-tfstate-file-per-env/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">이 링크</a>를 다시 봅시다…</p>\n<ol>\n<li>S3, DynamoDB와 RDS(MySQL)을 통해, <code class=\"language-text\">.tfstate</code> 파일에 대한 관리를 진행합니다.\n<ol>\n<li>RDS에 .tfstate 내용을 백업하고, S3에 읽기 전용 파일로 다른 서비스들이 “읽을 수 있도록” 준비합니다.</li>\n</ol>\n</li>\n<li>스테이징/프로덕션 파트의 RDS를 배포하여, 서비스가 구동됨을 확인합니다.</li>\n</ol>\n<p>아래 명령으로 구동을 진행할 수 있습니다.</p>\n<ul>\n<li>S3/DynamoDB 구동관련 설정</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># 환경변수에 지정</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">TF_VAR_bucket_name</span><span class=\"token operator\">=</span>ex07-tfstate\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">TF_VAR_table_name</span><span class=\"token operator\">=</span>ex07-t101-locks\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">TF_VAR_bucket_name</span><span class=\"token operator\">=</span>ex07-t101-tfstate\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">TF_VAR_table_name</span><span class=\"token operator\">=</span>ex07-t101-locks\n\n<span class=\"token comment\"># 환경변수 확인</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> TF_VAR_\n\n<span class=\"token comment\"># (옵션) 환경변수 지정 삭제</span>\n<span class=\"token builtin class-name\">unset</span> TF_VAR_bucket_name\n<span class=\"token builtin class-name\">unset</span> TF_VAR_table_name</code></pre></div>\n<ul>\n<li>S3/DynamoDB 배포하기</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\">#</span>\n<span class=\"token builtin class-name\">cd</span> 03-terraform-state/file-layout-example/global/s3\n<span class=\"token function\">cat</span> main.tf variables.tf\n\n<span class=\"token comment\"># 초기화 및 검증 : 환경변수 적용 확인</span>\nterraform init <span class=\"token operator\">&amp;&amp;</span> terraform plan\n\n<span class=\"token comment\"># 배포</span>\nterraform apply -auto-approve\n\n<span class=\"token comment\"># 확인</span>\naws s3 <span class=\"token function\">ls</span>\naws dynamodb list-tables <span class=\"token parameter variable\">--output</span> text\n\n<span class=\"token comment\"># 이동</span>\n<span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span></code></pre></div>\n<ul>\n<li>RDS 배포하기</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># [터미널1] RDS 생성 모니터링</span>\n<span class=\"token keyword\">while</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span> aws rds describe-db-instances <span class=\"token parameter variable\">--query</span> <span class=\"token string\">\"*[].[Endpoint.Address,Endpoint.Port,MasterUsername]\"</span> <span class=\"token parameter variable\">--output</span> text  <span class=\"token punctuation\">;</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"------------------------------\"</span> <span class=\"token punctuation\">;</span> <span class=\"token function\">sleep</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">done</span>\n\n<span class=\"token comment\"># [터미널2]</span>\n<span class=\"token builtin class-name\">cd</span> stage/data-stores/mysql\n<span class=\"token function\">cat</span> main.tf variables.tf\n\n<span class=\"token comment\"># 환경변수에 지정</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">TF_VAR_db_username</span><span class=\"token operator\">=</span><span class=\"token string\">'cloudneta'</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">TF_VAR_db_password</span><span class=\"token operator\">=</span><span class=\"token string\">'cloudnetaQ!'</span>\n\n<span class=\"token comment\"># 환경변수 확인</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> TF_VAR_\n\n<span class=\"token comment\"># main.tf 에 백엔드 부분 수정</span>\n<span class=\"token function\">vi</span> main.tf\n  backend <span class=\"token string\">\"s3\"</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\"># This backend configuration is filled in automatically at test time by Terratest. If you wish to run this example</span>\n    <span class=\"token comment\"># manually, uncomment and fill in the config below.</span>\n    bucket         <span class=\"token operator\">=</span> <span class=\"token string\">\"ex07-tfstate\"</span>\n    key            <span class=\"token operator\">=</span> <span class=\"token string\">\"stage/data-stores/mysql/terraform.tfstate\"</span>\n    region         <span class=\"token operator\">=</span> <span class=\"token string\">\"us-east-2\"</span>\n    dynamodb_table <span class=\"token operator\">=</span> <span class=\"token string\">\"ex07-t101-locks\"</span>\n    <span class=\"token comment\"># encrypt        = true</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\"># 초기화 및 검증 : 환경변수 적용 확인</span>\nterraform init <span class=\"token operator\">&amp;&amp;</span> terraform plan\n\n<span class=\"token comment\"># 배포 : RDS는 생성 시 6분 정도 시간 소요</span>\nterraform apply -auto-approve\nterraform output\naws s3 <span class=\"token function\">ls</span> s3://<span class=\"token variable\">$TF_VAR_bucket_name</span> <span class=\"token parameter variable\">--recursive</span> --human-readable <span class=\"token parameter variable\">--summarize</span>\n\n<span class=\"token comment\"># 이동</span>\n<span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span></code></pre></div>\n<ul>\n<li>(상기 과정을 마쳐야 할 수 있습니다!) 웹서버 클러스터 배포하기</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\">#</span>\n<span class=\"token builtin class-name\">cd</span> services/webserver-cluster\n<span class=\"token function\">cat</span> main.tf variables.tf\n\n<span class=\"token comment\"># 환경변수에 지정</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">TF_VAR_db_remote_state_bucket</span><span class=\"token operator\">=</span><span class=\"token variable\">$TF_VAR_bucket_name</span>                       <span class=\"token comment\"># description = \"The name of the S3 bucket used for the database's remote state storage\"</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">TF_VAR_db_remote_state_key</span><span class=\"token operator\">=</span><span class=\"token string\">'stage/data-stores/mysql/terraform.tfstate'</span>  <span class=\"token comment\"># description = \"The name of the key in the S3 bucket used for the database's remote state storage\"</span>\n\n<span class=\"token comment\"># 환경변수 확인</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> TF_VAR_\n\n<span class=\"token comment\"># 초기화 및 검증 : 환경변수 적용 확인</span>\nterraform init <span class=\"token operator\">&amp;&amp;</span> terraform plan\n\n<span class=\"token comment\"># 배포</span>\nterraform apply -auto-approve\n\n<span class=\"token comment\"># ALB DNS주소로 curl 접속 확인</span>\n<span class=\"token assign-left variable\">ALBDNS</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span>terraform output <span class=\"token parameter variable\">-raw</span> alb_dns_name<span class=\"token variable\">)</span></span>\n<span class=\"token keyword\">while</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span> <span class=\"token function\">curl</span> --connect-timeout <span class=\"token number\">1</span>  http://<span class=\"token variable\">$ALBDNS</span> <span class=\"token punctuation\">;</span> <span class=\"token builtin class-name\">echo</span><span class=\"token punctuation\">;</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"------------------------------\"</span><span class=\"token punctuation\">;</span> <span class=\"token function\">date</span><span class=\"token punctuation\">;</span> <span class=\"token function\">sleep</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">done</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-s</span> http://<span class=\"token variable\">$ALBDNS</span>\n\n<span class=\"token comment\"># 삭제</span>\n<span class=\"token comment\"># 각 폴더에서 리소스 삭제</span>\nstage/services/webserver-cluster$ terraform destroy -auto-approve\nstage/data-stores/mysql$ terraform destroy -auto-approve\nglobal/s3$ terraform destroy -auto-approve\n\n<span class=\"token comment\"># 이동</span>\n<span class=\"token builtin class-name\">cd</span> ~/terraform-up-and-running-code/code/terraform</code></pre></div>\n<h3 id=\"테라폼-모듈-파트\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EB%9D%BC%ED%8F%BC-%EB%AA%A8%EB%93%88-%ED%8C%8C%ED%8A%B8\" aria-label=\"테라폼 모듈 파트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테라폼 모듈 파트</h3>\n<p>테라폼 state 파트에서 작성해본 내용들을 모듈화하여, 보다 효율적인 테라폼 코드를 작성해봅시다. 코드 재사용, 여러 테라폼 리소스를 논리적 그룹으로 묶을 수 있습니다. 논리적으로 구상할 수 있다는 것은 우리의 사고대로 코드들을 재배합할 수 있다는 이야기지요.</p>\n<p>여기서는 웹서버 내용에 대해서만 아직 모듈로 묶어두었고, 8장에서 ALB, ASG, EC2가 묶여있는 부분을 해제해봅시다.</p>\n<ul>\n<li>\n<p>상기 내용과 동일합니다!</p>\n<ul>\n<li>S3/DynamoDB 구동관련 설정</li>\n<li>S3/DynamoDB 배포하기</li>\n</ul>\n</li>\n<li>\n<p>Staging RDS 배포하기</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># [터미널1] RDS 생성 모니터링</span>\n<span class=\"token keyword\">while</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span> aws rds describe-db-instances <span class=\"token parameter variable\">--query</span> <span class=\"token string\">\"*[].[Endpoint.Address,Endpoint.Port,MasterUsername]\"</span> <span class=\"token parameter variable\">--output</span> text  <span class=\"token punctuation\">;</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"------------------------------\"</span> <span class=\"token punctuation\">;</span> <span class=\"token function\">sleep</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">done</span>\n\n<span class=\"token comment\"># [터미널2]</span>\n<span class=\"token builtin class-name\">cd</span> 04-terraform-module/module-example/stage/data-stores/mysql\n<span class=\"token function\">cat</span> main.tf variables.tf\n\n<span class=\"token comment\"># 환경변수에 지정</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">TF_VAR_db_username</span><span class=\"token operator\">=</span><span class=\"token string\">'cloudneta'</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">TF_VAR_db_password</span><span class=\"token operator\">=</span><span class=\"token string\">'cloudnetaQ!'</span>\n\n<span class=\"token comment\"># 환경변수 확인</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> TF_VAR_\n\n<span class=\"token comment\"># main.tf 에 백엔드 부분 수정</span>\n<span class=\"token function\">vi</span> main.tf\n  backend <span class=\"token string\">\"s3\"</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\"># This backend configuration is filled in automatically at test time by Terratest. If you wish to run this example</span>\n    <span class=\"token comment\"># manually, uncomment and fill in the config below.</span>\n    bucket         <span class=\"token operator\">=</span> <span class=\"token string\">\"ex07-tfstate\"</span>\n    key            <span class=\"token operator\">=</span> <span class=\"token string\">\"stage/data-stores/mysql/terraform.tfstate\"</span>\n    region         <span class=\"token operator\">=</span> <span class=\"token string\">\"us-east-2\"</span>\n    dynamodb_table <span class=\"token operator\">=</span> <span class=\"token string\">\"ex07-t101-locks\"</span>\n    <span class=\"token comment\"># encrypt        = true</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\"># 초기화 및 검증 : 환경변수 적용 확인</span>\nterraform init <span class=\"token operator\">&amp;&amp;</span> terraform plan\n\n<span class=\"token comment\"># 배포 : RDS는 생성 시 6분 정도 시간 소요</span>\nterraform apply -auto-approve\nterraform output\naws s3 <span class=\"token function\">ls</span> s3://<span class=\"token variable\">$TF_VAR_bucket_name</span> <span class=\"token parameter variable\">--recursive</span> --human-readable <span class=\"token parameter variable\">--summarize</span>\n\n<span class=\"token comment\"># 이동</span>\n<span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span>/</code></pre></div>\n<ul>\n<li>(상기 과정을 마쳐야 할 수 있습니다!) Staging 웹서버 클러스터 배포하기</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\">#</span>\n<span class=\"token builtin class-name\">cd</span> services/webserver-cluster\n<span class=\"token function\">cat</span> main.tf variables.tf\n\n<span class=\"token comment\"># 환경변수에 지정</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">TF_VAR_db_remote_state_bucket</span><span class=\"token operator\">=</span><span class=\"token variable\">$TF_VAR_bucket_name</span>                       <span class=\"token comment\"># description = \"The name of the S3 bucket used for the database's remote state storage\"</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">TF_VAR_db_remote_state_key</span><span class=\"token operator\">=</span><span class=\"token string\">'stage/data-stores/mysql/terraform.tfstate'</span>  <span class=\"token comment\"># description = \"The name of the key in the S3 bucket used for the database's remote state storage\"</span>\n\n<span class=\"token comment\"># 환경변수 확인</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> TF_VAR_\n\n<span class=\"token comment\"># 초기화 및 검증 : 환경변수 적용 확인</span>\nterraform init <span class=\"token operator\">&amp;&amp;</span> terraform plan\n\n<span class=\"token comment\"># 배포</span>\nterraform apply -auto-approve\n\n<span class=\"token comment\"># ALB DNS주소로 curl 접속 확인</span>\n<span class=\"token assign-left variable\">ALBDNS</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span>terraform output <span class=\"token parameter variable\">-raw</span> alb_dns_name<span class=\"token variable\">)</span></span>\n<span class=\"token keyword\">while</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span> <span class=\"token function\">curl</span> --connect-timeout <span class=\"token number\">1</span>  http://<span class=\"token variable\">$ALBDNS</span> <span class=\"token punctuation\">;</span> <span class=\"token builtin class-name\">echo</span><span class=\"token punctuation\">;</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"------------------------------\"</span><span class=\"token punctuation\">;</span> <span class=\"token function\">date</span><span class=\"token punctuation\">;</span> <span class=\"token function\">sleep</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">done</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-s</span> http://<span class=\"token variable\">$ALBDNS</span>\n\n<span class=\"token comment\"># 삭제</span>\n<span class=\"token comment\"># 각 폴더에서 리소스 삭제</span>\nstage/services/webserver-cluster$ terraform destroy -auto-approve\nstage/data-stores/mysql$ terraform destroy -auto-approve\n03-terraform-state/file-layout-example/global/s3$ terraform destroy -auto-approve <span class=\"token comment\"># 아래 Production 실습을 이어서 할 경우에는 실습 완료 후 삭제 할 것</span>\n\n<span class=\"token comment\"># 이동</span>\n<span class=\"token builtin class-name\">cd</span> ~/terraform-up-and-running-code/code/terraform</code></pre></div>\n<p>cf. Production 배포는 <code class=\"language-text\">04-terraform-module/module-example</code> 의 prod 디렉토리의 RDS와 웹서버 클러스터를 배포하면 됩니다.</p>\n<h3 id=\"tips-and-tricks-무중단-배포-관련\" style=\"position:relative;\"><a href=\"#tips-and-tricks-%EB%AC%B4%EC%A4%91%EB%8B%A8-%EB%B0%B0%ED%8F%AC-%EA%B4%80%EB%A0%A8\" aria-label=\"tips and tricks 무중단 배포 관련 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>tips and tricks: 무중단 배포 관련</h3>\n<p>무중단 배포(zero-downtime deployment)의 경우, 수정된 테라폼 코드나 환경변수를 사용하여 <code class=\"language-text\">terraform apply</code> 를 하면 끝입니다. 배포과정은 상기 내용과 동일하지만, 모듈을 활용하여 배포하는 단계가 다릅니다. 여기서는 배포가 “어떻게” 되는지를 살펴보겠습니다.</p>\n<ul>\n<li>상기 내용과 동일합니다!\n<ul>\n<li>S3/DynamoDB 구동관련 설정</li>\n<li>S3/DynamoDB 배포하기</li>\n</ul>\n</li>\n<li>Staging RDS 배포하기</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># [터미널1] RDS 생성 모니터링</span>\n<span class=\"token keyword\">while</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span> aws rds describe-db-instances <span class=\"token parameter variable\">--query</span> <span class=\"token string\">\"*[].[Endpoint.Address,Endpoint.Port,MasterUsername]\"</span> <span class=\"token parameter variable\">--output</span> text  <span class=\"token punctuation\">;</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"------------------------------\"</span> <span class=\"token punctuation\">;</span> <span class=\"token function\">sleep</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">done</span>\n\n<span class=\"token comment\"># [터미널2]</span>\n<span class=\"token builtin class-name\">cd</span> 05-tips-and-tricks/module-example/stage/data-stores/mysql\n<span class=\"token function\">cat</span> main.tf variables.tf\n\n<span class=\"token comment\"># 환경변수에 지정</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">TF_VAR_db_username</span><span class=\"token operator\">=</span><span class=\"token string\">'cloudneta'</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">TF_VAR_db_password</span><span class=\"token operator\">=</span><span class=\"token string\">'cloudnetaQ!'</span>\n\n<span class=\"token comment\"># 환경변수 확인</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> TF_VAR_\n\n<span class=\"token comment\"># main.tf 에 백엔드 부분 수정</span>\n<span class=\"token function\">vi</span> main.tf\n  backend <span class=\"token string\">\"s3\"</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\"># This backend configuration is filled in automatically at test time by Terratest. If you wish to run this example</span>\n    <span class=\"token comment\"># manually, uncomment and fill in the config below.</span>\n    bucket         <span class=\"token operator\">=</span> <span class=\"token string\">\"ex07-tfstate\"</span>\n    key            <span class=\"token operator\">=</span> <span class=\"token string\">\"stage/data-stores/mysql/terraform.tfstate\"</span>\n    region         <span class=\"token operator\">=</span> <span class=\"token string\">\"us-east-2\"</span>\n    dynamodb_table <span class=\"token operator\">=</span> <span class=\"token string\">\"ex07-t101-locks\"</span>\n    <span class=\"token comment\"># encrypt        = true</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\"># 초기화 및 검증 : 환경변수 적용 확인</span>\nterraform init <span class=\"token operator\">&amp;&amp;</span> terraform plan\n\n<span class=\"token comment\"># 배포 : RDS는 생성 시 6분 정도 시간 소요</span>\nterraform apply -auto-approve\nterraform output\naws s3 <span class=\"token function\">ls</span> s3://<span class=\"token variable\">$TF_VAR_bucket_name</span> <span class=\"token parameter variable\">--recursive</span> --human-readable <span class=\"token parameter variable\">--summarize</span>\n\n<span class=\"token comment\"># 이동</span>\n<span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span>/</code></pre></div>\n<ul>\n<li>(상기 과정을 마쳐야 할 수 있습니다!) Staging 웹서버 배포 후 <strong>무중단 배포 진행</strong>하기</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\">#</span>\n<span class=\"token builtin class-name\">cd</span> services/webserver-cluster\n<span class=\"token function\">cat</span> main.tf variables.tf\n\n<span class=\"token comment\"># 환경변수에 지정</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">TF_VAR_db_remote_state_bucket</span><span class=\"token operator\">=</span><span class=\"token variable\">$TF_VAR_bucket_name</span>                       <span class=\"token comment\"># description = \"The name of the S3 bucket used for the database's remote state storage\"</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">TF_VAR_db_remote_state_key</span><span class=\"token operator\">=</span><span class=\"token string\">'stage/data-stores/mysql/terraform.tfstate'</span>  <span class=\"token comment\"># description = \"The name of the key in the S3 bucket used for the database's remote state storage\"</span>\n\n<span class=\"token comment\"># 환경변수 확인</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> TF_VAR_\n\n<span class=\"token comment\"># 초기화 및 검증 : 환경변수 적용 확인</span>\nterraform init <span class=\"token operator\">&amp;&amp;</span> terraform plan <span class=\"token parameter variable\">-var</span> <span class=\"token assign-left variable\">server_text</span><span class=\"token operator\">=</span><span class=\"token string\">'Old server text'</span>\n\n<span class=\"token comment\"># 배포</span>\nterraform apply -auto-approve <span class=\"token parameter variable\">-var</span> <span class=\"token assign-left variable\">server_text</span><span class=\"token operator\">=</span><span class=\"token string\">'Old server text'</span>\n\n<span class=\"token comment\"># ALB DNS주소로 curl 접속 확인</span>\n<span class=\"token assign-left variable\">ALBDNS</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span>terraform output <span class=\"token parameter variable\">-raw</span> alb_dns_name<span class=\"token variable\">)</span></span>\n<span class=\"token keyword\">while</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span> <span class=\"token function\">curl</span> --connect-timeout <span class=\"token number\">1</span>  http://<span class=\"token variable\">$ALBDNS</span> <span class=\"token punctuation\">;</span> <span class=\"token builtin class-name\">echo</span><span class=\"token punctuation\">;</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"------------------------------\"</span><span class=\"token punctuation\">;</span> <span class=\"token function\">date</span><span class=\"token punctuation\">;</span> <span class=\"token function\">sleep</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">done</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-s</span> http://<span class=\"token variable\">$ALBDNS</span>\n\n<span class=\"token comment\"># [터미널1]</span>\n<span class=\"token assign-left variable\">ALBDNS</span><span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span>직접입력<span class=\"token operator\">></span>\n<span class=\"token keyword\">while</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span> <span class=\"token function\">curl</span> --connect-timeout <span class=\"token number\">1</span>  http://<span class=\"token variable\">$ALBDNS</span> <span class=\"token punctuation\">;</span> <span class=\"token builtin class-name\">echo</span><span class=\"token punctuation\">;</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"------------------------------\"</span><span class=\"token punctuation\">;</span> <span class=\"token function\">date</span><span class=\"token punctuation\">;</span> <span class=\"token function\">sleep</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">done</span>\n\n<span class=\"token comment\"># [터미널2]</span>\n<span class=\"token keyword\">while</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span> aws ec2 describe-instances <span class=\"token parameter variable\">--query</span> <span class=\"token string\">\"Reservations[*].Instances[*].{PublicIPAdd:PublicIpAddress,InstanceName:Tags[?Key=='Name']|[0].Value,Status:State.Name}\"</span> <span class=\"token parameter variable\">--filters</span> <span class=\"token assign-left variable\">Name</span><span class=\"token operator\">=</span>instance-state-name,Values<span class=\"token operator\">=</span>running <span class=\"token parameter variable\">--output</span> text <span class=\"token punctuation\">;</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"------------------------------\"</span> <span class=\"token punctuation\">;</span> <span class=\"token function\">sleep</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">done</span>\n\n<span class=\"token comment\"># 무중단 업그레이드 배포 : 환경변수 수정 적용 >> 오토스케일링그룹 2개중 기존 그룹은 5분 정도 후에 EC2가 삭제됨(오래 걸리니 맘 편히 기다리자)</span>\nterraform plan <span class=\"token parameter variable\">-var</span> <span class=\"token assign-left variable\">server_text</span><span class=\"token operator\">=</span><span class=\"token string\">'NEW server text'</span>\nterraform apply -auto-approve <span class=\"token parameter variable\">-var</span> <span class=\"token assign-left variable\">server_text</span><span class=\"token operator\">=</span><span class=\"token string\">'NEW server text'</span>\n\n<span class=\"token comment\"># 삭제</span>\n<span class=\"token comment\"># 각 폴더에서 리소스 삭제</span>\nstage/services/webserver-cluster$ terraform destroy -auto-approve\nstage/data-stores/mysql$ terraform destroy -auto-approve\n03-terraform-state/file-layout-example/global/s3$ terraform destroy -auto-approve\n\n<span class=\"token comment\"># 이동</span>\n<span class=\"token builtin class-name\">cd</span> ~/terraform-up-and-running-code/code/terraform</code></pre></div>\n<h1 id=\"lessons-learned\" style=\"position:relative;\"><a href=\"#lessons-learned\" aria-label=\"lessons learned permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Lessons Learned</h1>\n<p>제 7장에서는 아래의 내용을 반드시 기억하셨으면 좋겠습니다.</p>\n<ol>\n<li>테라폼을 사용하였을 때의 확실한 이점을 이해했습니다.</li>\n<li>예시의 내용이 <em>정확히</em> 어떻게 되는지 이해할 수 있었습니다.</li>\n<li>향후 자신의 프로젝트나, 회사의 인프라 관리 코드들을 보고 이해할 수 있게 되었습니다.</li>\n<li>향후 나올 8장의 내용 이해 및 실제 프로덕션 레벨에서의 일부를 가정하여, 학습할 수 있게 되었습니다.</li>\n</ol>\n<p>이것으로 제 7장을 마칩니다. 긴 글 읽어주셔서 감사합니다.</p>","fields":{"slug":"/devlog/terraform/2022-12-10---cloudneta-terraform-101-pt07//devlog/terraform/2022-12-10-cloudneta-terraform-101-pt07","tagSlugs":["/tag/terraform/","/tag/iac/","/tag/devops/"]},"frontmatter":{"date":"2022-12-10T19:34:00.000Z","description":"여태 스터디를 하며 배웠던 부분에 대한 one-point lesson을 해봅시다.","tags":["terraform","iac","devops"],"title":"[CloudNet@] 테라폼 스터디 7주차 - 총복습","socialImage":{"publicURL":"/static/d22fecedcdae6e3b11af342e075eefde/terraform07.jpg"}}}},"pageContext":{"slug":"/devlog/terraform/2022-12-10---cloudneta-terraform-101-pt07//devlog/terraform/2022-12-10-cloudneta-terraform-101-pt07"}},"staticQueryHashes":["251939775","357378587","401334301"]}