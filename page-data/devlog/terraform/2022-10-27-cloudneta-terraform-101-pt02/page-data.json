{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/devlog/terraform/2022-10-27-cloudneta-terraform-101-pt02","result":{"data":{"markdownRemark":{"id":"a2b094c1-6d3e-5ebe-b183-87b96fabb4ad","html":"<p>이 내용은 CloudNet@ 에서 진행하는 테라폼 기초 입문 스터디에 대한 연재글입니다.</p>\n<p>스터디에서 사용하는 교재는 Terraform Up &#x26; Running 2nd Edition 입니다.</p>\n<hr>\n<h2 id=\"prerequisites\" style=\"position:relative;\"><a href=\"#prerequisites\" aria-label=\"prerequisites permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Prerequisites</h2>\n<ul>\n<li>AWS의 VPC 환경에 대한 이해\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=FeYagEibtPE\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">[추천!] AWS 강의실 YouTube 채널의 VPC 강의</a></li>\n<li><a href=\"https://docs.aws.amazon.com/ko_kr/vpc/latest/userguide/what-is-amazon-vpc.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Amazon VPC란 무엇인가? (위의 강의를 읽으신 후 일독하시면 크게 도움이 됩니다)</a></li>\n<li><a href=\"https://github.com/s3ich4n/terraform-study-101/blob/main/chapter01/exercises/challenge01/README.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">제가 1주차 도전과제에 대해 공부하며, 요약한 게시글</a>\n<ul>\n<li>도전과제 내용: AWS VPC에 대해 IaC화 후 EC2 웹서버를 추가하여 프로비저닝하기</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>아래에서 2주차 스터디 내용을 공유합니다.</p>\n<p>교재의 2장 중, 코드내용 중 VPC 환경을 만들고 ASG/ELB 구축을 테라폼으로 진행합니다. 이와 함께 상태관리에 대해 다룹니다.</p>\n<h2 id=\"vpc-환경-구축\" style=\"position:relative;\"><a href=\"#vpc-%ED%99%98%EA%B2%BD-%EA%B5%AC%EC%B6%95\" aria-label=\"vpc 환경 구축 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>VPC 환경 구축</h2>\n<p>아래 도식의 환경을 코드로 구성합니다:</p>\n<p>예시코드는 아래 경로를 참고해 주세요.</p>\n<ul>\n<li><a href=\"https://github.com/s3ich4n/terraform-study-101/tree/main/chapter02/exercises/required01\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/s3ich4n/terraform-study-101/tree/main/chapter02/exercises/required01</a></li>\n</ul>\n<p>코드에 대한 설명은 다음과 같습니다:</p>\n<ul>\n<li><code class=\"language-text\">required01_vpc.tf</code>\n<ul>\n<li>프로바이더, VPC를 정의하여, VPC 환경을 작성하였습니다.</li>\n<li>서브넷을 나누었습니다.</li>\n<li>인터넷 게이트웨이를 통해 외부 통신을 사용하도록 하였습니다.</li>\n<li>라우팅 테이블을 통해 서브넷에서 어떤 라우팅 테이블을 타고 트래픽이 흐를 것인지 작성하였습니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">required01_sg.tf</code>\n<ul>\n<li>시큐리티 그룹을 정의하여, 인터넷 게이트웨이를 통한 ingress, egress 포트를 기재하였습니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">required01_ec.tf</code>\n<ul>\n<li>데이터 소스 블록(하단 참고)을 사용하여, AMI(AWS에서 관리하는 머신 이미지) 정보를 가져와 어떻게 사용할 것인지 코드로 작성했습니다.</li>\n<li><code class=\"language-text\">aws_instance</code> 선언 시, <code class=\"language-text\">ami</code> config을 수정하며 상기 데이터 소스 블록의 값을 사용했습니다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"데이터-소스-블록이란\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%86%8C%EC%8A%A4-%EB%B8%94%EB%A1%9D%EC%9D%B4%EB%9E%80\" aria-label=\"데이터 소스 블록이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터 소스 블록이란?</h2>\n<p>예시코드에 있는 내용 중, <code class=\"language-text\">data</code> 로 시작하는 구문은, 데이터 소스 블록을 의미합니다. 이는 아래와 같습니다:</p>\n<ul>\n<li>테라폼을 실행할 때 마다 provider 별로 가져온 읽기 전용 정보를 의미합니다.\n<ul>\n<li>E.g., <a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs/data-sources/ami\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">aws_ami</code></a> 의 데이터 소스 블록은 이런 내용을 가지고 있습니다.</li>\n</ul>\n</li>\n<li>데이터 소스를 통하여 아래 내용을 사용할 수 있습니다.\n<ul>\n<li>테라폼 외부에서 정의된 정보</li>\n<li>별도의 테라폼 구성으로 정의된 정보</li>\n</ul>\n</li>\n<li>다른 코드에서, <code class=\"language-text\">data.&lt;provider>.&lt;name>.&lt;attribute></code> 과 같은 방식으로 호출해올 수 있습니다.</li>\n</ul>\n<p>데이터 소스 블록을 사용하는 방법은 아래와 같습니다:</p>\n<div class=\"gatsby-highlight\" data-language=\"terraform\"><pre class=\"language-terraform\"><code class=\"language-terraform\">data &quot;&lt;PROVIDER&gt;_&lt;TYPE&gt;&quot; &quot;&lt;NAME&gt;&quot; {\n  [CONFIG …]\n}</code></pre></div>\n<blockquote>\n<ul>\n<li>PROVIDER : <code class=\"language-text\">aws</code> 같은 공급자의 이름</li>\n<li>TYPE : <code class=\"language-text\">vpc</code> 같은 사용하려는 데이터 소스의 유형</li>\n<li>NAME : 테라폼 코드에서 이 데이터 소스를 참조하는 데 사용할 수 있는 식별자</li>\n<li>CONFIG : 해당 데이터 소스에 고유한 하나 이상의 인수로 구성됩니다.\n<ul>\n<li>아래의 예시는 <code class=\"language-text\">aws_vpc</code> 데이터 소스를 사용하여 기본 VPC(default vpc)의 데이터를 사용하는 구문입니다.</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>이런 방식으로 호출할 수 있지요:</p>\n<div class=\"gatsby-highlight\" data-language=\"terraform\"><pre class=\"language-terraform\"><code class=\"language-terraform\">data &quot;aws_ami&quot; &quot;s3ich4n-chapter02-ex01-amazonlinux2&quot; {\n  most_recent = true\n  filter {\n    name   = &quot;owner-alias&quot;\n    values = [&quot;amazon&quot;]\n  }\n\n  filter {\n    name   = &quot;name&quot;\n    values = [&quot;amzn2-ami-hvm-*-x86_64-ebs&quot;]\n  }\n\n  owners = [&quot;amazon&quot;]\n}\n\nresource &quot;aws_instance&quot; &quot;s3ich4n-chapter02-ex01-ec2&quot; {\n  ami                         = data.aws_ami.s3ich4n-chapter02-ex01-amazonlinux2.id\n  (중략)\n}</code></pre></div>\n<h2 id=\"vpc환경에서-alb-asg-구축\" style=\"position:relative;\"><a href=\"#vpc%ED%99%98%EA%B2%BD%EC%97%90%EC%84%9C-alb-asg-%EA%B5%AC%EC%B6%95\" aria-label=\"vpc환경에서 alb asg 구축 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>VPC환경에서 ALB, ASG 구축</h2>\n<p>이제 VPC 환경에서 ALB, ASG를 추가한 환경을 구축해보겠습니다. 도식은 아래와 같습니다:</p>\n<p>예시코드는 아래 경로를 참고해 주세요.</p>\n<ul>\n<li><a href=\"https://github.com/s3ich4n/terraform-study-101/tree/main/chapter02/exercises/required02\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/s3ich4n/terraform-study-101/tree/main/chapter02/exercises/required02</a></li>\n</ul>\n<p>구축에 앞서 ALB와 ASG, 그리고 이 둘을 함께 사용하려면 어떻게 해야하는지에 대해 살펴보겠습니다.</p>\n<h3 id=\"asg란\" style=\"position:relative;\"><a href=\"#asg%EB%9E%80\" aria-label=\"asg란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ASG란?</h3>\n<p><a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/auto-scaling-groups.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AWS의 ASG(Auto Scaling Groups)</a>를 의미합니다. EC2 인스턴스의 자동적인 스케일링, 관리를 위해 논리적인 그룹으로 묶는 기능을 수행합니다.</p>\n<ul>\n<li>EC2 인스턴스 클러스터 시작, 인스턴스 상태 모니터링/교체, 부하에 따른 클러스터 사이즈 조정 등을 자동으로 해줍니다.</li>\n<li>따라서, 운영하고자 하는 서비스의 트래픽 양에 따라 클러스터의 적절한 크기를 조절해야 합니다.</li>\n<li>공부를 마치고, <a href=\"https://www.airpair.com/aws/posts/building-a-scalable-web-app-on-amazon-web-services-p1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AWS에 HA 및 scalable system 구축방법에 대한 링크</a>를 읽어보시길 권장합니다.</li>\n</ul>\n<p>ASG는 시작 구성정보를 참고하여 인스턴스를 생성하는데, 재배포를 한다면 시작구성을 변경할 수 없습니다.</p>\n<ul>\n<li>따라서, 리소스 생성, 업데이트, 삭제 방법을 구성하는 수명주기(<code class=\"language-text\">lifecycle</code>) 설정을 추가해야 합니다.\n<ul>\n<li><code class=\"language-text\">create_before_destroy</code> 설정을 이 때 사용합니다.</li>\n<li>테라폼은 리소스를 교체하는 순서를 반대로 하여 교체 리소스를 먼저 생성하고(이전 리소스가 가리키고 있던 참조를 업데이트하여 교체한 리소스를 가리킴) 기존 리소스를 삭제합니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"alb란\" style=\"position:relative;\"><a href=\"#alb%EB%9E%80\" aria-label=\"alb란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ALB란?</h3>\n<p><a href=\"https://docs.aws.amazon.com/ko_kr/elasticloadbalancing/latest/application/introduction.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AWS ALB(Application Load Balancer)</a>를 의미합니다. 둘 이상의 AZ(Availability Zone, 가용 영역)에서 EC2, 컨테이너, IP 주소 등에 대해 들어오는 트래픽을 자동으로 분산하는 역할을 수행합니다.</p>\n<p>→ 트래픽을 분산시키고, 외부에 노출시키는 IP 주소를 단일화합니다.</p>\n<p>ALB의 주요 구성에 대해 알아보겠습니다:</p>\n<ul>\n<li>리스너\n<ul>\n<li>특정 포트, 특정 프로토콜에 대해 수신</li>\n</ul>\n</li>\n<li>리스너 규칙\n<ul>\n<li>특정 경로에 대해 어디로 요청을 “대상 그룹”으로 보낼지 설정</li>\n</ul>\n</li>\n<li>대상 그룹\n<ul>\n<li>요청을 받는 하나 이상의 서버</li>\n</ul>\n</li>\n</ul>\n<p>FYI, AWS에서는 로드 밸런싱을 위한 여러 서비스가 존재합니다.</p>\n<ul>\n<li>NLB (네트워크 로드 밸런서)\n<ul>\n<li>L4 레벨 트래픽 처리에 적합(TCP, UDP, TLS, etc.)합니다.</li>\n</ul>\n</li>\n<li>CLB (클래식 로드 밸런서)\n<ul>\n<li>AWS의 레거시 로드밸런서입니다.</li>\n<li>L7, L4 모두 가능하지만 새로 나온 서비스에 비하면 기능이 적습니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"asg-alb를-사용하려면\" style=\"position:relative;\"><a href=\"#asg-alb%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%A0%A4%EB%A9%B4\" aria-label=\"asg alb를 사용하려면 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ASG, ALB를 사용하려면?</h3>\n<p><strong>ASG, ALB를 함께 사용하려면?</strong></p>\n<ul>\n<li>어떤 인스턴스 그룹을 바라보아야 할지 설정해야 합니다.</li>\n<li>헬스체크 타입 추가(EC2 → ELB)가 필요합니다.</li>\n<li>LB healthcheck 룰을 추가해야합니다.</li>\n</ul>\n<h2 id=\"lessons-learned\" style=\"position:relative;\"><a href=\"#lessons-learned\" aria-label=\"lessons learned permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Lessons Learned</h2>\n<p>제 2장에서는 테라폼을 사용하여 기본적인 환경구축을 수행하는 방법에 대해 배웠습니다. 또한 데이터 소스 블록에 대한 내용을 학습했습니다. 아래 내용을 반드시 기억하셨으면 좋겠습니다.</p>\n<ol>\n<li>VPC 환경을 테라폼으로 표현하는 방법에 대해 배웠습니다.</li>\n<li>VPC 환경에 ALB, ASG를 함께 구축하여 트래픽양에 따른 scale-out을 코드화 하였습니다\n<ol>\n<li>아직 정확히 어떤 시점에, 어떻게 스케일아웃을 하고 다시 원복해야 하는지에 대한 내용은 나오지 않았습니다!</li>\n<li>후에 다시 기술할 예정입니다.</li>\n</ol>\n</li>\n<li>데이터 소스 블록에 대해 배웠습니다.</li>\n</ol>\n<p>이것으로 제 2장을 마칩니다. 긴 글 읽어주셔서 감사합니다.</p>","fields":{"slug":"/devlog/terraform/2022-10-27---cloudneta-terraform-101-pt02//devlog/terraform/2022-10-27-cloudneta-terraform-101-pt02","tagSlugs":["/tag/terraform/","/tag/iac/","/tag/devops/"]},"frontmatter":{"date":"2022-10-27T18:11:00.000Z","description":"Terraform 코드를 통해 VPC 구성과 ALB, ASG 설정을 작성하고, 데이터 소스 블록에 대해 학습합니다.","tags":["terraform","iac","devops"],"title":"[CloudNet@] 테라폼 스터디 2주차 - Terraform 을 통한 VPC, ALB, ASG 배포 실습","socialImage":{"publicURL":"/static/23de681fbb4ea110b56b4f8d37407f1a/terraform02.jpg"}}}},"pageContext":{"slug":"/devlog/terraform/2022-10-27---cloudneta-terraform-101-pt02//devlog/terraform/2022-10-27-cloudneta-terraform-101-pt02"}},"staticQueryHashes":["251939775","357378587","401334301"]}