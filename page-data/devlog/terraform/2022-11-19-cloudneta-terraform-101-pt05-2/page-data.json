{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/devlog/terraform/2022-11-19-cloudneta-terraform-101-pt05-2","result":{"data":{"markdownRemark":{"id":"2597624e-f07f-5673-bd6b-38cc51f185ca","html":"<p>이 내용은 CloudNet@ 에서 진행하는 테라폼 기초 입문 스터디에 대한 연재글입니다.</p>\n<p>스터디에서 사용하는 교재는 <a href=\"http://www.yes24.com/Product/Goods/101511312\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Terraform Up &#x26; Running 2nd Edition</a> 입니다.</p>\n<hr>\n<h1 id=\"prerequisites\" style=\"position:relative;\"><a href=\"#prerequisites\" aria-label=\"prerequisites permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Prerequisites</h1>\n<ul>\n<li><a href=\"https://developer.hashicorp.com/terraform/language/expressions/types\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Terraform: Types and Values</a> 공식문서\n<ul>\n<li>타입과 값에는 어떤 것들이 사용될 수 있는지 확인해봅시다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">count</code>, <code class=\"language-text\">for_each</code> 는 <code class=\"language-text\">resource</code> 내에서 사용될 수 있습니다.</li>\n<li><code class=\"language-text\">for</code> 표현식은 복잡한 타입을 또다른 복잡한 타입으로 변환하는데 쓰입니다.</li>\n</ul>\n<p>아래에서 5주차 스터디 내용을 공유합니다.</p>\n<p>교재의 5장 내용을 다루고 있습니다.</p>\n<h1 id=\"본문\" style=\"position:relative;\"><a href=\"#%EB%B3%B8%EB%AC%B8\" aria-label=\"본문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>본문</h1>\n<p>테라폼을 통해 마치 프로그램을 작성하듯 코드를 작성할 수 있습니다. 이번 챕터에서는 아래의 내용을 학습할 예정입니다:</p>\n<ul>\n<li>반복문, 조건문 사용방법\n<ul>\n<li>여기서는 조건문에 대해 설명합니다.</li>\n</ul>\n</li>\n<li>무중단 배포에 필요한 요소들 사용방법</li>\n<li>주의사항</li>\n</ul>\n<h2 id=\"조건문\" style=\"position:relative;\"><a href=\"#%EC%A1%B0%EA%B1%B4%EB%AC%B8\" aria-label=\"조건문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>조건문</h2>\n<p>테라폼이 제공하는 조건문은 아래와 같이 구성되어 있습니다.</p>\n<ul>\n<li><code class=\"language-text\">count</code> 매개변수를 이용하여 사용: 조건부 리소스에서 사용</li>\n<li><code class=\"language-text\">for_each</code> 와 <code class=\"language-text\">for</code> 표현식: 리소스 내의 조건부 리소스, 인라인 블록에 사용</li>\n<li><code class=\"language-text\">if</code> 문자열 지시자: 문자열 내의 조건문에 사용</li>\n</ul>\n<h3 id=\"count-매개변수\" style=\"position:relative;\"><a href=\"#count-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98\" aria-label=\"count 매개변수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">count</code> 매개변수</h3>\n<p>앞서 살펴보았듯, <code class=\"language-text\">count</code> 매개변수를 사용하면 반복문을 사용할 수 있습니다. 이를 응용하여 조건문 작업 또한 수행할 수 있습니다.</p>\n<h4 id=\"count-매개변수를-사용한-if-구문\" style=\"position:relative;\"><a href=\"#count-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C-if-%EA%B5%AC%EB%AC%B8\" aria-label=\"count 매개변수를 사용한 if 구문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">count</code> 매개변수를 사용한 <code class=\"language-text\">if</code> 구문</h4>\n<p>일부 사용자들에게는 모듈을 생성하고, 나머지 사용자에게는 생성해주지 않기 위해선 <strong>분기 처리</strong>를 수행합니다.</p>\n<p>이를 위해서는 Boolean 입력 변수를 변수값으로 추가해주고, 아래와같은 조건 표현식(conditional expression)을 추가합니다.</p>\n<blockquote>\n<div class=\"gatsby-highlight\" data-language=\"terraform\"><pre class=\"language-terraform\"><code class=\"language-terraform\">variable &quot;enable_autoscaling&quot; {\n  description = &quot;If set to true, enable auto scaling&quot;\n  type        = bool\n}\n\n&lt;CONDITION&gt; ? &lt;TRUE_VAL&gt; : &lt;FALSE_VAL&gt;</code></pre></div>\n<ul>\n<li><code class=\"language-text\">CONDITION</code>: boolean 판단 조건을 기재합니다.</li>\n<li><code class=\"language-text\">TRUE_VAL</code>: 판단 조건이 참일 때의 결과값입니다.</li>\n<li><code class=\"language-text\">FALSE_VAL</code>: 판단 조건이 거짓일 때의 결과값입니다.</li>\n</ul>\n</blockquote>\n<p>상기 조건을 조합하면 아래값처럼 <code class=\"language-text\">webserver-cluster</code> 모듈을 업데이트 할 수 있지요.</p>\n<div class=\"gatsby-highlight\" data-language=\"terraform\"><pre class=\"language-terraform\"><code class=\"language-terraform\">resource &quot;aws_autoscaling_schedule&quot; &quot;scale_out_during_business_hours&quot; {\n  # enable_autoscaling 값이 참/거짓일 때에 따라 auto scaling을 허용/불허할 수 있습니다.\n  count = var.enable_autoscaling ? 1 : 0\n\n  scheduled_action_name  = &quot;${var.cluster_name}-scale-out-during-business-hours&quot;\n  min_size               = 2\n  max_size               = 10\n  desired_capacity       = 10\n  recurrence             = &quot;0 9 * * *&quot; # 이 값은 cron 양식을 따릅니다!\n  autoscaling_group_name = aws_autoscaling_group.example.name\n}\n\nresource &quot;aws_autoscaling_schedule&quot; &quot;scale_in_at_night&quot; {\n  count = var.enable_autoscaling ? 1 : 0\n\n  scheduled_action_name  = &quot;${var.cluster_name}-scale-in-at-night&quot;\n  min_size               = 2\n  max_size               = 10\n  desired_capacity       = 2\n  recurrence             = &quot;0 17 * * *&quot;\n  autoscaling_group_name = aws_autoscaling_group.example.name\n}</code></pre></div>\n<p>이러한 조건을 staging 서버에서는 <code class=\"language-text\">false</code>로, production 서버에서는 <code class=\"language-text\">true</code> 로 두기 위해선 아래와 같이 사용하면 됩니다.</p>\n<ul>\n<li>staging 서버의 <code class=\"language-text\">main.tf</code> 파일에서는?</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"terraform\"><pre class=\"language-terraform\"><code class=\"language-terraform\">module &quot;webserver_cluster&quot; {\n  source = &quot;../../../../modules/services/webserver-cluster&quot;\n\n  cluster_name           = &quot;webservers-stage&quot;\n  db_remote_state_bucket = &quot;(YOUR_BUCKET_NAME)&quot;\n  db_remote_state_key    = &quot;stage/data-stores/mysql/terraform.tfstate&quot;\n\n  instance_type        = &quot;t2.micro&quot;\n  min_size             = 2\n  max_size             = 2\n  # boolean 타입이므로, 해당 값을 지정해서, 설정이 구동되게 지정해줄 수 있습니다.\n  enable_autoscaling   = false\n}</code></pre></div>\n<ul>\n<li>production 서버의 <code class=\"language-text\">main.tf</code> 파일에서는?</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"terraform\"><pre class=\"language-terraform\"><code class=\"language-terraform\">module &quot;webserver_cluster&quot; {\n  source = &quot;../../../../modules/services/webserver-cluster&quot;\n\n  cluster_name           = &quot;webservers-prod&quot;\n  db_remote_state_bucket = &quot;(YOUR_BUCKET_NAME)&quot;\n  db_remote_state_key    = &quot;prod/data-stores/mysql/terraform.tfstate&quot;\n\n  instance_type        = &quot;m4.large&quot;\n  min_size             = 2\n  max_size             = 10\n  # boolean 타입이므로, 해당 값을 지정해서, 설정이 구동되게 지정해줄 수 있습니다.\n  enable_autoscaling   = true\n\n  custom_tags = {\n    Owner     = &quot;team-foo&quot;\n    ManagedBy = &quot;terraform&quot;\n  }\n}</code></pre></div>\n<h4 id=\"count-매개변수를-사용한-if-else-구문\" style=\"position:relative;\"><a href=\"#count-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C-if-else-%EA%B5%AC%EB%AC%B8\" aria-label=\"count 매개변수를 사용한 if else 구문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">count</code> 매개변수를 사용한 <code class=\"language-text\">if-else</code> 구문</h4>\n<p>특정 IAM 사용자에게 CloudWatch에 대한 액세스 권한을 부여하는 예시로 살펴보겠습니다. 이 파일은 별도의 정책관련 테라폼 파일로 만들면 되겠지요. (<code class=\"language-text\">s3ich4n</code>이란 유저에 대해 권한을 부여해보죠)</p>\n<ul>\n<li>읽기 권한만 부여하기 위한 예시값 (<code class=\"language-text\">iam_read_only.tf</code>)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"terraform\"><pre class=\"language-terraform\"><code class=\"language-terraform\">resource &quot;aws_iam_policy&quot; &quot;cloudwatch_read_only&quot; {\n  name   = &quot;cloudwatch-read-only&quot;\n  policy = data.aws_iam_policy_document.cloudwatch_read_only.json\n}\n\ndata &quot;aws_iam_policy_document&quot; &quot;cloudwatch_read_only&quot; {\n  statement {\n    effect    = &quot;Allow&quot;\n    # cloudwatch의 일부 기능들(read 파트)에 대해서만 권한을 허용하였습니다.\n    actions   = [\n      &quot;cloudwatch:Describe*&quot;,\n      &quot;cloudwatch:Get*&quot;,\n      &quot;cloudwatch:List*&quot;\n    ]\n    resources = [&quot;*&quot;]\n  }\n}</code></pre></div>\n<ul>\n<li>읽기/쓰기 권한을 부여하기 위한 예시값(<code class=\"language-text\">iam_rw.tf</code>)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"terraform\"><pre class=\"language-terraform\"><code class=\"language-terraform\">resource &quot;aws_iam_policy&quot; &quot;cloudwatch_full_access&quot; {\n  name   = &quot;cloudwatch-full-access&quot;\n  policy = data.aws_iam_policy_document.cloudwatch_full_access.json\n}\n\ndata &quot;aws_iam_policy_document&quot; &quot;cloudwatch_full_access&quot; {\n  statement {\n    effect    = &quot;Allow&quot;\n    # cloudwatch의 전체 기능에 대해 권한을 허용하였습니다.\n    actions   = [&quot;cloudwatch:*&quot;]\n    resources = [&quot;*&quot;]\n  }\n}</code></pre></div>\n<p><code class=\"language-text\">give_s3ich4n_cloudwatch_full_access</code> 이라는 변수값에 기반하여, 리소스를 어떻게 적용할지 살펴봅시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"terraform\"><pre class=\"language-terraform\"><code class=\"language-terraform\">variable &quot;give_s3ich4n_cloudwatch_full_access&quot; {\n  description = &quot;If true, s3ich4n gets full access to CloudWatch&quot;\n  type        = bool\n}</code></pre></div>\n<p>리소스 생성 시, 동작수행을 위해 <code class=\"language-text\">count</code> 매개변수와 조건 표현식을 모두 사용해봅시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"terraform\"><pre class=\"language-terraform\"><code class=\"language-terraform\">resource &quot;aws_iam_user_policy_attachment&quot; &quot;neo_cloudwatch_full_access&quot; {\n  count = var.give_neo_cloudwatch_full_access ? 1 : 0\n\n  user       = aws_iam_user.example[0].name\n  policy_arn = aws_iam_policy.cloudwatch_full_access.arn\n}\n\nresource &quot;aws_iam_user_policy_attachment&quot; &quot;neo_cloudwatch_read_only&quot; {\n  count = var.give_neo_cloudwatch_full_access ? 0 : 1\n\n  user       = aws_iam_user.example[0].name\n  policy_arn = aws_iam_policy.cloudwatch_read_only.arn\n}</code></pre></div>\n<ul>\n<li>위 코드에는 2개의 <code class=\"language-text\">aws_iam_user_policy_attachment</code> 리소스가 포함되어 있습니다.</li>\n<li>윗 부분은 전체 액세스 권한을 첨부하는 if절 이고, 아래는 읽기 전용 권한을 첨부하는 else 절입니다.</li>\n<li>위 접근 방식은 테라폼 코드가 if 나 else 절을 알필요가 없습니다.</li>\n</ul>\n<h3 id=\"for_each-와-for-표현식\" style=\"position:relative;\"><a href=\"#for_each-%EC%99%80-for-%ED%91%9C%ED%98%84%EC%8B%9D\" aria-label=\"for_each 와 for 표현식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">for_each</code> 와 <code class=\"language-text\">for</code> 표현식</h3>\n<p><code class=\"language-text\">for_each</code> 표현식을 빈 컬렉션으로 전달하면, 0개의 리소스 또는 0개의 인라인 블록을 생성합니다. 비어있지 않은 컬렉션을 전달하면 하나 이상의 리소스 또는 인라인 블록을 만듭니다.</p>\n<p>이를 표현하기 위해서는 조건부로 어떻게 표현할까요? <code class=\"language-text\">for_each</code> 표현식과 <code class=\"language-text\">for</code> 표현식을 결합하여 사용할 수 있습니다. 예시값을 살펴보시지요.</p>\n<div class=\"gatsby-highlight\" data-language=\"terraform\"><pre class=\"language-terraform\"><code class=\"language-terraform\">dynamic &quot;tag&quot; {\n    for_each = {\n    \tfor key, value in var.custom_tags:\n    \tkey =&gt; upper(value)\n    \tif key != &quot;Name&quot;\n    }\n\n    content {\n    \tkey                 = tag.key\n    \tvalue               = tag.value\n    \tpropagate_at_launch = true\n    }\n}</code></pre></div>\n<ul>\n<li>중첩된 <code class=\"language-text\">for</code> 표현식은 일관성을 위해 <code class=\"language-text\">var.custom_tags</code> 를 반복하며 각 값을 대문자로 변환하고 모듈이 이미 자체 <code class=\"language-text\">Name</code> 태그를 설정했으므로, <code class=\"language-text\">for</code> 표현식의 조건을 사용하여 <code class=\"language-text\">key</code> 집합을 <code class=\"language-text\">Name</code> 으로 필터링합니다.</li>\n<li><code class=\"language-text\">for</code> 표현식에서 값을 필터링하여 임의 조건부 논리를 구현할 수 있습니다.</li>\n<li>리소스의 복사본을 여러 개 만들 때는 count 보다 for_each 를 사용하는 것이 더 낫지만,\n<ul>\n<li>조건 논리의 경우 비어 있지 않은 컬렉션에 for_each 를 설정하는 것보다 count 를 <code class=\"language-text\">0</code> 또는 <code class=\"language-text\">1</code>로 설정하는 것이 간단합니다.</li>\n</ul>\n</li>\n<li>즉, <strong>리소스를 조건부로 생성</strong>할 때는 <strong>count</strong> 를 사용할 수 있지만, <strong>그 외 모든 유형의 반복문 또는 조건문</strong>에는 <strong>for_each</strong> 를 사용합니다.</li>\n</ul>\n<h3 id=\"if-문자열-지시자\" style=\"position:relative;\"><a href=\"#if-%EB%AC%B8%EC%9E%90%EC%97%B4-%EC%A7%80%EC%8B%9C%EC%9E%90\" aria-label=\"if 문자열 지시자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">if</code> 문자열 지시자</h3>\n<p><code class=\"language-text\">if</code> 문자열 지시자를 살펴봅시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"terraform\"><pre class=\"language-terraform\"><code class=\"language-terraform\"># if 구문의 사용방법 입니다.\n%{if &lt;CONDITION&gt; }&lt;TRUEVAL&gt;%{endif}\n\n# if-else 구문의 사용방법입니다.\n%{ for &lt;INDEX&gt;, &lt;ITEM&gt; in &lt;COLLECTION&gt; }&lt;BODY&gt;%{if &lt;EXPRESSION&gt;}%{ else }&lt;FALSEVAL&gt;%{ endif }%{ endfor }</code></pre></div>\n<ul>\n<li>COLLECTION: 반복할 리스트, 맵. 말 그대로 반복 가능한 컬렉션을 의미합니다.</li>\n<li>INDEX: 이터레이션 시의 인덱스값을 표현합니다.</li>\n<li>ITEM: 각 항목에 할당할 로컬 변수의 이름입니다.</li>\n<li>BODY: ITEM을 참조할 수 있는 각각의 반복을 렌더링하는 대상입니다.</li>\n<li>EXPRESSION: 참/거짓을 판별하는 조건입니다.</li>\n<li>TRUEVAL: 참일 때 반복문을 통해 추가할 값입니다.</li>\n<li>FALSEVAL: 거짓일 때 반복문을 통해 추가할 값입니다.</li>\n</ul>\n<p><a href=\"https://github.com/brikis98/terraform-up-and-running-code/blob/master/code/terraform/05-tips-and-tricks/loops-and-if-statements/live/global/string-directives/main.tf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">예시</a>를 보면서 함께 살펴봅시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"terraform\"><pre class=\"language-terraform\"><code class=\"language-terraform\">variable &quot;names&quot; {\n  description = &quot;A list of names&quot;\n  type        = list(string)\n  default     = [&quot;alice&quot;, &quot;bob&quot;, &quot;charlie&quot;]\n}\n\n# if 구문을 사용하는 방법입니다.\noutput &quot;for_directive_index_if&quot; {\n  value = &lt;&lt;EOF\n%{ for i, name in var.names }\n  ${name}%{ if i &lt; length(var.names) - 1 }, %{ endif }\n%{ endfor }\nEOF\n}\n\n# 마지막 `,` 문자에 대해 strip을 할 수도 있습니다.\noutput &quot;for_directive_index_if_strip&quot; {\n  value = &lt;&lt;EOF\n%{~ for i, name in var.names ~}\n${name}%{ if i &lt; length(var.names) - 1 }, %{ endif }\n%{~ endfor ~}\nEOF\n}\n\n# 마지막 `,` 문자에 대해 strip을 할 수도 있습니다.\noutput &quot;for_directive_index_if_else_strip&quot; {\n  value = &lt;&lt;EOF\n%{~ for i, name in var.names ~}\n${name}%{ if i &lt; length(var.names) - 1 }, %{ else }.%{ endif }\n%{~ endfor ~}\nEOF\n}</code></pre></div>\n<p><code class=\"language-text\">terraform init &amp;&amp; terraform apply</code>를 수행하면 아래와 같은 결과값을 보실 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ terraform init <span class=\"token operator\">&amp;&amp;</span> terraform apply\n\n<span class=\"token punctuation\">(</span>생략<span class=\"token punctuation\">)</span>\n\nApply complete<span class=\"token operator\">!</span> Resources: <span class=\"token number\">0</span> added, <span class=\"token number\">0</span> changed, <span class=\"token number\">0</span> destroyed.\n\nOutputs:\n\nfor_directive_index_if <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">EOT\n\n  alice,\n\n  bob,\n\n  charlie\n\n\nEOT</span>\nfor_directive_index_if_else_strip <span class=\"token operator\">=</span> <span class=\"token string\">\"alice, bob, charlie.\"</span>\nfor_directive_index_if_strip <span class=\"token operator\">=</span> <span class=\"token string\">\"alice, bob, charlie\"</span></code></pre></div>\n<h1 id=\"lessons-learned\" style=\"position:relative;\"><a href=\"#lessons-learned\" aria-label=\"lessons learned permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Lessons Learned</h1>\n<p>제 5장에서는 아래의 내용을 반드시 기억하셨으면 좋겠습니다.</p>\n<ol>\n<li>\n<p>(중요!) Prerequisite를 반드시 읽어주세요. 테라폼의 타입과 값에 대한 내용은 알고있어야 앞으로의 진행이 수월할 것입니다!</p>\n<ol>\n<li>프로그래밍 언어처럼 다루려면, 어떤 타입과 값을 사용할 수 있는지는 기본적으로 알아야 하기 때문입니다.</li>\n</ol>\n</li>\n<li>\n<p>조건문의 사용방법과 주의사항에 대해 배웠습니다.</p>\n</li>\n</ol>\n<p>이것으로 제 5장, 조건문 설명을 마칩니다. 긴 글 읽어주셔서 감사합니다.</p>","fields":{"slug":"/devlog/terraform/2022-11-19---cloudneta-terraform-101-pt05-2//devlog/terraform/2022-11-19-cloudneta-terraform-101-pt05-2","tagSlugs":["/tag/terraform/","/tag/iac/","/tag/devops/"]},"frontmatter":{"date":"2022-11-19T23:52:57.000Z","description":"Terraform의 타입과 값이 어떻게 쓰이는지 알고있다는 가정 하에, 반복문과 조건문을 사용하여 로직을 표현하는 방법을 담았습니다. 그 중, 조건문을 살펴봅시다.","tags":["terraform","iac","devops"],"title":"[CloudNet@] 테라폼 스터디 5주차 - Terraform의 반복문과 조건문 (2) - 조건문","socialImage":{"publicURL":"/static/e002d5ded2f8cf0295be48fced9525bd/terraform05.jpg"}}}},"pageContext":{"slug":"/devlog/terraform/2022-11-19---cloudneta-terraform-101-pt05-2//devlog/terraform/2022-11-19-cloudneta-terraform-101-pt05-2"}},"staticQueryHashes":["251939775","357378587","401334301"]}