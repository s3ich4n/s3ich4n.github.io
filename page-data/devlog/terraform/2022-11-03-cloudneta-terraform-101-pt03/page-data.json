{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/devlog/terraform/2022-11-03-cloudneta-terraform-101-pt03","result":{"data":{"markdownRemark":{"id":"2578b228-abdf-57db-ad16-26ff51d76301","html":"<p>이 내용은 CloudNet@ 에서 진행하는 테라폼 기초 입문 스터디에 대한 연재글입니다.</p>\n<p>스터디에서 사용하는 교재는 Terraform Up &#x26; Running 2nd Edition 입니다.</p>\n<hr>\n<h1 id=\"prerequisites\" style=\"position:relative;\"><a href=\"#prerequisites\" aria-label=\"prerequisites permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Prerequisites</h1>\n<ul>\n<li><a href=\"https://docs.aws.amazon.com/ko_kr/AmazonS3/latest/userguide/Welcome.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AWS S3</a>\n<ul>\n<li>오브젝트를 버킷 단위로 저장하는 클라우드 스토리지</li>\n</ul>\n</li>\n<li>AWS DynamoDB\n<ul>\n<li>AWS에서 제공하는 NoSQL 데이터베이스 서버</li>\n</ul>\n</li>\n<li>(스포!) 원격지에 테라폼의 “상태”를 기록하기 위해 사용합니다!</li>\n</ul>\n<p>아래에서 3주차 스터디 내용을 공유합니다.</p>\n<p>교재의 3장을 다룹니다.</p>\n<h1 id=\"들어가며\" style=\"position:relative;\"><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EB%A9%B0\" aria-label=\"들어가며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>들어가며…</h1>\n<p>테라폼의 상태 관리에 대해 정리하고자 합니다. 왜 상태관리를 해야하는지, 어떤방안이 있으며 어떤식으로 작성하면 좋은지 작성합니다.</p>\n<h2 id=\"테라폼-상태관리의-필요성\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EB%9D%BC%ED%8F%BC-%EC%83%81%ED%83%9C%EA%B4%80%EB%A6%AC%EC%9D%98-%ED%95%84%EC%9A%94%EC%84%B1\" aria-label=\"테라폼 상태관리의 필요성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테라폼 상태관리의 필요성</h2>\n<p>테라폼은 기본적으로 생성한 인프라에 대한 정보를 상태파일에 기록합니다.</p>\n<ul>\n<li><code class=\"language-text\">terraform.tfstate</code> 파일로 기록됩니다.</li>\n<li>상태 파일은 프라이빗 API 임에 유의합니다!\n<ul>\n<li>배포할 때 마다 테라폼이 알아서 작성하는 파일입니다. <strong>임의로 건들여서는 안됩니다</strong>!</li>\n</ul>\n</li>\n</ul>\n<p>본격적으로 테라폼을 도입하고, 코드를 작성/배포하다 보면 자연스럽게 여러 사람들이 작업하겠지요. 그렇다면 자연스레 아래와 같은 요구사항이 발생할 수 있습니다.</p>\n<ul>\n<li>상태파일 저장을 위한 <em>“공유 스토리지”</em> 사용 필요</li>\n<li>상태파일 잠금(Locking)이 필요\n<ul>\n<li>한번에 한 명령만 실행; 경쟁 상태(<em>race condition</em>) 방지 필요</li>\n</ul>\n</li>\n<li>상태파일을 격리가 필요\n<ul>\n<li>개발환경, 테스트환경, 스테이징 환경, 프로덕션 환경 등이 잘 분리되어있어야 함</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"테라폼-상태-공유-방법\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EB%9D%BC%ED%8F%BC-%EC%83%81%ED%83%9C-%EA%B3%B5%EC%9C%A0-%EB%B0%A9%EB%B2%95\" aria-label=\"테라폼 상태 공유 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테라폼 상태 공유 방법</h2>\n<p>운영, 프로덕션 레벨에서 팀 단위로 인프라 구성 코드를 공유하는 방법은 여러가지가 있습니다.</p>\n<h3 id=\"git-등의-vcs를-이용하면\" style=\"position:relative;\"><a href=\"#git-%EB%93%B1%EC%9D%98-vcs%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EB%A9%B4\" aria-label=\"git 등의 vcs를 이용하면 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Git 등의 VCS를 이용하면?</h3>\n<ul>\n<li>push/pull 시 실수로 파일을 빼먹거나 해서 문제가 발생할 수 있습니다.\n<ul>\n<li>버그를 잡은 코드가 다시 들어가거나</li>\n<li>그로인해 인프라가 복제되거나, 사라지거나… :scream:</li>\n</ul>\n</li>\n<li>락을 걸 수 없음(<code class=\"language-text\">terraform apply</code> 에 대한 락을 의미)\n<ul>\n<li>한번 한 명령만 실행할 수 없습니다.</li>\n</ul>\n</li>\n<li>시크릿 파일 관리가 곤란함\n<ul>\n<li>테라폼의 모든 데이터는 평문으로 쓰임</li>\n<li>주요 기밀정보가 <strong>평문으로 기록</strong>됩니다! :scream:</li>\n</ul>\n</li>\n</ul>\n<p>이런 문제를 해결하기 위해선, 원격 백엔드를 사용합니다. 1장에서 배운 “backend”의 저장공간을 원격 저장소로 설정하는 것을 의미합니다.</p>\n<h3 id=\"테라폼의-원격-백엔드-를-사용하면\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EB%9D%BC%ED%8F%BC%EC%9D%98-%EC%9B%90%EA%B2%A9-%EB%B0%B1%EC%97%94%EB%93%9C-%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%A9%B4\" aria-label=\"테라폼의 원격 백엔드 를 사용하면 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테라폼의 원격 백엔드 를 사용하면?</h3>\n<ul>\n<li><code class=\"language-text\">.tfstate</code> 파일을 원격지에 두고 관리할 수 있습니다.\n<ul>\n<li>AWS S3\n<ul>\n<li>GCP 클라우드 스토리지</li>\n<li>Azure storage</li>\n<li>HashiCorp 사의\n<ul>\n<li>Terraform Cloud (비싸고 좋고 추천받음)</li>\n<li>Terraform Pro</li>\n<li>Terraform Enterprise</li>\n</ul>\n</li>\n<li>etc.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>본 교재에서는 AWS S3와 DynamoDB의 결합을 이용하여 소개합니다.</li>\n</ul>\n<h1 id=\"테라폼-상태-관리\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EB%9D%BC%ED%8F%BC-%EC%83%81%ED%83%9C-%EA%B4%80%EB%A6%AC\" aria-label=\"테라폼 상태 관리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테라폼 상태 관리</h1>\n<p>그렇다면, 원격 백엔드를 활용한 상태관리를 살펴봅시다.</p>\n<p>제 3장의 예시를 보면 dev, staging 환경을 S3, DynamoDB로 분리하긴 했지만, 상태파일 자체가 단일인 상황은 막을 수 없습니다. 따라서, 책에서는 상태 격리에 대해서는 두가지 접근법을 함께 사용하기를 제안합니다.</p>\n<ol>\n<li>\n<p>테라폼의 <code class=\"language-text\">Workspace</code> (이하 워크스페이스) 라는 개념</p>\n<ul>\n<li>복수개의/분리된/이름이 지정된 워크스페이스를 사용하여 상태파일을 격리합니다.</li>\n</ul>\n</li>\n<li>\n<p>분리된 파일 레이아웃 지정</p>\n<ul>\n<li>개발환경, 스테이징 환경, 실제 프로덕션 환경(!)에 대한 분리를 통해 실수를 방지할 수 있습니다.</li>\n<li>디렉토리 구조를 통한 분리를 의미합니다.\n<ul>\n<li>[예습!] 이는 모듈화 및 테라폼 내의 <code class=\"language-text\">function</code> 기능과도 밀접한 영향을 가집니다. 필요한 사항에 대해서는 프로그램을 작성하거나 모듈화를 잘 하여 반복되는 코드를 없애자는 것이 주요 골자죠.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"상태관리-1-workspace-설정\" style=\"position:relative;\"><a href=\"#%EC%83%81%ED%83%9C%EA%B4%80%EB%A6%AC-1-workspace-%EC%84%A4%EC%A0%95\" aria-label=\"상태관리 1 workspace 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>상태관리 (1): Workspace 설정</h2>\n<p>그렇다면, 상태관리를 가능하게 하는 방법 중 하나인 <code class=\"language-text\">Workspace</code>를 알아봅시다.</p>\n<p>테라폼은 기본적으로 <code class=\"language-text\">default</code> 라는 워크스페이스를 사용합니다. 새 작업공간을 만들기 위해서는 <code class=\"language-text\">terraform workspace</code> 커맨드를 사용합니다.</p>\n<p>그렇다면 워크스페이스를 변경하는 것은 어떤 의미를 가질까요?</p>\n<ul>\n<li><strong>다른 작업 공간으로 전환</strong>하는 것은 <strong>상태 파일이 저장된 경로를 변경</strong>하는 것과 같습니다.</li>\n<li>작업 공간은 코드 리팩토링을 시도하는 것 같이 이미 <strong>배포되어 있는 인프라에 영향을 주지 않고 테라폼 모듈을 테스트</strong> 할 때 유용합니다.</li>\n<li>다시말해, 새로운 작업 공간을 생성하여 완전히 <strong>동일한 인프라의 복사본을 배포</strong>할 수 있지만 상태 정보는 별도의 파일에 저장합니다.</li>\n</ul>\n<p>상술하였듯, 워크스페이스 지정<strong>만</strong>으로는 문제를 해결할 수 없습니다. 후술할 파일 레이아웃을 함께 지정하여 작업하는 것이 권장됩니다. 어떤 이유로 인해 워크스페이스 만을 사용할 수 없는지 아래에서 설명하겠습니다:</p>\n<ol>\n<li>먼저, 모든 작업 공간의 상태 파일은 동일한 백엔드(예. 동일한 S3 버킷)에 저장합니다. 모든 작업 공간이 동일한 인증과 접근 통제를 사용합니다.\n<ul>\n<li>E.g., 테스트 환경과 프로덕션 환경이 다른 백엔드를 사용하는 경우, 백엔드에 다른 보안 수준의 통제 설정을 수행하는 것은 불가능합니다.</li>\n</ul>\n</li>\n<li>코드나 터미널에 현재 작업 공간에 대한 정보가 표시 되지 않습니다. 코드 탐색 시 한 작업 공간에 배치된 모듈은 다른 모든 작업 공간에 배치된 모듈과 동일합니다.\n<ul>\n<li>이로 인해 인프라를 제대로 파악하기 어려워 유지 관리가 어렵게 됩니다.</li>\n</ul>\n</li>\n<li>위 두 항목의 결합된 문제가 발생 할 수 있음. 예를 들면 테스트 환경이 아닌 프로덕션 환경에서 <code class=\"language-text\">terraform destroy</code> <strong>명령을 실행</strong> 할 수 있습니다… :scream_cat:\n<ul>\n<li>검증과 운영 환경이 동일한 인증 매커니즘을 사용하기 때문에 위 오류에서 보호할 방법이 없습니다.</li>\n</ul>\n</li>\n<li>따라서 <strong>파일 레이아웃</strong>을 이용한 격리를 함께 사용할 것을 권장합니다.</li>\n</ol>\n<h2 id=\"상태관리-2-파일-레이아웃을-이용한-구성파일-격리\" style=\"position:relative;\"><a href=\"#%EC%83%81%ED%83%9C%EA%B4%80%EB%A6%AC-2-%ED%8C%8C%EC%9D%BC-%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EA%B5%AC%EC%84%B1%ED%8C%8C%EC%9D%BC-%EA%B2%A9%EB%A6%AC\" aria-label=\"상태관리 2 파일 레이아웃을 이용한 구성파일 격리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>상태관리 (2): 파일 레이아웃을 이용한 구성파일 격리</h2>\n<p>상태관리 방법 중 또다른 하나는 파일 레이아웃을 잡는 것입니다. 핵심은 아래와 같습니다.</p>\n<ul>\n<li>테라폼 프로젝트를 생성하고, 파일레이아웃을 잡습니다.\n<ul>\n<li>각 구성파일을 분리된 폴더에 넣습니다(E.g., staging, production, etc.).</li>\n<li>필요에 따라 디렉토리 별로에 서로 다른 백엔드 환경을 구성합니다(E.g., S3 버킷 백엔드의 AWS 계정분리).</li>\n</ul>\n</li>\n</ul>\n<p>예시를 위해, 아래와 같은 구조를 가진다고 하죠.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.\n├── global\n│   └── s3\n│       ├── main.tf\n│       └── outputs.tf\n├── mgmt\n│   ├── services\n│   └── vpc\n├── prod\n│   ├── services\n│   └── vpc\n└── stage\n    ├── data-stores\n    │   └── mysql\n    │       ├── main-vpgsg.tf\n    │       ├── main.tf\n    │       ├── outputs.tf\n    │       ├── terraform.tfstate\n    │       └── variables.tf\n    └── services\n        └── webserver-cluster\n            ├── main.tf\n            └── user-data.sh</code></pre></div>\n<ul>\n<li>\n<p>최상위 폴더</p>\n<ul>\n<li><strong>stage</strong> : 테스트 환경과 같은 사전 프로덕션 워크로드 workload 환경</li>\n<li><strong>prod</strong> : 사용자용 맵 같은 프로덕션 워크로드 환경</li>\n<li><strong>mgmt</strong> : 베스천 호스트(Bastion Host), 젠킨스(Jenkins) 와 같은 데브옵스 도구 환경</li>\n<li><strong>global</strong> : S3, IAM과 같이 모든 환경에서 사용되는 리소스를 배치</li>\n</ul>\n</li>\n<li>\n<p>각 환경별 구성 요소</p>\n<ul>\n<li><strong>vpc</strong> : 해당 환경을 위한 네트워크 토폴로지</li>\n<li><strong>services</strong> : 해당 환경에서 서비스되는 애플리케이션, 각 앱은 자체 폴더에 위치하여 다른 앱과 분리</li>\n<li><strong>data-storage</strong> : 해당 환경 별 데이터 저장소. 각 데이터 저장소 역시 자체 폴더에 위치하여 다른 데이터 저장소와 분리</li>\n</ul>\n</li>\n<li>\n<p>명명 규칙 naming conventions (예시)</p>\n<ul>\n<li><strong>variables.tf</strong> : 입력 변수</li>\n<li><strong>outputs.tf</strong> : 출력 변수</li>\n<li><strong>main-xxx.tf</strong> : 리소스 → 개별 테라폼 파일 규모가 커지면 특정 기능을 기준으로 <strong>별도 파일</strong>로 분리\n<ul>\n<li>E.g., main-iam.tf, main-s3.tf 등</li>\n<li>후에 배울 <strong>모듈</strong> 단위로 나눌 수 있습니다.</li>\n</ul>\n</li>\n<li><strong>dependencies.tf</strong> : 데이터 소스</li>\n<li><strong>providers.tf</strong> : 공급자</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"상태관리-예제-1\" style=\"position:relative;\"><a href=\"#%EC%83%81%ED%83%9C%EA%B4%80%EB%A6%AC-%EC%98%88%EC%A0%9C-1\" aria-label=\"상태관리 예제 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>상태관리 예제 (1)</h1>\n<p>이 문단에서는 ELB, ASG, 그리고 RDS가 구축된 환경을 만들고, 이에 대해 디렉토리 구조를 아래와 같이 작성하여 실습하도록 하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">├── global\n│   └── s3\n│       ├── main.tf\n│       └── outputs.tf\n└── stage\n    ├── data-stores\n    │   └── mysql\n    │       ├── main-vpgsg.tf\n    │       ├── main.tf\n    │       ├── outputs.tf\n    │       └── variables.tf\n    └── services\n        └── webserver-cluster\n            ├── main.tf\n            └── user-data.sh</code></pre></div>\n<p>코드의 위치는 아래와 같습니다:</p>\n<ul>\n<li><a href=\"https://github.com/s3ich4n/terraform-study-101/tree/main/chapter03/example03-file-layout\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/s3ich4n/terraform-study-101/tree/main/chapter03/example03-file-layout</a></li>\n</ul>\n<h2 id=\"rds-생성-도중-배울-요소\" style=\"position:relative;\"><a href=\"#rds-%EC%83%9D%EC%84%B1-%EB%8F%84%EC%A4%91-%EB%B0%B0%EC%9A%B8-%EC%9A%94%EC%86%8C\" aria-label=\"rds 생성 도중 배울 요소 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RDS 생성 도중 배울 요소</h2>\n<ul>\n<li>리소스에 전달해야 되는 매개변수 중 <strong>패스워드</strong> 처럼 <strong>민감정보</strong>는 코드에 직접 <strong>평문 입력을 하는 대신 전달 할 수 있는 방안</strong>을 모색해야 합니다. 방법은 아래와 같습니다.\n<ul>\n<li>다양한 <strong>시크릿 저장소를 활용</strong>\nE.g.,\nAWS Secret Manager, AWS SSM Parameter\nGCP KMS 와 KMS Secrets\nAzure Key Vault 와 Vault Secret, etc.\n<ul>\n<li>최소한의 일만 하는 계정을 만들기: 분리와 역할, 필요하면 추가\n<ul>\n<li>스테이징: 스테이징 프로비저닝에 필요한 AWS 서비스 일부만 허용</li>\n<li>프로덕션: 상기 내용과 마찬가지(권한은 모두 막고, 필요한 단편적인 기능만을 허용하여 넓혀가는 것이 좋습니다.)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>테라폼 <strong>외부에서 환경 변수</strong>를 통해 시크릿 값을 테라폼에 전달\n(테스트나 빠르게 개발할 때만 쓰고, 현업에선 <strong>절대</strong> 사용하지 맙시다!)\n<ul>\n<li><code class=\"language-text\">export TF_VAR_db_password=\"(YOUR_DB_PASSWORD)\"</code></li>\n<li>혹은 <code class=\"language-text\">direnv</code> 의 <code class=\"language-text\">.envrc</code> 파일에 상기 명령과 같은 환경변수를 넣어놓고 사용합니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"웹-서버-클러스터-배포-중-배울-요소\" style=\"position:relative;\"><a href=\"#%EC%9B%B9-%EC%84%9C%EB%B2%84-%ED%81%B4%EB%9F%AC%EC%8A%A4%ED%84%B0-%EB%B0%B0%ED%8F%AC-%EC%A4%91-%EB%B0%B0%EC%9A%B8-%EC%9A%94%EC%86%8C\" aria-label=\"웹 서버 클러스터 배포 중 배울 요소 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>웹 서버 클러스터 배포 중 배울 요소</h2>\n<p>웹 서버 클러스터를 배포하며 <code class=\"language-text\">terraform_remote_state</code> 라는 값과, 테라폼의 내장 함수(build-in function)에 대해 살펴봅시다.</p>\n<ul>\n<li>백엔드에 상태 파일(위에서 살펴본 RDS 정보)를 읽어서 웹 서버 클러스터 구성을 합니다. 이 때 변환 데이터는 읽기 전용입니다.</li>\n<li>모든 데이터베이스의 출력 변수는 상태 파일에 저장되며 아래와 같은 형식의 속성 참조를 이용해 <code class=\"language-text\">terraform_remote_state</code> 데이터 소스에서 읽을 수 있으며, 그 양식은 아래와 같습니다.</li>\n</ul>\n<blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">data.terraform_remote_state.&lt;NAME>.outputs.&lt;ATTRIBUTE></code></pre></div>\n</blockquote>\n<ul>\n<li>E.g., <code class=\"language-text\">terraform_remote_state</code> 데이터 소스에서 데이터베이스 주소와 포트 정보를 가져와서 HTTP 응답에 정보를 노출</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">user_data <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">EOF\n#!/bin/bash\necho \"Hello, World\" >> index.html\necho \"<span class=\"token variable\">${data.terraform_remote_state.db.outputs.address}</span>\" >> index.html\necho \"<span class=\"token variable\">${data.terraform_remote_state.db.outputs.port}</span>\" >> index.html\nnohup busybox httpd -f -p <span class=\"token variable\">${var.server_port}</span> &amp;\nEOF</span></code></pre></div>\n<ul>\n<li><strong>사용자 데이터 스크립트</strong>가 길어지면 인라인으로 정의가 복잡해집니다. 이럴 때는 관련 코드를 외부화하는 것이 코드의 복잡도를 떨어뜨리는 방법입니다. 테라폼의 <strong>내장 함수</strong>와 <code class=\"language-text\">template_file</code> 라는 데이터 소스를 사용해봅시다.</li>\n<li>테라폼에는 표현식을 사용하여 실행할 수 있는 여러 <strong>내장 함수</strong>(built-in functions)들이 있습니다. 함수 사용법은 아래와 같습니다.\n<ul>\n<li><a href=\"https://developer.hashicorp.com/terraform/language/functions\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">내장 함수에 대한 링크</a>를 참고하셔서, 필요한 내장 함수가 있는지 확인해보시고 적재적소에 사용합시다.</li>\n<li><a href=\"https://en.wikipedia.org/wiki/Reinventing_the_wheel\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">바퀴를 두번 만들 필요는 없지요!</a></li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function_name()</code></pre></div>\n</blockquote>\n<ul>\n<li>E.g., <a href=\"https://developer.hashicorp.com/terraform/language/functions/format\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">format</code></a> 함수는 아래 처럼 사용합니다. 문자열 FMT의 <code class=\"language-text\">sprintf</code> 구문에 따라 <code class=\"language-text\">ARGS</code> 인수를 형식화하는 호출방식입니다.</li>\n</ul>\n<blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">format(&lt;FMT>, &lt;ARGS>, ...)</code></pre></div>\n</blockquote>\n<ul>\n<li>내장 함수는 테라폼 콘솔을 실행 후, 대화형 콘솔을 사용해서 질의한 결과를 바로 확인하는 것으로 디버깅할 수 있습니다.</li>\n<li>테라폼 콘솔은 <strong>읽기 전용</strong>입니다. 실수로 인프라나 상태가 변경되지 않습니다. 안심하세요!</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># 참고: 테라폼 콘솔 사용에 관하여</span>\nterraform console\n<span class=\"token operator\">></span> format<span class=\"token punctuation\">(</span><span class=\"token string\">\"%.3f\"</span>, <span class=\"token number\">3.14159265359</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">\"3.142\"</span></code></pre></div>\n<ul>\n<li>그 외에도 테라폼에는 문자열, 숫자, 리스트, 맵 등을 조작하는 데 사용할 수 있는 많은 내장 함수가 존재합니다. 예시에서는 <a href=\"https://developer.hashicorp.com/terraform/language/functions/templatefile\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">templatefile</code></a> 함수를 살펴봅시다.</li>\n<li><code class=\"language-text\">templatefile</code> 함수는 PATH 에서 파일을 읽고 그 내용을 문자열로 반환합니다.</li>\n</ul>\n<blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">templatefile(&lt;PATH>, &lt;VARS>)</code></pre></div>\n</blockquote>\n<ul>\n<li>E.g., 스크립트 파일을 넣고 stage/services/webserver-cluster/user-data.sh 파일을 넣고 문자열로 내용을 읽을 수 있습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token function\">cat</span> <span class=\"token operator\">></span> index.html <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">EOF\n&lt;h1>Hello, World&lt;/h1>\n&lt;p>DB address: <span class=\"token variable\">${db_address}</span>&lt;/p>\n&lt;p>DB port: <span class=\"token variable\">${db_port}</span>&lt;/p>\nEOF</span>\n\n<span class=\"token function\">nohup</span> busybox httpd <span class=\"token parameter variable\">-f</span> <span class=\"token parameter variable\">-p</span> <span class=\"token variable\">${server_port}</span> <span class=\"token operator\">&amp;</span></code></pre></div>\n<ul>\n<li>사용자 데이터 스크립트에 동적인 데이터는 참조와 보간을 활용. 아래는 ASG 코드 예시</li>\n<li><code class=\"language-text\">templatefile</code> 데이터 소스의 vars 맵에 있는 변수만 사용 가능</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">resource <span class=\"token string\">\"aws_launch_configuration\"</span> <span class=\"token string\">\"example\"</span> <span class=\"token punctuation\">{</span>\n  image_id        <span class=\"token operator\">=</span> <span class=\"token string\">\"ami-0fb653ca2d3203ac1\"</span>\n  instance_type   <span class=\"token operator\">=</span> <span class=\"token string\">\"t2.micro\"</span>\n  security_groups <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>aws_security_group.instance.id<span class=\"token punctuation\">]</span>\n\n  <span class=\"token comment\"># Render the User Data script as a template</span>\n  user_data <span class=\"token operator\">=</span> templatefile<span class=\"token punctuation\">(</span><span class=\"token string\">\"user-data.sh\"</span>, <span class=\"token punctuation\">{</span>\n    server_port <span class=\"token operator\">=</span> var.server_port\n    db_address  <span class=\"token operator\">=</span> data.terraform_remote_state.db.outputs.address\n    db_port     <span class=\"token operator\">=</span> data.terraform_remote_state.db.outputs.port\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\"># Required when using a launch configuration with an auto scaling group.</span>\n  lifecycle <span class=\"token punctuation\">{</span>\n    create_before_destroy <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"lessons-learned\" style=\"position:relative;\"><a href=\"#lessons-learned\" aria-label=\"lessons learned permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Lessons Learned</h1>\n<p>제 3장에서는 아래의 내용을 반드시 기억하셨으면 좋겠습니다.</p>\n<ol>\n<li>테라폼 파일을 다수의 사람과 함께 관리할 때 상태관리는 선택이 아닌 필수입니다.\n<ol>\n<li>워크스페이스 설정을 수행합니다.</li>\n<li>파일 레이아웃을 함께 잡아, 실수를 최대한으로 줄입시다.</li>\n</ol>\n</li>\n<li>민감정보는 시크릿 저장소와 같은 서비스를 활용합시다.</li>\n<li>속성 참조와 내장함수를 통해, 코드반복을 대폭축소합시다.</li>\n</ol>\n<h1 id=\"tips-and-tricks\" style=\"position:relative;\"><a href=\"#tips-and-tricks\" aria-label=\"tips and tricks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tips and tricks</h1>\n<ul>\n<li>테라폼 코드도 컨벤션이 있습니다!\n<ul>\n<li><a href=\"https://developer.hashicorp.com/terraform/language/syntax/style\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">테라폼 컨벤션</a>에 대한 이해를 하고, lint 도 할 수 있다는 말이겠군요.</li>\n<li>그렇다면 pre-commit hook 도 당연히 있을겁니다.</li>\n<li>그렇다면 테스트에도 쓰일 수 있겠군요.</li>\n</ul>\n</li>\n</ul>\n<p>이것으로 제 3장을 마칩니다. 긴 글 읽어주셔서 감사합니다.</p>","fields":{"slug":"/devlog/terraform/2022-11-03---cloudneta-terraform-101-pt03//devlog/terraform/2022-11-03-cloudneta-terraform-101-pt03","tagSlugs":["/tag/terraform/","/tag/iac/","/tag/devops/"]},"frontmatter":{"date":"2022-11-03T21:09:10.000Z","description":"Terraform 의 상태값에 대한 격리 방안에 대한 내용을 담고있습니다. 아울러 속성값 참고와 내장 함수에 대한 설명을 함께 추가하였습니다.","tags":["terraform","iac","devops"],"title":"[CloudNet@] 테라폼 스터디 3주차 - Terraform 상태 격리방안","socialImage":{"publicURL":"/static/f76f45557215b30ae70126439a5e8b31/terraform03.jpg"}}}},"pageContext":{"slug":"/devlog/terraform/2022-11-03---cloudneta-terraform-101-pt03//devlog/terraform/2022-11-03-cloudneta-terraform-101-pt03"}},"staticQueryHashes":["251939775","357378587","401334301"]}