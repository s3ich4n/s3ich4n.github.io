{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/devlog/terraform/2022-11-19-cloudneta-terraform-101-pt05-1","result":{"data":{"markdownRemark":{"id":"d6c08ef9-eb35-5f82-ac9e-7ecb5159105b","html":"<p>이 내용은 CloudNet@ 에서 진행하는 테라폼 기초 입문 스터디에 대한 연재글입니다.</p>\n<p>스터디에서 사용하는 교재는 <a href=\"http://www.yes24.com/Product/Goods/101511312\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Terraform Up &#x26; Running 2nd Edition</a> 입니다.</p>\n<hr>\n<h1 id=\"prerequisites\" style=\"position:relative;\"><a href=\"#prerequisites\" aria-label=\"prerequisites permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Prerequisites</h1>\n<ul>\n<li><a href=\"https://developer.hashicorp.com/terraform/language/expressions/types\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Terraform: Types and Values</a> 공식문서\n<ul>\n<li>타입과 값에는 어떤 것들이 사용될 수 있는지 확인해봅시다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">count</code>, <code class=\"language-text\">for_each</code> 는 <code class=\"language-text\">resource</code> 내에서 사용될 수 있습니다.</li>\n<li><code class=\"language-text\">for</code> 표현식은 복잡한 타입을 또다른 복잡한 타입으로 변환하는데 쓰입니다.</li>\n</ul>\n<p>아래에서 5주차 스터디 내용을 공유합니다.</p>\n<p>교재의 5장 내용을 다루고 있습니다.</p>\n<h1 id=\"본문\" style=\"position:relative;\"><a href=\"#%EB%B3%B8%EB%AC%B8\" aria-label=\"본문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>본문</h1>\n<p>테라폼을 통해 마치 프로그램을 작성하듯 코드를 작성할 수 있습니다. 이번 챕터에서는 아래의 내용을 학습할 예정입니다:</p>\n<ul>\n<li>반복, 조건문 사용방법</li>\n<li>무중단 배포에 필요한 요소들 사용방법</li>\n<li>주의사항</li>\n</ul>\n<h2 id=\"반복문\" style=\"position:relative;\"><a href=\"#%EB%B0%98%EB%B3%B5%EB%AC%B8\" aria-label=\"반복문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>반복문</h2>\n<p>테라폼이 제공하는 반복문 구성은 아래와 같습니다:</p>\n<ul>\n<li><code class=\"language-text\">count</code> 구문</li>\n<li><code class=\"language-text\">for_each</code> 표현식</li>\n<li><code class=\"language-text\">for</code> 표현식</li>\n<li><code class=\"language-text\">for</code> 문자열 지시어</li>\n</ul>\n<h3 id=\"count-구문\" style=\"position:relative;\"><a href=\"#count-%EA%B5%AC%EB%AC%B8\" aria-label=\"count 구문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">count</code> 구문</h3>\n<p><code class=\"language-text\">count</code> 구문을 사용한 반복에 대해 살펴봅시다.</p>\n<h4 id=\"count-구문을-사용한-반복문-1\" style=\"position:relative;\"><a href=\"#count-%EA%B5%AC%EB%AC%B8%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%9C-%EB%B0%98%EB%B3%B5%EB%AC%B8-1\" aria-label=\"count 구문을 사용한 반복문 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">count</code> 구문을 사용한 반복문 (1)</h4>\n<p>IAM 사용자를 3명 생성하는 예시로 살펴보겠습니다. 리소스는 <a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/iam_user\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">aws_iam_user</code></a> 를 사용합니다. <code class=\"language-text\">name</code> 필드는 Required 입니다.</p>\n<p>전체 예시코드는 <code class=\"language-text\">chapter05/example01/count/index</code> 디렉토리를 살펴봐주세요.</p>\n<ul>\n<li><code class=\"language-text\">iam.tf</code> 파일 전체</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"terraform\"><pre class=\"language-terraform\"><code class=\"language-terraform\">provider &quot;aws&quot; {\n  region = &quot;ap-northeast-2&quot;\n}\n\nresource &quot;aws_iam_user&quot; &quot;ch05-iam&quot; {\n  count = 3\n  # 0부터 시작, 3번 반복합니다.\n  name  = &quot;s3ich4n.${count.index}&quot;\n}</code></pre></div>\n<ul>\n<li>이 경우, 0부터 시작, 2까지 반복하는 인덱스 값을 추가합니다.</li>\n<li><code class=\"language-text\">name</code> 값에 인덱스를 사용하지 않는다면, 3명의 IAM 사용자 이름 <strong>중복</strong>으로 오류가 발생합니다. 따라서, 반복문의 인덱스값을 사용하여 각 사용자에게 고유한 이름을 사용하도록 코드를 작성하였습니다.</li>\n</ul>\n<p>예시를 구동해봅시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">`$ terraform init\n\nInitializing the backend<span class=\"token punctuation\">..</span>.\n\nInitializing provider plugins<span class=\"token punctuation\">..</span>.\n- Finding latest version of hashicorp/aws<span class=\"token punctuation\">..</span>.\n- Installed hashicorp/aws v4.39.0 <span class=\"token punctuation\">(</span>signed by HashiCorp<span class=\"token punctuation\">)</span>\n\nTerraform has created a lock <span class=\"token function\">file</span> .terraform.lock.hcl to record the provider\nselections it made above. Include this <span class=\"token function\">file</span> <span class=\"token keyword\">in</span> your version control repository\nso that Terraform can guarantee to <span class=\"token function\">make</span> the same selections by default when\nyou run <span class=\"token string\">\"terraform init\"</span> <span class=\"token keyword\">in</span> the future.\n\nTerraform has been successfully initialized<span class=\"token operator\">!</span>\n<span class=\"token punctuation\">(</span>중략<span class=\"token punctuation\">)</span>\n\n$ terraform apply\n\nTerraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:\n  + create\n\nTerraform will perform the following actions:\n\n  <span class=\"token comment\"># aws_iam_user.ch05-iam[0] will be created</span>\n  + resource <span class=\"token string\">\"aws_iam_user\"</span> <span class=\"token string\">\"ch05-iam\"</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token punctuation\">(</span>생략<span class=\"token punctuation\">)</span>\n      + name          <span class=\"token operator\">=</span> <span class=\"token string\">\"s3ich4n.0\"</span>\n    <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\"># aws_iam_user.ch05-iam[1] will be created</span>\n  + resource <span class=\"token string\">\"aws_iam_user\"</span> <span class=\"token string\">\"ch05-iam\"</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token punctuation\">(</span>생략<span class=\"token punctuation\">)</span>\n      + name          <span class=\"token operator\">=</span> <span class=\"token string\">\"s3ich4n.1\"</span>\n    <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\"># aws_iam_user.ch05-iam[2] will be created</span>\n  + resource <span class=\"token string\">\"aws_iam_user\"</span> <span class=\"token string\">\"ch05-iam\"</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token punctuation\">(</span>생략<span class=\"token punctuation\">)</span>\n      + name          <span class=\"token operator\">=</span> <span class=\"token string\">\"s3ich4n.2\"</span>\n    <span class=\"token punctuation\">}</span>\n\nPlan: <span class=\"token number\">3</span> to add, <span class=\"token number\">0</span> to change, <span class=\"token number\">0</span> to destroy.\n\nDo you want to perform these actions?\n  Terraform will perform the actions described above.\n  Only <span class=\"token string\">'yes'</span> will be accepted to approve.\n\n  Enter a value: <span class=\"token function\">yes</span>\n\naws_iam_user.ch05-iam<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>: Creating<span class=\"token punctuation\">..</span>.\naws_iam_user.ch05-iam<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>: Creating<span class=\"token punctuation\">..</span>.\naws_iam_user.ch05-iam<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>: Creating<span class=\"token punctuation\">..</span>.\naws_iam_user.ch05-iam<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>: Creation complete after 1s <span class=\"token punctuation\">[</span>id<span class=\"token operator\">=</span>s3ich4n.1<span class=\"token punctuation\">]</span>\naws_iam_user.ch05-iam<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>: Creation complete after 1s <span class=\"token punctuation\">[</span>id<span class=\"token operator\">=</span>s3ich4n.2<span class=\"token punctuation\">]</span>\naws_iam_user.ch05-iam<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>: Creation complete after 1s <span class=\"token punctuation\">[</span>id<span class=\"token operator\">=</span>s3ich4n.0<span class=\"token punctuation\">]</span>\n\nApply complete<span class=\"token operator\">!</span> Resources: <span class=\"token number\">3</span> added, <span class=\"token number\">0</span> changed, <span class=\"token number\">0</span> destroyed.\n\n<span class=\"token comment\">#</span>\n<span class=\"token comment\"># 반복문 구동을 확인했습니다. 삭제합시다.</span>\n<span class=\"token comment\">#</span>\n$ terraform destroy -auto-approve\n\naws_iam_user.ch05-iam<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>: Refreshing state<span class=\"token punctuation\">..</span>. <span class=\"token punctuation\">[</span>id<span class=\"token operator\">=</span>s3ich4n.2<span class=\"token punctuation\">]</span>\naws_iam_user.ch05-iam<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>: Refreshing state<span class=\"token punctuation\">..</span>. <span class=\"token punctuation\">[</span>id<span class=\"token operator\">=</span>s3ich4n.0<span class=\"token punctuation\">]</span>\naws_iam_user.ch05-iam<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>: Refreshing state<span class=\"token punctuation\">..</span>. <span class=\"token punctuation\">[</span>id<span class=\"token operator\">=</span>s3ich4n.1<span class=\"token punctuation\">]</span>\n\nTerraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:\n  - destroy\n\nTerraform will perform the following actions:\n\n  <span class=\"token comment\"># aws_iam_user.ch05-iam[0] will be destroyed</span>\n  - resource <span class=\"token string\">\"aws_iam_user\"</span> <span class=\"token string\">\"ch05-iam\"</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">(</span>생략<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\"># aws_iam_user.ch05-iam[1] will be destroyed</span>\n  - resource <span class=\"token string\">\"aws_iam_user\"</span> <span class=\"token string\">\"ch05-iam\"</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">(</span>생략<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\"># aws_iam_user.ch05-iam[2] will be destroyed</span>\n  - resource <span class=\"token string\">\"aws_iam_user\"</span> <span class=\"token string\">\"ch05-iam\"</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">(</span>생략<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\nPlan: <span class=\"token number\">0</span> to add, <span class=\"token number\">0</span> to change, <span class=\"token number\">3</span> to destroy.\naws_iam_user.ch05-iam<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>: Destroying<span class=\"token punctuation\">..</span>. <span class=\"token punctuation\">[</span>id<span class=\"token operator\">=</span>s3ich4n.2<span class=\"token punctuation\">]</span>\naws_iam_user.ch05-iam<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>: Destroying<span class=\"token punctuation\">..</span>. <span class=\"token punctuation\">[</span>id<span class=\"token operator\">=</span>s3ich4n.0<span class=\"token punctuation\">]</span>\naws_iam_user.ch05-iam<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>: Destroying<span class=\"token punctuation\">..</span>. <span class=\"token punctuation\">[</span>id<span class=\"token operator\">=</span>s3ich4n.1<span class=\"token punctuation\">]</span>\naws_iam_user.ch05-iam<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>: Destruction complete after 1s\naws_iam_user.ch05-iam<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>: Destruction complete after 1s\naws_iam_user.ch05-iam<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>: Destruction complete after 1s\n\nDestroy complete<span class=\"token operator\">!</span> Resources: <span class=\"token number\">3</span> destroyed.\n</code></pre></div>\n<p>0부터 2까지 반복되어 유저 이름에 값이 붙은 것을 확인할 수 있습니다.</p>\n<h4 id=\"count-구문을-사용한-반복문-2\" style=\"position:relative;\"><a href=\"#count-%EA%B5%AC%EB%AC%B8%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%9C-%EB%B0%98%EB%B3%B5%EB%AC%B8-2\" aria-label=\"count 구문을 사용한 반복문 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">count</code> 구문을 사용한 반복문 (2)</h4>\n<ul>\n<li>(스포) 위험한 코드입니다! 잘못쓰기 쉬우니, 아래 주의사항을 반드시 보세요!</li>\n</ul>\n<p>마찬가지로, IAM 사용자를 3명 생성하는 예시로 살펴보겠습니다. 리소스는 <a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/iam_user\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">aws_iam_user</code></a> 를 사용합니다. <code class=\"language-text\">name</code> 필드는 Required 입니다.</p>\n<p>전체 예시코드는 <code class=\"language-text\">chapter05/example01/count/list_and_default</code> 디렉토리를 살펴봐주세요.</p>\n<ul>\n<li><code class=\"language-text\">variables.tf</code> 파일</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"terraform\"><pre class=\"language-terraform\"><code class=\"language-terraform\">variable &quot;user_names&quot; {\n  description = &quot;Create IAM users with these names&quot;\n  # 문자열을 담는 &quot;리스트&quot; 타입입니다.\n  type        = list(string)\n  default     = [&quot;alice&quot;, &quot;bob&quot;, &quot;charlie&quot;]\n}</code></pre></div>\n<ul>\n<li><code class=\"language-text\">iam.tf</code> 파일</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"terraform\"><pre class=\"language-terraform\"><code class=\"language-terraform\">provider &quot;aws&quot; {\n  region = &quot;ap-northeast-2&quot;\n}\n\nresource &quot;aws_iam_user&quot; &quot;ch05-ex01-count&quot; {\n  # 이런 식으로, user_names내 리스트 값의 길이를 알 수 있지요.\n  count = length(var.user_names)\n  name  = var.user_names[count.index]\n}</code></pre></div>\n<ul>\n<li><code class=\"language-text\">outputs.tf</code> 파일</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"terraform\"><pre class=\"language-terraform\"><code class=\"language-terraform\">output &quot;first_arn&quot; {\n  # 첫번째 값을 가져옵니다.\n  value       = aws_iam_user.ch05-ex01-count[0].arn\n  description = &quot;The ARN for the first user&quot;\n}\n\noutput &quot;all_arns&quot; {\n  # 전체 값을 가져오는건 이렇게 사용합니다.\n  value       = aws_iam_user.ch05-ex01-count[*].arn\n  description = &quot;The ARNs for all users&quot;\n}</code></pre></div>\n<p>어떤 코드인지 개념을 살펴봅시다.</p>\n<ul>\n<li>테라폼에서는 <code class=\"language-text\">count</code> 와 함께 배열 조회 구문과 <a href=\"https://developer.hashicorp.com/terraform/language/functions/length\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">length</code> 함수</a> 를 사용해서 반복을 할 수 있습니다.\n<ul>\n<li>배열 조회 구문\n<ul>\n<li>ARRAY[<INDEX>]</li>\n<li>E.g., var.user_names 의 인덱스 <code class=\"language-text\">0</code>에서 요소를 찾는 방법: <code class=\"language-text\">ch05-ex01-count[0]</code></li>\n<li>전체 값을 가져오는 방법: <code class=\"language-text\">ch05-ex01-count[*]</code></li>\n</ul>\n</li>\n<li>length (내장) 함수\n<ul>\n<li>length(<ARRAY>)</li>\n<li>주어진 ARRAY 의 항목 수를 반환하는 함수. 문자열 및 맵을 대상으로도 동작합니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>이 예제를 스스로 <code class=\"language-text\">terraform init &amp;&amp; terraform apply -auto-approve</code> 해보시기 바랍니다.\n(<code class=\"language-text\">-auto-approve</code> 플래그는, 자동으로 프로비저닝하라는 키워드입니다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ terraform init <span class=\"token operator\">&amp;&amp;</span> terraform apply -auto-approve\n\nTerraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:\n  + create\n\nTerraform will perform the following actions:\n\n  <span class=\"token comment\"># aws_iam_user.ch05-ex01-count[0] will be created</span>\n  + resource <span class=\"token string\">\"aws_iam_user\"</span> <span class=\"token string\">\"ch05-ex01-count\"</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token punctuation\">(</span>생략<span class=\"token punctuation\">)</span>\n      + name          <span class=\"token operator\">=</span> <span class=\"token string\">\"alice\"</span>\n      <span class=\"token punctuation\">(</span>생략<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\"># aws_iam_user.ch05-ex01-count[1] will be created</span>\n  + resource <span class=\"token string\">\"aws_iam_user\"</span> <span class=\"token string\">\"ch05-ex01-count\"</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token punctuation\">(</span>생략<span class=\"token punctuation\">)</span>\n      + name          <span class=\"token operator\">=</span> <span class=\"token string\">\"bob\"</span>\n      <span class=\"token punctuation\">(</span>생략<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\"># aws_iam_user.ch05-ex01-count[2] will be created</span>\n  + resource <span class=\"token string\">\"aws_iam_user\"</span> <span class=\"token string\">\"ch05-ex01-count\"</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token punctuation\">(</span>생략<span class=\"token punctuation\">)</span>\n      + name          <span class=\"token operator\">=</span> <span class=\"token string\">\"charlie\"</span>\n      <span class=\"token punctuation\">(</span>생략<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\nPlan: <span class=\"token number\">3</span> to add, <span class=\"token number\">0</span> to change, <span class=\"token number\">0</span> to destroy.\n\n<span class=\"token punctuation\">(</span>생략<span class=\"token punctuation\">)</span>\n\nApply complete<span class=\"token operator\">!</span> Resources: <span class=\"token number\">3</span> added, <span class=\"token number\">0</span> changed, <span class=\"token number\">0</span> destroyed.\n\nOutputs:\n\nall_arns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token string\">\"arn:aws:iam::240962124292:user/alice\"</span>,\n  <span class=\"token string\">\"arn:aws:iam::240962124292:user/bob\"</span>,\n  <span class=\"token string\">\"arn:aws:iam::240962124292:user/charlie\"</span>,\n<span class=\"token punctuation\">]</span>\nfirst_arn <span class=\"token operator\">=</span> <span class=\"token string\">\"arn:aws:iam::240962124292:user/alice\"</span></code></pre></div>\n<h4 id=\"count-를-사용한-반복문의-제약사항\" style=\"position:relative;\"><a href=\"#count-%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C-%EB%B0%98%EB%B3%B5%EB%AC%B8%EC%9D%98-%EC%A0%9C%EC%95%BD%EC%82%AC%ED%95%AD\" aria-label=\"count 를 사용한 반복문의 제약사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">count</code> 를 사용한 반복문의 제약사항</h4>\n<p>위의 예제를 통해 계정을 만들고, 아래의 예시를 통해 제약사항을 살펴봅시다.</p>\n<ol>\n<li>\n<p>전체 리소스를 반복할 수는 있지만 리소스 내에서 인라인 블록을 반복할 수는 없습니다. 아래 예시로 살펴봅시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"terraform\"><pre class=\"language-terraform\"><code class=\"language-terraform\">resource &quot;aws_autoscaling_group&quot; &quot;example&quot; {\n  launch_configuration = aws_launch_configuration.example.name\n  vpc_zone_identifier  = data.aws_subnets.default.ids\n  target_group_arns    = [aws_lb_target_group.asg.arn]\n  health_check_type    = &quot;ELB&quot;\n\n  min_size = var.min_size\n  max_size = var.max_size\n\n  tag {\n    key                 = &quot;Name&quot;\n    value               = var.cluster_name\n    propagate_at_launch = true\n  }\n}</code></pre></div>\n<ol>\n<li>각각의 tag 를 사용하려면 <code class=\"language-text\">key</code>, <code class=\"language-text\">value</code>, <code class=\"language-text\">propagate_at_launch</code> 에 대한 값으로 새 인라인 블록을 만들어야 합니다.</li>\n<li>따라서 <code class=\"language-text\">count</code> 구문을 사용해서 이러한 태그를 반복하여 동적인 인라인 <code class=\"language-text\">tag</code> 블록을 생성하려고 시도할 수도 있지만, 인라인 블록 내에서는 count 사용은 지원하지 않습니다.</li>\n</ol>\n</li>\n<li>\n<p>코드 재사용시 <strong>치명적인</strong> 문제가 있습니다. 아래 예시로 살펴봅시다.</p>\n<ul>\n<li><code class=\"language-text\">variables.tf</code></li>\n</ul>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"terraform\"><pre class=\"language-terraform\"><code class=\"language-terraform\">variable &quot;user_names&quot; {\n  description = &quot;Create IAM users with these names&quot;\n  type        = list(string)\n  default     = [&quot;alice&quot;, &quot;charlie&quot;]\n}</code></pre></div>\n<ol>\n<li>\n<p>배열의 중간에 항목을 제거하면 모든 항목이 1칸씩 앞으로 당겨질 것입니다.</p>\n</li>\n<li>\n<p>테라폼은 인덱스 번호를 리소스 식별자로 봅니다. 따라서, ‘인덱스 1에서는 계정을 만들고, 인덱스2에서는 버킷을 삭제한다’라고 해석합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ terraform plan\n\naws_iam_user.ch05-ex01-count<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>: Refreshing state<span class=\"token punctuation\">..</span>. <span class=\"token punctuation\">[</span>id<span class=\"token operator\">=</span>charlie<span class=\"token punctuation\">]</span>\naws_iam_user.ch05-ex01-count<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>: Refreshing state<span class=\"token punctuation\">..</span>. <span class=\"token punctuation\">[</span>id<span class=\"token operator\">=</span>bob<span class=\"token punctuation\">]</span>\naws_iam_user.ch05-ex01-count<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>: Refreshing state<span class=\"token punctuation\">..</span>. <span class=\"token punctuation\">[</span>id<span class=\"token operator\">=</span>alice<span class=\"token punctuation\">]</span>\n\nNote: Objects have changed outside of Terraform\n\nTerraform detected the following changes made outside of Terraform since the last <span class=\"token string\">\"terraform apply\"</span> <span class=\"token function\">which</span> may have affected this plan:\n\n  <span class=\"token comment\"># aws_iam_user.ch05-ex01-count[0] has changed</span>\n  ~ resource <span class=\"token string\">\"aws_iam_user\"</span> <span class=\"token string\">\"ch05-ex01-count\"</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">id</span>            <span class=\"token operator\">=</span> <span class=\"token string\">\"alice\"</span>\n        name          <span class=\"token operator\">=</span> <span class=\"token string\">\"alice\"</span>\n      + tags          <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        <span class=\"token comment\"># (5 unchanged attributes hidden)</span>\n    <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\"># aws_iam_user.ch05-ex01-count[1] has changed</span>\n  ~ resource <span class=\"token string\">\"aws_iam_user\"</span> <span class=\"token string\">\"ch05-ex01-count\"</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">id</span>            <span class=\"token operator\">=</span> <span class=\"token string\">\"bob\"</span>\n        name          <span class=\"token operator\">=</span> <span class=\"token string\">\"bob\"</span>\n      + tags          <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        <span class=\"token comment\"># (5 unchanged attributes hidden)</span>\n    <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\"># aws_iam_user.ch05-ex01-count[2] has changed</span>\n  ~ resource <span class=\"token string\">\"aws_iam_user\"</span> <span class=\"token string\">\"ch05-ex01-count\"</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">id</span>            <span class=\"token operator\">=</span> <span class=\"token string\">\"charlie\"</span>\n        name          <span class=\"token operator\">=</span> <span class=\"token string\">\"charlie\"</span>\n      + tags          <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        <span class=\"token comment\"># (5 unchanged attributes hidden)</span>\n    <span class=\"token punctuation\">}</span>\n\n\n<span class=\"token punctuation\">(</span>plan 경고문은 생략. 현재 테라폼 코드로는 이런 식으로 프로비저닝 될 것이다 하는 내용이 써져있습니다.<span class=\"token punctuation\">)</span>\n\nTerraform will perform the following actions:\n\n  <span class=\"token comment\"># aws_iam_user.ch05-ex01-count[1] will be updated in-place</span>\n  ~ resource <span class=\"token string\">\"aws_iam_user\"</span> <span class=\"token string\">\"ch05-ex01-count\"</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">id</span>            <span class=\"token operator\">=</span> <span class=\"token string\">\"bob\"</span>\n      ~ name          <span class=\"token operator\">=</span> <span class=\"token string\">\"bob\"</span> -<span class=\"token operator\">></span> <span class=\"token string\">\"charlie\"</span>\n        tags          <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        <span class=\"token comment\"># (5 unchanged attributes hidden)</span>\n    <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\"># aws_iam_user.ch05-ex01-count[2] will be destroyed</span>\n  <span class=\"token comment\"># (because index [2] is out of range for count)</span>\n  - resource <span class=\"token string\">\"aws_iam_user\"</span> <span class=\"token string\">\"ch05-ex01-count\"</span> <span class=\"token punctuation\">{</span>\n      - arn           <span class=\"token operator\">=</span> <span class=\"token string\">\"arn:aws:iam::240962124292:user/charlie\"</span> -<span class=\"token operator\">></span> null\n      - force_destroy <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> -<span class=\"token operator\">></span> null\n      - <span class=\"token function\">id</span>            <span class=\"token operator\">=</span> <span class=\"token string\">\"charlie\"</span> -<span class=\"token operator\">></span> null\n      - name          <span class=\"token operator\">=</span> <span class=\"token string\">\"charlie\"</span> -<span class=\"token operator\">></span> null\n      - path          <span class=\"token operator\">=</span> <span class=\"token string\">\"/\"</span> -<span class=\"token operator\">></span> null\n      - tags          <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> -<span class=\"token operator\">></span> null\n      - tags_all      <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> -<span class=\"token operator\">></span> null\n      - unique_id     <span class=\"token operator\">=</span> <span class=\"token string\">\"AIDATQGTWHICFTYJYIOOQ\"</span> -<span class=\"token operator\">></span> null\n    <span class=\"token punctuation\">}</span>\n\nPlan: <span class=\"token number\">0</span> to add, <span class=\"token number\">1</span> to change, <span class=\"token number\">1</span> to destroy.\n\nChanges to Outputs:\n  ~ all_arns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token comment\"># (1 unchanged element hidden)</span>\n        <span class=\"token string\">\"arn:aws:iam::240962124292:user/bob\"</span>,\n      - <span class=\"token string\">\"arn:aws:iam::240962124292:user/charlie\"</span>,\n    <span class=\"token punctuation\">]</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">count</code> 사용 시 목록 중간 항목을 제거하면 테라폼은 해당 항목 뒤에 있는 <strong>모든 리소스를 삭제</strong>한 다음 해당 리소스를 처음부터 다시 만듭니다… 😱😱</p>\n</li>\n</ol>\n<h3 id=\"for_each-표현식\" style=\"position:relative;\"><a href=\"#for_each-%ED%91%9C%ED%98%84%EC%8B%9D\" aria-label=\"for_each 표현식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">for_each</code> 표현식</h3>\n<p><code class=\"language-text\">for_each</code> 표현식을 이용한 반복문을 사용해봅시다. 먼저 <code class=\"language-text\">for_each</code> 표현식에 대해 알아봅시다.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">for_each</code> 구문은 테라폼 문법에 정의된 <code class=\"language-text\">meta-argument </code> 입니다. 모듈, 모든 리소스 타입에 응용될 수 있습니다.</p>\n</li>\n<li>\n<p><code class=\"language-text\">list</code>, <code class=\"language-text\">set</code>, <code class=\"language-text\">map</code>을 사용하여 전체 리소스의 복사본, 리소스 내 인라인 블록의 복사본, 모듈의 복사본을 만들 수 있습니다. 문법은 아래와 같습니다:</p>\n<div class=\"gatsby-highlight\" data-language=\"terraform\"><pre class=\"language-terraform\"><code class=\"language-terraform\">resource &quot;&lt;PROVIDER&gt;_&lt;TYPE&gt;&quot; &quot;&lt;NAME&gt;&quot; {\n  for_each = &lt;COLLECTION&gt;\n\n  [CONFIG ...]\n}</code></pre></div>\n<ul>\n<li>COLLECTION: 루프를 처리할 set, map 을 의미</li>\n<li>CONFIG: 리소스와 관련된 하나이상의 인수\n<ul>\n<li><code class=\"language-text\">each.key</code>, <code class=\"language-text\">each.value</code> 로 키/밸류에 접근할 수 있습니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"for_each-표현식을-이용한-예시-1\" style=\"position:relative;\"><a href=\"#for_each-%ED%91%9C%ED%98%84%EC%8B%9D%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%98%88%EC%8B%9C-1\" aria-label=\"for_each 표현식을 이용한 예시 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">for_each</code> 표현식을 이용한 예시 (1)</h4>\n<p>전체 예시코드는 <code class=\"language-text\">chapter05/example01/for_each</code> 디렉토리를 살펴봐주세요.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">iam.tf</code></p>\n<div class=\"gatsby-highlight\" data-language=\"terraform\"><pre class=\"language-terraform\"><code class=\"language-terraform\">provider &quot;aws&quot; {\n  region = &quot;ap-northeast-2&quot;\n}\n\nresource &quot;aws_iam_user&quot; &quot;ch05-foreach&quot; {\n  for_each = toset(var.user_names)\n  name     = each.value\n}</code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">variables.tf</code></p>\n<div class=\"gatsby-highlight\" data-language=\"terraform\"><pre class=\"language-terraform\"><code class=\"language-terraform\">variable &quot;user_names&quot; {\n  description = &quot;Create IAM users with these names&quot;\n  type        = list(string)\n  default     = [&quot;alice&quot;, &quot;bob&quot;, &quot;charlie&quot;]\n}</code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">outputs.tf</code></p>\n<div class=\"gatsby-highlight\" data-language=\"terraform\"><pre class=\"language-terraform\"><code class=\"language-terraform\">output &quot;all_users&quot; {\n  value = aws_iam_user.ch05-foreach\n}</code></pre></div>\n</li>\n</ul>\n<p><code class=\"language-text\">terraform init &amp;&amp; terraform apply -auto-approve</code> 를 통해, output에 나오는 <code class=\"language-text\">for_each</code> 는 어떤식인지 살펴봅시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ terraform init\n\n<span class=\"token punctuation\">(</span>생략<span class=\"token punctuation\">)</span>\n\n$ terraform apply -auto-approve\n\nTerraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:\n  + create\n\nTerraform will perform the following actions:\n\n  <span class=\"token comment\"># aws_iam_user.ch05-foreach[\"alice\"] will be created</span>\n  + resource <span class=\"token string\">\"aws_iam_user\"</span> <span class=\"token string\">\"ch05-foreach\"</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token punctuation\">(</span>생략<span class=\"token punctuation\">)</span>\n      + name          <span class=\"token operator\">=</span> <span class=\"token string\">\"alice\"</span>\n      <span class=\"token punctuation\">(</span>생략<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\"># aws_iam_user.ch05-foreach[\"bob\"] will be created</span>\n  + resource <span class=\"token string\">\"aws_iam_user\"</span> <span class=\"token string\">\"ch05-foreach\"</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token punctuation\">(</span>생략<span class=\"token punctuation\">)</span>\n      + name          <span class=\"token operator\">=</span> <span class=\"token string\">\"bob\"</span>\n      <span class=\"token punctuation\">(</span>생략<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\"># aws_iam_user.ch05-foreach[\"charlie\"] will be created</span>\n  + resource <span class=\"token string\">\"aws_iam_user\"</span> <span class=\"token string\">\"ch05-foreach\"</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token punctuation\">(</span>생략<span class=\"token punctuation\">)</span>\n      + name          <span class=\"token operator\">=</span> <span class=\"token string\">\"charlie\"</span>\n      <span class=\"token punctuation\">(</span>생략<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\nPlan: <span class=\"token number\">3</span> to add, <span class=\"token number\">0</span> to change, <span class=\"token number\">0</span> to destroy.\n\nChanges to Outputs:\n  + all_users <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      + alice   <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token punctuation\">(</span>생략<span class=\"token punctuation\">)</span>\n          + name                 <span class=\"token operator\">=</span> <span class=\"token string\">\"alice\"</span>\n      <span class=\"token punctuation\">(</span>생략<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n      + bob     <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token punctuation\">(</span>생략<span class=\"token punctuation\">)</span>\n          + name                 <span class=\"token operator\">=</span> <span class=\"token string\">\"bob\"</span>\n      <span class=\"token punctuation\">(</span>생략<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n      + charlie <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token punctuation\">(</span>생략<span class=\"token punctuation\">)</span>\n          + name                 <span class=\"token operator\">=</span> <span class=\"token string\">\"charlie\"</span>\n      <span class=\"token punctuation\">(</span>생략<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">(</span>생략<span class=\"token punctuation\">)</span>\n\nApply complete<span class=\"token operator\">!</span> Resources: <span class=\"token number\">3</span> added, <span class=\"token number\">0</span> changed, <span class=\"token number\">0</span> destroyed.\n\nOutputs:\n\nall_users <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"alice\"</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"arn\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"arn:aws:iam::REDACTED:user/alice\"</span>\n    <span class=\"token string\">\"force_destroy\"</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n    <span class=\"token string\">\"id\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"alice\"</span>\n    <span class=\"token string\">\"name\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"alice\"</span>\n    <span class=\"token string\">\"path\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"/\"</span>\n    <span class=\"token string\">\"permissions_boundary\"</span> <span class=\"token operator\">=</span> tostring<span class=\"token punctuation\">(</span>null<span class=\"token punctuation\">)</span>\n    <span class=\"token string\">\"tags\"</span> <span class=\"token operator\">=</span> tomap<span class=\"token punctuation\">(</span>null<span class=\"token punctuation\">)</span> /* of string */\n    <span class=\"token string\">\"tags_all\"</span> <span class=\"token operator\">=</span> tomap<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token string\">\"unique_id\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"REDACTED\"</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token string\">\"bob\"</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"arn\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"arn:aws:iam::REDACTED:user/bob\"</span>\n    <span class=\"token string\">\"force_destroy\"</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n    <span class=\"token string\">\"id\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"bob\"</span>\n    <span class=\"token string\">\"name\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"bob\"</span>\n    <span class=\"token string\">\"path\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"/\"</span>\n    <span class=\"token string\">\"permissions_boundary\"</span> <span class=\"token operator\">=</span> tostring<span class=\"token punctuation\">(</span>null<span class=\"token punctuation\">)</span>\n    <span class=\"token string\">\"tags\"</span> <span class=\"token operator\">=</span> tomap<span class=\"token punctuation\">(</span>null<span class=\"token punctuation\">)</span> /* of string */\n    <span class=\"token string\">\"tags_all\"</span> <span class=\"token operator\">=</span> tomap<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token string\">\"unique_id\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"REDACTED\"</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token string\">\"charlie\"</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"arn\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"arn:aws:iam::REDACTED:user/charlie\"</span>\n    <span class=\"token string\">\"force_destroy\"</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n    <span class=\"token string\">\"id\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"charlie\"</span>\n    <span class=\"token string\">\"name\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"charlie\"</span>\n    <span class=\"token string\">\"path\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"/\"</span>\n    <span class=\"token string\">\"permissions_boundary\"</span> <span class=\"token operator\">=</span> tostring<span class=\"token punctuation\">(</span>null<span class=\"token punctuation\">)</span>\n    <span class=\"token string\">\"tags\"</span> <span class=\"token operator\">=</span> tomap<span class=\"token punctuation\">(</span>null<span class=\"token punctuation\">)</span> /* of string */\n    <span class=\"token string\">\"tags_all\"</span> <span class=\"token operator\">=</span> tomap<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token string\">\"unique_id\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"REDACTED\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code class=\"language-text\">all_users</code> 출력 변수가 <code class=\"language-text\">for_each</code> 의 키, 즉 사용자 이름을 키로 가지며 값이 해당 리소스의 전체 출력인 맵을 포함합니다.</p>\n<h4 id=\"for_each-표현식을-이용한-예시-2-인라인-블록\" style=\"position:relative;\"><a href=\"#for_each-%ED%91%9C%ED%98%84%EC%8B%9D%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%98%88%EC%8B%9C-2-%EC%9D%B8%EB%9D%BC%EC%9D%B8-%EB%B8%94%EB%A1%9D\" aria-label=\"for_each 표현식을 이용한 예시 2 인라인 블록 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>for_each 표현식을 이용한 예시 (2): 인라인 블록</h4>\n<ul>\n<li><a href=\"https://developer.hashicorp.com/terraform/tutorials/configuration-language/for-each\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">해당 링크</a>의 예시를 참조하였습니다.</li>\n</ul>\n<h3 id=\"for-표현식\" style=\"position:relative;\"><a href=\"#for-%ED%91%9C%ED%98%84%EC%8B%9D\" aria-label=\"for 표현식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">for</code> 표현식</h3>\n<p>복잡한 타입을 또다른 복잡한 타입으로 변환하는데 쓰입니다. <code class=\"language-text\">for</code> 표현식은 아래와 같이 사용합니다. (<a href=\"https://developer.hashicorp.com/terraform/language/expressions/for\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">공식링크</a>)</p>\n<h4 id=\"for-표현식을-이용한-예시-1-컨테이너에-값을-추가하기\" style=\"position:relative;\"><a href=\"#for-%ED%91%9C%ED%98%84%EC%8B%9D%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%98%88%EC%8B%9C-1-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88%EC%97%90-%EA%B0%92%EC%9D%84-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0\" aria-label=\"for 표현식을 이용한 예시 1 컨테이너에 값을 추가하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">for</code> 표현식을 이용한 예시 (1): 컨테이너에 값을 추가하기</h4>\n<p>list 내의 모든 이름을 대문자로 변환하는 예제를 통해 알아봅시다. 사용은 아래와 같이 할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"terraform\"><pre class=\"language-terraform\"><code class=\"language-terraform\"># 결과를 list 형식으로 리턴합니다.\n[for &lt;ITEM&gt; in &lt;LIST&gt; : &lt;OUTPUT&gt;]\n[for &lt;ITEM&gt; in &lt;LIST&gt; : &lt;OUTPUT&gt; if &lt;EXPRESSION&gt;] # 조건문 절에서 다시 살펴봅시다!\n\n# 결과를 map 형식으로 리턴합니다.\n{for &lt;ITEM&gt; in &lt;LIST&gt; : &lt;OUTPUT_KEY&gt; =&gt; &lt;OUTPUT_VALUE&gt;}\n{for &lt;ITEM&gt; in &lt;LIST&gt; : &lt;OUTPUT_KEY&gt; =&gt; &lt;OUTPUT_VALUE&gt; if &lt;EXPRESSION&gt;} # 조건문 절에서 다시 살펴봅시다!</code></pre></div>\n<ul>\n<li>LIST: 반복할 리스트</li>\n<li>ITEM: LIST의 각 항목에 할당할 변수의 이름</li>\n<li>OUTPUT: ITEM을 변환한 표현식</li>\n<li><code class=\"language-text\">if</code> 구문(optional): 조건(<code class=\"language-text\">&lt;EXPRESSION></code>)에 맞으면 값을 추가</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"terraform\"><pre class=\"language-terraform\"><code class=\"language-terraform\">variable &quot;names&quot; {\n  description = &quot;A list of names&quot;\n  type        = list(string)\n  default     = [&quot;alice&quot;, &quot;bob&quot;, &quot;charlie&quot;]\n}\n\noutput &quot;upper_names&quot; {\n  # names 안의 값에 대해 반복을 진행하며, 결과로는 upper(이름)의 값이 들어갑니다.\n  value = [for name in var.names : upper(name)]\n}\n\noutput &quot;short_upper_names&quot; {\n  # 조건을 기재할 수도 있습니다.\n  value = [for name in var.names : upper(name) if length(name) &lt; 6]\n}\n\nvariable &quot;prize_level&quot; {\n  description = &quot;map&quot;\n  type        = map(string)\n  default     = {\n    alice     = &quot;#1&quot;\n    bob       = &quot;#2&quot;\n    charlie   = &quot;#3&quot;\n  }\n}\n\noutput &quot;prize_status&quot; {\n  # prize_status의 value는 키, 밸류 쌍을 꺼낸 문자열을 리턴할 수 있습니다.\n  value = [for name, role in var.prize_level : &quot;\\${name} goes to \\${role} prize&quot;]\n}\n\noutput &quot;upper_prize_status&quot; {\n  # name, role에 해당하는 map을 리턴할 수도 있습니다.\n  value = {for name, role in var.prize_level : upper(name) =&gt; upper(role)}\n}</code></pre></div>\n<h4 id=\"for-표현식을-이용한-예시-2-문자열로-리턴하기\" style=\"position:relative;\"><a href=\"#for-%ED%91%9C%ED%98%84%EC%8B%9D%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%98%88%EC%8B%9C-2-%EB%AC%B8%EC%9E%90%EC%97%B4%EB%A1%9C-%EB%A6%AC%ED%84%B4%ED%95%98%EA%B8%B0\" aria-label=\"for 표현식을 이용한 예시 2 문자열로 리턴하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">for</code> 표현식을 이용한 예시 (2): 문자열로 리턴하기</h4>\n<p>앞서서 문자열 내에서 테라폼 코드를 참조하는 보간법 예시는 사용해본 적이 있습니다. <code class=\"language-text\">\"Hello, ${var.name}!\"</code> 과 같은 방식으로요.</p>\n<p>문자열 지시자를 사용하면, 문자열 보간처럼 <code class=\"language-text\">for</code> 반복문, <code class=\"language-text\">if</code> 제어문에서도 사용할 수 있습니다. 어떻게 사용하는지 살펴봅시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"terraform\"><pre class=\"language-terraform\"><code class=\"language-terraform\"># 반복문의 기본입니다.\n%{ for &lt;ITEM&gt; in &lt;COLLECTION&gt; }&lt;BODY&gt;%{ endfor }\n\n# 인덱스를 추가할 수도 있습니다.\n%{ for &lt;INDEX&gt;, &lt;ITEM&gt; in &lt;COLLECTION&gt; }&lt;BODY&gt;%{ endfor }</code></pre></div>\n<ul>\n<li>COLLECTION: 반복할 리스트, 맵. 말 그대로 반복 가능한 컬렉션을 의미합니다.</li>\n<li>ITEM: 각 항목에 할당할 로컬 변수의 이름입니다.</li>\n<li>BODY: ITEM을 참조할 수 있는 각각의 반복을 렌더링하는 대상입니다.</li>\n</ul>\n<p><a href=\"https://github.com/brikis98/terraform-up-and-running-code/blob/master/code/terraform/05-tips-and-tricks/loops-and-if-statements/live/global/string-directives/main.tf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">예시</a>를 보면서 함께 살펴봅시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"terraform\"><pre class=\"language-terraform\"><code class=\"language-terraform\">variable &quot;names&quot; {\n  description = &quot;A list of names&quot;\n  type        = list(string)\n  default     = [&quot;alice&quot;, &quot;bob&quot;, &quot;charlie&quot;]\n}\n\noutput &quot;for_directive&quot; {\n  # 끝의 endfor directive가 붙는다는 점을 제외하면 쉽게 이해할 수 있을 듯 합니다.\n  value = &quot;%{ for name in var.names }${name}, %{ endfor }&quot;\n}\n\noutput &quot;for_directive_index&quot; {\n  # 파이썬의 enumerate() 을 쓰듯 사용할 수도 있군요!\n  value = &quot;%{ for i, name in var.names }(${i}) ${name}, %{ endfor }&quot;\n}</code></pre></div>\n<p><code class=\"language-text\">terraform init &amp;&amp; terraform apply</code>를 수행하면 아래와 같은 결과값을 보실 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ terraform init <span class=\"token operator\">&amp;&amp;</span> terraform apply\n\n<span class=\"token punctuation\">(</span>생략<span class=\"token punctuation\">)</span>\n\nApply complete<span class=\"token operator\">!</span> Resources: <span class=\"token number\">0</span> added, <span class=\"token number\">0</span> changed, <span class=\"token number\">0</span> destroyed.\n\nOutputs:\n\nfor_directive <span class=\"token operator\">=</span> <span class=\"token string\">\"alice, bob, charlie, \"</span>\nfor_directive_index <span class=\"token operator\">=</span> <span class=\"token string\">\"(0) alice, (1) bob, (2) charlie, \"</span></code></pre></div>\n<h1 id=\"lessons-learned\" style=\"position:relative;\"><a href=\"#lessons-learned\" aria-label=\"lessons learned permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Lessons Learned</h1>\n<p>제 5장에서는 아래의 내용을 반드시 기억하셨으면 좋겠습니다.</p>\n<ol>\n<li>\n<p>(중요!) Prerequisite에서, 테라폼의 타입과 값에 대한 내용은 이미 알고있어야 하는 주요한 내용이라고 봅니다.</p>\n<ol>\n<li>프로그래밍 언어처럼 다루려면, 어떤 타입과 값을 사용할 수 있는지는 기본적으로 알아야 하기 때문입니다.</li>\n</ol>\n</li>\n<li>\n<p>반복문의 사용방법과 주의사항에 대해 배웠습니다.</p>\n</li>\n<li>\n<p>조건문의 사용방법과 주의사항에 대해 배웠습니다.</p>\n</li>\n</ol>\n<p>이것으로 제 5장, 반복문 설명을 마칩니다. 긴 글 읽어주셔서 감사합니다.</p>","fields":{"slug":"/devlog/terraform/2022-11-19---cloudneta-terraform-101-pt05-1//devlog/terraform/2022-11-19-cloudneta-terraform-101-pt05-1","tagSlugs":["/tag/terraform/","/tag/iac/","/tag/devops/"]},"frontmatter":{"date":"2022-11-16T03:37:57.000Z","description":"Terraform의 타입과 값이 어떻게 쓰이는지 알고있다는 가정 하에, 반복문과 조건문을 사용하여 로직을 표현하는 방법을 담았습니다. 그 중, 반복문을 먼저 살펴봅시다.","tags":["terraform","iac","devops"],"title":"[CloudNet@] 테라폼 스터디 5주차 - Terraform의 반복문과 조건문 (1) - 반복문","socialImage":{"publicURL":"/static/e002d5ded2f8cf0295be48fced9525bd/terraform05.jpg"}}}},"pageContext":{"slug":"/devlog/terraform/2022-11-19---cloudneta-terraform-101-pt05-1//devlog/terraform/2022-11-19-cloudneta-terraform-101-pt05-1"}},"staticQueryHashes":["251939775","357378587","401334301"]}