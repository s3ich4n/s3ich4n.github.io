{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/devlog/docker/2021-09-18-how-to-make-docker-image-securely","result":{"data":{"markdownRemark":{"id":"e606e1ec-f2ef-58d8-bc6c-48500cac1090","html":"<p>이 글은 <a href=\"https://www.youtube.com/watch?v=EC0CSevbt9k\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">0 to production-ready: a best-practices process for Docker packaging</a> 을 읽고 제 나름 번역해본 글입니다. 도움이 되길 바랍니다.</p>\n<h1 id=\"목차\" style=\"position:relative;\"><a href=\"#%EB%AA%A9%EC%B0%A8\" aria-label=\"목차 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>목차</h1>\n<ul>\n<li><a href=\"#1-%EC%9D%BC%EB%8B%A8-%EB%8F%8C%EB%A6%AC%EC%9E%90\">일단 돌도록 만든다</a></li>\n<li><a href=\"#2-%EB%B3%B4%EC%95%88%EC%9D%84-%EA%B3%A0%EB%A0%A4%ED%95%98%EC%9E%90\">보안적 측면을 고려한다</a></li>\n<li><a href=\"#3-%EC%9E%90%EB%8F%99%ED%99%94%EB%90%9C-%EB%B9%8C%EB%93%9Cci\">CI를 돌린다</a></li>\n<li><a href=\"#4-%EC%A0%95%EC%83%81%EC%9E%91%EB%8F%99-%EB%B0%8F-%EB%94%94%EB%B2%84%EA%B9%85-%EA%B0%80%EB%8A%A5%ED%95%98%EB%8F%84%EB%A1%9D\">정상작동 및 디버깅가능하게 만든다</a></li>\n<li><a href=\"#5-%EC%9E%AC%EC%83%9D%EC%82%B0%EC%84%B1\">재생산가능한 빌드를 한다</a></li>\n<li><a href=\"#6-%EB%B9%8C%EB%93%9C%EB%A5%BC-%EB%8D%94-%EB%B9%A0%EB%A5%B4%EA%B2%8C-%EC%82%AC%EC%9D%B4%EC%A6%88%EB%8A%94-%EB%8D%94-%EC%9E%91%EA%B2%8C\">빌드를 더 빠르게 하고 이미지를 작게 만든다</a></li>\n<li><a href=\"#%EB%81%9D%EC%9C%BC%EB%A1%9C\">끝으로…</a></li>\n<li><a href=\"#%EC%82%AC%EC%A1%B1-%EC%B6%94%EA%B0%80%EB%A1%9C\">(사족) 추가로…</a></li>\n</ul>\n<h2 id=\"1-일단-돌리자\" style=\"position:relative;\"><a href=\"#1-%EC%9D%BC%EB%8B%A8-%EB%8F%8C%EB%A6%AC%EC%9E%90\" aria-label=\"1 일단 돌리자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 일단 돌리자</h2>\n<div class=\"gatsby-highlight\" data-language=\"docker\"><pre class=\"language-docker\"><code class=\"language-docker\"><span class=\"token instruction\"><span class=\"token keyword\">FROM</span> python:3.9-slim-buster</span>\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> . .</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> pip install .</span>\n<span class=\"token instruction\"><span class=\"token keyword\">ENTRYPOINT</span> [<span class=\"token string\">\"./run-server.sh\"</span>]</span></code></pre></div>\n<p>이러면 일단 돌아는 감</p>\n<h2 id=\"2-보안을-고려하자\" style=\"position:relative;\"><a href=\"#2-%EB%B3%B4%EC%95%88%EC%9D%84-%EA%B3%A0%EB%A0%A4%ED%95%98%EC%9E%90\" aria-label=\"2 보안을 고려하자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 보안을 고려하자</h2>\n<ol>\n<li><code class=\"language-text\">root</code> 로 구동하지 말자!</li>\n</ol>\n<ul>\n<li>public에 배포하기 전엔 보안을 항시 신경쓰자</li>\n<li>컨테이너가 해야 할 범위를 명확히 정하자\n<ul>\n<li>자기 실햄범위를 넘기지 않도록 권한을 주자</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li>보안 업데이트를 하자!</li>\n</ol>\n<ul>\n<li>도커 이미지는 이뮤터블 아티팩트다. 보안 업데이트는 곧 신규 이미지 배포를 의미한다.\n<ol>\n<li>보안 업데이트와 관련된 디펜던시를 이해한다\n<ol>\n<li>정확히 뭐가 문제인가?\n<ol>\n<li>환경변수 수정같은걸로도 안되는 심각한 사안인가?</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>이미지 업데이트</li>\n<li>이미지 리빌드</li>\n<li>앱 재배포</li>\n</ol>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"docker\"><pre class=\"language-docker\"><code class=\"language-docker\"><span class=\"token instruction\"><span class=\"token keyword\">FROM</span> python:3.8-slim-buster</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> useradd --create-home appuser</span>\n<span class=\"token instruction\"><span class=\"token keyword\">USER</span> appuser</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">WORKDIR</span> /home/appuser</span>\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> . .</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> pip install --user .</span>\n<span class=\"token instruction\"><span class=\"token keyword\">ENTRYPOINT</span> [<span class=\"token string\">\"./run-server.sh\"</span>]</span>\n</code></pre></div>\n<h2 id=\"3-자동화된-빌드ci\" style=\"position:relative;\"><a href=\"#3-%EC%9E%90%EB%8F%99%ED%99%94%EB%90%9C-%EB%B9%8C%EB%93%9Cci\" aria-label=\"3 자동화된 빌드ci permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 자동화된 빌드/CI</h2>\n<ul>\n<li>이미지를 <strong>매번, 손으로</strong> 빌드하고 싶지 않을거다.</li>\n<li>다른 팀원들도 이미지를 빌드하기 쉽도록 하고싶을거다.\n<ul>\n<li>빌드, CI 시스템과 통합하여 배포하라!</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/usr/bin/env bash</span>\n\n<span class=\"token comment\">#</span>\n<span class=\"token comment\"># Ver 1.</span>\n<span class=\"token comment\">#   브랜치 안 가리고 작업</span>\n<span class=\"token comment\">#</span>\n\n<span class=\"token builtin class-name\">set</span> <span class=\"token parameter variable\">-euxo</span> pipefail\n\ntest.py\n<span class=\"token function\">docker</span> build <span class=\"token parameter variable\">-t</span> my_image:latest <span class=\"token builtin class-name\">.</span>  <span class=\"token comment\"># 혹은 이 과정조차 스크립트로</span>\n<span class=\"token function\">docker</span> push my_image:latest        <span class=\"token comment\"># 이것도 마찬가지</span></code></pre></div>\n<ul>\n<li>참고)\n<ul>\n<li><code class=\"language-text\">[set -euxo pipefail</code> 이 뭔데?](<a href=\"https://zetawiki.com/wiki/%EB%A6%AC%EB%88%85%EC%8A%A4_set_-euxo_pipefail\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://zetawiki.com/wiki/%EB%A6%AC%EB%88%85%EC%8A%A4_set_-euxo_pipefail</a>)</li>\n</ul>\n</li>\n<li>개발 프로세스에 접목시킨다\n<ul>\n<li>회사 내 프로세스와 잘 맞아 떨어지는지 알아봐야함</li>\n<li>질문사항\n<ul>\n<li>패키징 전에 테스트하나? 후에 하나? 둘 다 하나?</li>\n<li>브랜치는 어떻게 관리하나?</li>\n<li>패키징이 개발자에게 있어 <em>병목(bottleneck)</em> 인가?</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/usr/bin/env bash</span>\n\n<span class=\"token comment\">#</span>\n<span class=\"token comment\"># Ver 2.</span>\n<span class=\"token comment\">#   브랜치 이름을 기반으로, 태그를 붙여 배포하는 스크립트</span>\n<span class=\"token comment\">#</span>\n\n<span class=\"token builtin class-name\">set</span> <span class=\"token parameter variable\">-euxo</span> pipefail\n\n<span class=\"token assign-left variable\">GIT_BRANCH</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">git</span> rev-parse --abbrev-ref HEAD<span class=\"token variable\">)</span></span>\n\n<span class=\"token function\">docker</span> build <span class=\"token parameter variable\">-t</span> <span class=\"token string\">\"my_image:<span class=\"token variable\">$GIT_BRANCH</span>\"</span> <span class=\"token builtin class-name\">.</span>\n<span class=\"token function\">docker</span> push <span class=\"token string\">\"my_image:<span class=\"token variable\">$GIT_BRANCH</span>\"</span></code></pre></div>\n<h2 id=\"4-정상작동-및-디버깅-가능하도록\" style=\"position:relative;\"><a href=\"#4-%EC%A0%95%EC%83%81%EC%9E%91%EB%8F%99-%EB%B0%8F-%EB%94%94%EB%B2%84%EA%B9%85-%EA%B0%80%EB%8A%A5%ED%95%98%EB%8F%84%EB%A1%9D\" aria-label=\"4 정상작동 및 디버깅 가능하도록 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 정상작동 및 디버깅 가능하도록…</h2>\n<ul>\n<li>\n<p>이런 식의 작업은 (당연히)실환경에서 잘 도는걸 기대함… 그리고 에러를 잘 볼 수 있게끔 되기를 바람</p>\n</li>\n<li>\n<p><code class=\"language-text\">PYTHONFAULTHANDLER=1</code> 이라는 옵션을 주면, C 코드내에서의 트레이스백까지 같이 받아볼 수 있게 된다:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">ENV <span class=\"token assign-left variable\">PYTHONFAULTHANDLER</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>\nENTRYPOINT <span class=\"token punctuation\">[</span><span class=\"token string\">\"python\"</span>, <span class=\"token string\">\"program.py\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>참고) <a href=\"https://docs.python.org/ko/3/library/faulthandler.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.python.org/ko/3/library/faulthandler.html</a></p>\n</li>\n<li>\n<p><strong>조용히</strong> 죽는 원인파악에 좋다</p>\n<ul>\n<li><code class=\"language-text\">matplotlib</code>의 문제, DB연결 등…</li>\n</ul>\n</li>\n<li>\n<p>예시</p>\n<ul>\n<li>pre-compile bytecode</li>\n<li>파이썬은 빠른 구동을 위해 <code class=\"language-text\">pyc</code> 확장자로 컴파일을 한다.</li>\n<li>이미지에 <code class=\"language-text\">.pyc</code> 파일이 없다면 초기구동이 느려질 수도 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"docker\"><pre class=\"language-docker\"><code class=\"language-docker\"><span class=\"token comment\"># (보통은 pip에서 한다) 설치한 코드를 컴파일함</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> python -c <span class=\"token string\">\"import compileall; \\\n    compileall.compile_path(maxlevels=10)\"</span></span>\n\n<span class=\"token comment\"># my_package 디렉토리에 코드를 컴파일한다</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> python -m compileall my_package/</span></code></pre></div>\n<ul>\n<li>이런 기능이 있으니, 필요한지 파악한 후 추가하는 것이 좋다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"5-재생산성\" style=\"position:relative;\"><a href=\"#5-%EC%9E%AC%EC%83%9D%EC%82%B0%EC%84%B1\" aria-label=\"5 재생산성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 재생산성</h2>\n<ul>\n<li>메이저 디펜던시는 쉽게 바뀌지 않는다. 그런데, 시간이 지나면 지날 수록 업데이트가 필요해진다</li>\n<li>따라서, 재생산가능한 빌드를 하고싶어질 것이다. 이를 통해 통제된 방법으로 업데이트가 가능하다.\n<ul>\n<li>좋은 베이스 이미지를 선택하자!</li>\n<li>보안업데이트도 해주고 하위호환도 좋은 OS를 고르고 싶을 것임…</li>\n<li><code class=\"language-text\">python:3.9-slim-buster</code> 는 Debian Buster 슬림버전을 사용함</li>\n</ul>\n</li>\n<li>매 빌드마다 디펜던시를 업데이트하면 재생산성이 떨어진다.\n<ul>\n<li>→ 따라서, 디펜던시를 고정시키는 것도 방법.</li>\n<li>아래 도구들 고려하는 것을 추천\n<ul>\n<li>pip-tools</li>\n<li>pipenv</li>\n<li><a href=\"https://github.com/conda-incubator/conda-lock\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">conda-lock</a></li>\n<li>poetry (배워두면 아주 요긴할 듯 함. 주요 오픈소스 프로젝트들도 다 사용하고…)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>업데이트를 하지 않는다면? 오래된 디펜던시가 생기고 위험한 업그레이드를 하게된다.\n<ul>\n<li>→정기적으로(on a regular basis)파이썬 디펜던시 업데이트를 위한 조직적 프로세스가 필요하다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"6-빌드를-더-빠르게-사이즈는-더-작게\" style=\"position:relative;\"><a href=\"#6-%EB%B9%8C%EB%93%9C%EB%A5%BC-%EB%8D%94-%EB%B9%A0%EB%A5%B4%EA%B2%8C-%EC%82%AC%EC%9D%B4%EC%A6%88%EB%8A%94-%EB%8D%94-%EC%9E%91%EA%B2%8C\" aria-label=\"6 빌드를 더 빠르게 사이즈는 더 작게 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. 빌드를 더 빠르게, 사이즈는 더 작게</h2>\n<ul>\n<li>위의 과정을 따르면, 비로소 <em>제대로</em> 패키지화 한다고 할 수 있다. 그러면 최적화도 고려해야 한다.</li>\n<li>시간은 소중하므로, 빌드에 많은 시간을 버리고 싶지 않을 것이다</li>\n<li>더 작은 이미지일 수록 테스트 구동, 프로덕션 구동을 더 빨리할 수 있다</li>\n<li>Alpine 이미지는 쓰지 말자!\n<ul>\n<li>현재(2021년 5월 14일, PyCon US 2021 발표시점) 알파인 리눅스는 PyPI의 precompiled wheel을 사용하지 못한다</li>\n<li>그 결과, 모든 라이브러리를 다운받고 직접 컴파일하여 구동해야한다.\n<ul>\n<li><code class=\"language-text\">pandas</code>, <code class=\"language-text\">matplotlib</code> 을 포함하고 빌드하면 훨씬 오래걸린다</li>\n</ul>\n</li>\n<li><a href=\"https://peps.python.org/pep-0656/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PEP 656</a>이 이를 해결할 지도…</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"끝으로\" style=\"position:relative;\"><a href=\"#%EB%81%9D%EC%9C%BC%EB%A1%9C\" aria-label=\"끝으로 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>끝으로…</h2>\n<ul>\n<li>Dockerizing은 단순한 아티팩트 생성만을 말하는건 아니다\n<ul>\n<li><code class=\"language-text\">Dockerfile</code> 자체도 필요하고 빌드 스크립트, 환경 등이 필요하다</li>\n<li>그렇지만 <em>“프로세스”</em> 또한 필요하다\n<ul>\n<li>개발환경과의 상호작용\n<ul>\n<li>버전관리, 테스팅, CI 등..</li>\n</ul>\n</li>\n<li>보안 업데이트 프로세스</li>\n<li>디펜던시 업데이트 프로세스</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"사족-추가로\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%A1%B1-%EC%B6%94%EA%B0%80%EB%A1%9C\" aria-label=\"사족 추가로 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(사족) 추가로?</h2>\n<ul>\n<li><a href=\"https://docs.docker.com/develop/develop-images/multistage-build/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Docker의 멀티-스테이지 빌드</a>를 추가해서, 파이썬 빌드같은 스테이지는 따로 빼는게 좋다.\n<ul>\n<li><a href=\"https://github.com/cookiecutter/cookiecutter-django\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">django-cookiecutter</a> 로 만들어진 도커 이미지에 그런 스테이지가 있으므로, 참고하면 어떤 식으로 스테이지를 둘지에 대한 도움을 얻을 수 있다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h2>\n<ul>\n<li><a href=\"https://pythonspeed.com/docker\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://pythonspeed.com/docker</a></li>\n</ul>","fields":{"slug":"/devlog/docker/2021-09-18---how-to-make-docker-image-securely//devlog/docker/2021-09-18-how-to-make-docker-image-securely","tagSlugs":["/tag/docker/","/tag/devops/"]},"frontmatter":{"date":"2021-09-18T19:00:00.000Z","description":"PyCon US 2021 발표영상 중, 파이썬 도커 이미지를 만드는 좋은 방법에 대한 동영상을 번역해봤습니다.","tags":["docker","devops"],"title":"시작부터 배포까지: 도커 패키징의 베스트케이스","socialImage":{"publicURL":"/static/5198f5b3f44086ef968903c16c8af0df/gwangheungchang.jpg"}}}},"pageContext":{"slug":"/devlog/docker/2021-09-18---how-to-make-docker-image-securely//devlog/docker/2021-09-18-how-to-make-docker-image-securely"}},"staticQueryHashes":["251939775","357378587","401334301"]}