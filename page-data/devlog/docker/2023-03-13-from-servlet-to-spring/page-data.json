{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/devlog/docker/2023-03-13-from-servlet-to-spring","result":{"data":{"markdownRemark":{"id":"dce3b0a8-5f69-5621-b0b7-27e8df14c0bf","html":"<p>Servlet? JSP? JavaBeans? 평소 헷갈렸던 개념들을 쭉 나열하고 하나씩 이해해 보았습니다. 나아가 이를 통해 스프링 프레임워크가 얼마나 큰 개념들을 함께 내포하고 있는지도 간략히 살펴보았습니다.</p>\n<p>자바 웹 애플리케이션을 이해하기 위한 개념들에 대해 알아봅시다.</p>\n<h1 id=\"서블릿\" style=\"position:relative;\"><a href=\"#%EC%84%9C%EB%B8%94%EB%A6%BF\" aria-label=\"서블릿 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>서블릿?</h1>\n<p>Java Servlet은 Java를 이용하여 웹 어플리케이션을 작성할 수 있는 인터페이스(API)를 제공합니다. Java Servlet API를 이용하면 웹 클라이언트의 요청과 응답을 처리하고, 데이터베이스 연결, 파일 업로드, 보안 인증 등 다양한 웹 개발에 필요한 기능을 구현할 수 있습니다.</p>\n<p><code class=\"language-text\">javax.servlet</code>, <code class=\"language-text\">javax.servlet.http</code> 패키지안에 서블릿 작성을 위한 인터페이스와 클래스가 있습니다. 아래의 “서블릿 구성요소”에서 후술합니다. 특히 <code class=\"language-text\">HttpServlet</code> 클래스는 HTTP 관련 서비스를 처리하기 위해 <code class=\"language-text\">doGet</code> 및 <code class=\"language-text\">doPost</code>와 같은 메서드를 제공합니다.</p>\n<p>JSP는 Java Servlet 기술을 확장하여, HTML 문서 안에 Java 코드를 삽입할 수 있도록 해줍니다. 이렇게 함으로써, 웹 개발자는 더욱 쉽게 동적인 웹 페이지를 생성하고, 데이터베이스와의 상호작용 등을 수행할 수 있습니다.</p>\n<p>Spring Framework는 Java Servlet API를 기반으로 하며, 의존성 주입, AOP(Aspect-Oriented Programming), MVC(Model-View-Controller) 패턴, 데이터 액세스, 보안 등 다양한 기능을 제공합니다. Spring Framework를 사용하면 Java 기반의 웹 어플리케이션을 더욱 빠르고 효율적으로 개발할 수 있습니다.</p>\n<p>따라서, JSP와 Spring Framework는 Java Servlet을 기반으로 하고 있으며, 이를 이용하여 웹 개발을 보다 쉽게하고, 효율적으로 할 수 있도록 도와줍니다.</p>\n<h2 id=\"서블릿-구성요소\" style=\"position:relative;\"><a href=\"#%EC%84%9C%EB%B8%94%EB%A6%BF-%EA%B5%AC%EC%84%B1%EC%9A%94%EC%86%8C\" aria-label=\"서블릿 구성요소 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>서블릿 구성요소</h2>\n<p>서블릿의 기본 구성 요소는 다음과 같습니다. 논의하면서 주로 HTTP 서블릿에 대해 이야기할 것입니다.</p>\n<ol>\n<li>Servlet Interface: 서블릿 인터페이스는 <code class=\"language-text\">javax.servlet</code> 패키지에 정의되어 있으며, 서블릿 클래스가 구현해야 하는 메서드를 정의합니다. 서블릿 클래스는 반드시 이 인터페이스를 구현해야 합니다.</li>\n<li>Servlet Container: 서블릿 컨테이너는 웹 어플리케이션 서버의 일부로, <a href=\"https://docs.oracle.com/javaee/5/tutorial/doc/bnafi.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">서블릿의 생명 주기(lifecycle)</a>를 관리하고 HTTP 요청 및 응답을 처리합니다. Tomcat, Jetty, GlassFish 등의 서버가 서블릿 컨테이너의 역할을 수행합니다.\n<ol>\n<li>생명주기를 간략히 설명하면 아래와 같습니다.\n<ol>\n<li>서블릿의 인스턴스가 존재하지 않는 경우 웹 컨테이너는…\n<ol>\n<li>서블릿 클래스를 로드합니다.</li>\n<li>서블릿 클래스의 인스턴스를 만듭니다.</li>\n<li><code class=\"language-text\">init</code> 메소드를 호출하여 서블릿 인스턴스를 초기화합니다. 초기화는 서블릿 초기화에서 다룹니다.</li>\n</ol>\n</li>\n<li>요청 및 응답 개체를 전달하여 서비스 메서드를 호출합니다. 서비스 메서드는 서비스 메서드 작성에서 설명합니다.</li>\n<li>컨테이너가 서블릿을 제거해야 하는 경우 서블릿의 <code class=\"language-text\">destroy</code> 메소드를 호출하여 서블릿을 종료합니다. 종료는 서블릿 종료에서 설명합니다.</li>\n</ol>\n</li>\n<li>톰캣이 상기 내용을 토대로 구현되어있겠죠.</li>\n</ol>\n</li>\n<li>Servlet Request: 클라이언트로부터 전송된 HTTP 요청을 나타냅니다. <code class=\"language-text\">ServletRequest</code> 인터페이스는 HTTP 요청에 대한 다양한 메타데이터(메서드, URI, 헤더, 쿠키 등)를 포함합니다.\n<ol>\n<li><a href=\"https://docs.oracle.com/javaee/5/tutorial/doc/bnafv.html#bnafw\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">해당 대목</a>을 중점으로 살펴보시면 이해하기 쉽습니다.</li>\n</ol>\n</li>\n<li>Servlet Response: 클라이언트로 전송할 HTTP 응답을 나타냅니다. <code class=\"language-text\">ServletResponse</code> 인터페이스는 HTTP 응답에 대한 다양한 메타데이터(상태 코드, 헤더 등)를 포함합니다.\n<ol>\n<li><a href=\"https://docs.oracle.com/javaee/5/tutorial/doc/bnafv.html#bnafz\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">해당 대목</a>을 중점으로 살펴보시면 이해하기 쉽습니다.</li>\n</ol>\n</li>\n<li>Servlet Config: 서블릿 설정 정보를 나타냅니다. <code class=\"language-text\">ServletConfig</code> 인터페이스는 서블릿 초기화 파라미터와 서블릿 이름을 포함합니다.</li>\n<li>Servlet Context: 웹 어플리케이션의 전역 정보를 나타냅니다. <code class=\"language-text\">ServletContext</code> 인터페이스는 웹 어플리케이션의 루트 디렉토리 경로, 서블릿 컨텍스트 초기화 파라미터 등의 정보를 포함합니다.\n<ol>\n<li>서블릿 컨텍스트는 <a href=\"https://docs.oracle.com/javaee/5/tutorial/doc/bnagl.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">이 링크</a>를 참조하십시오.</li>\n</ol>\n</li>\n</ol>\n<blockquote>\n<p>참고: 그 외에 세션 유지 및 Finalize 관련 요소에 대한 설명은 생략합니다.</p>\n</blockquote>\n<p>이러한 서블릿의 기본 구성 요소를 활용하여 웹 어플리케이션을 구현할 수 있습니다. 서블릿은 또한 자바 EE(Java Enterprise Edition) 표준 기술의 일부이며, 다양한 웹 개발 프레임워크와 라이브러리를 포함하여 대규모 웹 어플리케이션을 개발하는 데 필수적인 기술입니다.</p>\n<h1 id=\"jsp\" style=\"position:relative;\"><a href=\"#jsp\" aria-label=\"jsp permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JSP?</h1>\n<p>JavaServer Pages (JSP)는 서블릿 기술을 확장하여 웹 어플리케이션 개발을 보다 쉽게 할 수 있도록 해주는 기술입니다. JSP는 HTML 코드와 자바 코드를 혼합하여 웹 페이지를 생성할 수 있도록 합니다.</p>\n<h2 id=\"jsp-구성요소\" style=\"position:relative;\"><a href=\"#jsp-%EA%B5%AC%EC%84%B1%EC%9A%94%EC%86%8C\" aria-label=\"jsp 구성요소 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JSP 구성요소</h2>\n<p>JSP의 핵심 요소는 다음과 같습니다.</p>\n<ol>\n<li><code class=\"language-text\">Scriptlets</code>: <code class=\"language-text\">&lt;% %></code> 태그 내에 자바 코드를 작성하는 것으로, JSP 페이지를 생성하는 데 필요한 로직을 처리할 수 있습니다.</li>\n<li>Declarations: <code class=\"language-text\">&lt;%! %></code> 태그 내에 전역 변수 및 메서드를 선언하는 것으로, JSP 페이지 내에서 재사용 가능한 코드를 작성할 수 있습니다.</li>\n<li>Directives: <code class=\"language-text\">&lt;%@ %></code> 태그 내에 JSP 페이지의 속성을 설정하는 것으로, import 문, 에러 페이지 지정, 캐시 설정 등을 할 수 있습니다.</li>\n<li>Expressions: <code class=\"language-text\">&lt;%= %></code> 태그 내에 자바 표현식을 작성하는 것으로, JSP 페이지에서 계산된 값을 출력할 수 있습니다.</li>\n<li>Actions: <code class=\"language-text\">jsp:*</code> 태그로 표시되며, JSP 컨테이너에서 실행되는 특수 태그로, JavaBean 객체의 값을 출력하거나, 페이지 이동 및 조건 분기 등의 로직을 처리할 수 있습니다.</li>\n</ol>\n<h2 id=\"jsp-대신\" style=\"position:relative;\"><a href=\"#jsp-%EB%8C%80%EC%8B%A0\" aria-label=\"jsp 대신 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JSP 대신..?</h2>\n<p>AFAIK, 요즘은 JSP를 쓰기보단 아래 조합들이 더 쓰인다고 하더군요.</p>\n<ol>\n<li>\n<p>Spring Boot + Thymeleaf</p>\n<ul>\n<li>Spring Boot는 웹 어플리케이션을 빠르게 개발할 수 있게 해주는 프레임워크이며, Thymeleaf는 템플릿 엔진 중 하나입니다. Spring Boot에서 Thymeleaf를 사용하면 서블릿을 이용하여 웹 어플리케이션을 개발할 수 있습니다. Thymeleaf는 JSP보다 유연한 문법을 제공하며, 자바 코드를 사용하지 않아도 HTML과 연동하기 쉽습니다.</li>\n</ul>\n</li>\n<li>\n<p>Spring Boot + Freemarker</p>\n<ul>\n<li>Spring Boot에서 Freemarker를 사용하면 서블릿을 이용하여 웹 어플리케이션을 개발할 수 있습니다. Freemarker는 Thymeleaf와 유사한 템플릿 엔진으로, JSP보다 유연한 문법을 제공합니다. 또한, 자바 코드를 사용하지 않아도 HTML과 연동하기 쉽습니다.</li>\n</ul>\n</li>\n<li>\n<p>Spring Boot + Mustache</p>\n<ul>\n<li>Spring Boot에서 Mustache를 사용하면 서블릿을 이용하여 웹 어플리케이션을 개발할 수 있습니다. Mustache는 JSP나 Thymeleaf보다 문법이 단순하며, 자바 코드를 사용하지 않아도 HTML과 연동하기 쉽습니다. 또한, Mustache는 서버와 클라이언트 간의 데이터 교환을 쉽게 할 수 있도록 지원합니다.</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"java-beans\" style=\"position:relative;\"><a href=\"#java-beans\" aria-label=\"java beans permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Java Beans?</h1>\n<p>JavaBeans 구성 요소는 쉽게 재사용하고 응용 프로그램으로 함께 구성할 수 있는 Java 클래스입니다. 특정 디자인 규칙을 따르는 모든 Java 클래스는 JavaBeans 구성 요소입니다.</p>\n<p>JavaBeans 클래스는 다음과 같은 규칙을 따릅니다.</p>\n<ol>\n<li>클래스는 파라미터가 없는 생성자를 제공해야 합니다.</li>\n<li>클래스의 속성은 private으로 선언되어야 하며, getter/setter 메서드를 제공해야 합니다.</li>\n<li>getter/setter 메서드는 public으로 선언되어야 하며, 메서드 이름은 get/set으로 시작해야 합니다.</li>\n<li>속성 이름은 get/set 메서드 이름에서 get/set 접두사를 제외한 나머지 부분이 됩니다. 예를 들어, <code class=\"language-text\">getName()/setName()</code> 메서드가 있다면 속성 이름은 name이 됩니다.</li>\n<li>클래스는 <code class=\"language-text\">Serializable</code> 인터페이스를 구현해야 합니다.</li>\n</ol>\n<p>JavaBeans는 재사용성이 높은 컴포넌트를 개발할 때 유용합니다. 예를 들어, 데이터베이스에서 데이터를 가져와 웹 페이지에 표시하는데 사용될 수 있는 데이터 모델 클래스를 개발할 때 JavaBeans 규약을 따르면, 이를 JSP나 서블릿과 쉽게 연동할 수 있습니다.</p>\n<blockquote>\n<p>주 - 웹 응용 프로그램에서 사용할 때 MVC 아키텍처는 종종 모델-2 아키텍처라고 합니다. 프레젠테이션과 비즈니스 로직을 혼합하는 4장, Java Servlet 기술에서 논의된 서점의 예는 모델-1 아키텍처로 알려진 것을 따릅니다. Model-2 아키텍처는 웹 애플리케이션 설계에 권장되는 접근 방식입니다.</p>\n<p><a href=\"https://docs.oracle.com/javaee/5/tutorial/doc/bnahb.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">출처</a></p>\n</blockquote>\n<h1 id=\"java-beans와-spring-framework의-관계\" style=\"position:relative;\"><a href=\"#java-beans%EC%99%80-spring-framework%EC%9D%98-%EA%B4%80%EA%B3%84\" aria-label=\"java beans와 spring framework의 관계 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Java Beans와 Spring Framework의 관계</h1>\n<p>Spring Framework에서는 JavaBeans를 매우 활발하게 사용합니다. Spring Framework에서는 자바 객체를 컨테이너에서 관리하기 위해 JavaBeans 규약을 따르는 POJO(Plain Old Java Object) 클래스를 사용합니다.</p>\n<p>Spring Framework에서는 POJO 클래스를 컨테이너에 등록하고, 필요한 객체를 DI(Dependency Injection)를 통해 주입하여 사용합니다. DI는 객체 간의 의존성을 줄이기 위해 사용되며, 객체를 생성하고 관리하는 작업을 프레임워크가 대신 처리합니다.</p>\n<p>Spring Framework에서는 POJO 클래스가 JavaBeans 규약을 따르면, 컨테이너에서 해당 클래스의 객체를 생성하고 DI를 적용할 수 있습니다. 따라서, Spring Framework에서는 POJO 클래스의 멤버 변수를 private으로 선언하고, getter/setter 메서드를 제공하여 JavaBeans 규약을 따르도록 작성합니다.</p>\n<p>예를 들어, 다음은 Spring Framework에서 사용할 수 있는 간단한 POJO 클래스입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>위의 코드에서는 JavaBeans 규약을 따르기 위해 속성을 private으로 선언하고, getter/setter 메서드를 제공합니다.</p>\n<p>Spring Framework에서는 이 POJO 클래스를 다음과 같이 등록하고 DI를 적용할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppConfig</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        user<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"John\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        user<span class=\"token punctuation\">.</span><span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> user<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserService</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">User</span> user<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">+</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>위의 코드에서는 <code class=\"language-text\">AppConfig</code> 클래스에서 User 객체를 Bean으로 등록하고, <code class=\"language-text\">UserService</code> 클래스에서 <code class=\"language-text\">Autowired</code> 어노테이션을 사용하여 User 객체를 DI 받습니다. 이렇게 등록된 User 객체는 <code class=\"language-text\">UserService</code> 클래스에서 사용되어 출력됩니다.</p>\n<p>따라서, Spring Framework에서는 JavaBeans 규약을 따르는 POJO 클래스를 사용하여 객체를 생성하고 DI를 적용하므로, 객체 간의 의존성을 줄이고 코드의 재사용성을 높일 수 있습니다.</p>\n<h1 id=\"spring-framework의-핵심-요소\" style=\"position:relative;\"><a href=\"#spring-framework%EC%9D%98-%ED%95%B5%EC%8B%AC-%EC%9A%94%EC%86%8C\" aria-label=\"spring framework의 핵심 요소 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Spring Framework의 핵심 요소?</h1>\n<p>사실상 스프링 프레임워크를 간략하게 이해하기 위해 여기까지 왔습니다.</p>\n<p>그래서, 스프링 프레임워크의 런타임으로 정말 핵심적인 컴포넌트들을 소개하면 아래 요소들이 나오는 것이었습니다.</p>\n<ul>\n<li>Spring Core container\n<ul>\n<li>스프링 프레임워크의 기본</li>\n<li>스프링 DI의 근간</li>\n</ul>\n</li>\n<li>AOP\n<ul>\n<li>AOP 지원. 이는 추후 다른 게시글로 소개하겠습니다.</li>\n</ul>\n</li>\n<li>데이터 접근/통합 레이어\n<ul>\n<li>ORM, DAO 등이 속합니다</li>\n</ul>\n</li>\n<li>웹 레이어\n<ul>\n<li>HTTP 뿐 아니라 웹소켓 등이 속합니다</li>\n</ul>\n</li>\n<li>테스팅 레이어\n<ul>\n<li><a href=\"https://docs.spring.io/spring-framework/docs/current/reference/html/testing.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">해당 링크</a>를 참고하여 주십시오.</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://docs.spring.io/spring-framework/docs/4.3.x/spring-framework-reference/html/images/spring-overview.png\" alt=\"도식은 이렇습니다.\"></p>\n<h1 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h1>\n<p>이상으로 헷갈렸던 개념들을 모두 정리할 수 있었습니다. 글을 한번 되짚어봅시다.</p>\n<ol>\n<li>Servlet은 웹 앱을 작성하기 위한 기본 뼈대입니다.</li>\n<li>JSP는 HTML 코드와 자바 코드를 혼합하여 웹 페이지를 생성하는 기술입니다. 하지만 확장성이나 코드의 유연함에서 좀 아쉬운 면이 있지요.</li>\n<li>JavaBeans는 재사용성을 중시하고 데이터를 자바스럽게 표현하는 기술입니다. 그 나름의 프로토콜을 가지고 있으며, 이는 Spring Framework에도 활발하게 쓰입니다.</li>\n<li>Spring Framework가 얼마나 많은 연구들의 총집이자 금자탑인지 알게되었습니다.</li>\n</ol>\n<p>긴 글 읽어주셔서 감사합니다.</p>\n<hr>\n<p>참고문서</p>\n<ul>\n<li><a href=\"https://docs.oracle.com/javaee/5/tutorial/doc/docinfo.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Java EE 5 튜토리얼</a> (사실 이 속에 정답이 거의 들어있었습니다!)</li>\n<li><a href=\"https://johngrib.github.io/wiki/spring-bean-config-configuration/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Configuration annotation을 통한 Spring Bean 설정</a></li>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/spring-configuration-annotation\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Spring <code class=\"language-text\">@Configuration</code> Annotation</a></li>\n</ul>","fields":{"slug":"/devlog/backend/2023-03-13---from-servlet-to-spring//devlog/docker/2023-03-13-from-servlet-to-spring","tagSlugs":["/tag/web/","/tag/backend/","/tag/java/"]},"frontmatter":{"date":"2023-03-13T23:00:00.000Z","description":"PEP 333을 보고, 자바 진영의 서블릿과 웹 프레임워크의 금자탑인 스프링 프레임워크 까지 함께 알아보게 되었습니다.","tags":["web","backend","java"],"title":"서블릿부터 스프링 프레임워크까지","socialImage":{"publicURL":{"publicURL":"/static/f93504191e16f7c297c5b70c579f058d/spring.jpg"}}}}},"pageContext":{"slug":"/devlog/backend/2023-03-13---from-servlet-to-spring//devlog/docker/2023-03-13-from-servlet-to-spring"}},"staticQueryHashes":["251939775","357378587","401334301"]}