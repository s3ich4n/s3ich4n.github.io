{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/devlog/python/2025-02-02-python-and-overloading","result":{"data":{"markdownRemark":{"id":"03cc9c16-c761-5e3d-8631-50498470af4d","html":"<p><a href=\"https://blog.s3ich4n.me/devlog/python/2025-01-19-refactoring-and-design-pattern\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">지난 글에 소개드린</a> 글또10기 디자인패턴 스터디를 통해 이야기를 나누다가, 파이썬에선 오버로딩이 되는지를 가만 생각해보았습니다.</p>\n<h1 id=\"오버로딩이-되던가\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EB%B2%84%EB%A1%9C%EB%94%A9%EC%9D%B4-%EB%90%98%EB%8D%98%EA%B0%80\" aria-label=\"오버로딩이 되던가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오버로딩이 되던가..?</h1>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Calculator</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token class-name\">String</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> a<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그러니까, 이런 코드가 도는지 말이죠. 두 <code class=\"language-text\">add</code> 메소드는 공존할까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pytest\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Calculator</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b\n\n    <span class=\"token comment\"># 같은 이름으로 다른 메소드 정의 시도</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b <span class=\"token operator\">+</span> c</code></pre></div>\n<p>테스트코드를 짜고,</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">test_method_overloading</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    calc <span class=\"token operator\">=</span> Calculator<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 두 개의 인자를 받는 add는 이미 덮어씌워졌으므로 </span>\n    <span class=\"token comment\"># TypeError가 발생해야 함</span>\n    <span class=\"token keyword\">with</span> pytest<span class=\"token punctuation\">.</span>raises<span class=\"token punctuation\">(</span>TypeError<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> exc_info<span class=\"token punctuation\">:</span>\n        result <span class=\"token operator\">=</span> calc<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 에러 메시지 검증</span>\n    <span class=\"token keyword\">assert</span> <span class=\"token string\">\"add() missing 1 required positional argument\"</span> <span class=\"token keyword\">in</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>exc_info<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 세 개의 인자를 받는 add는 정상 작동</span>\n    <span class=\"token keyword\">assert</span> calc<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">6</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">test_method_signature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># Calculator 클래스의 add 메소드가 하나만 존재하는지 확인</span>\n    methods <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>method <span class=\"token keyword\">for</span> method <span class=\"token keyword\">in</span> <span class=\"token builtin\">dir</span><span class=\"token punctuation\">(</span>Calculator<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> method <span class=\"token operator\">==</span> <span class=\"token string\">\"add\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">assert</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>methods<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span></code></pre></div>\n<p>…한번 테스트해봅시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ pytest <span class=\"token parameter variable\">-v</span> test/qna/test_python_overloading01.py\n<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span> <span class=\"token builtin class-name\">test</span> session starts <span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span>\nplatform darwin -- Python <span class=\"token number\">3.12</span>.6, pytest-8.3.4, pluggy-1.5.0 -- <span class=\"token operator\">&lt;</span>PYTHONPATH<span class=\"token operator\">></span>\ncachedir: .pytest_cache\nrootdir: <span class=\"token operator\">&lt;</span>BASEDIR<span class=\"token operator\">></span>\nconfigfile: pytest.ini\ncollected <span class=\"token number\">2</span> items\n\ntest_python_overloading01.py::test_method_overloading PASSED    <span class=\"token punctuation\">[</span> <span class=\"token number\">50</span>%<span class=\"token punctuation\">]</span>\ntest_python_overloading01.py::test_method_signature PASSED      <span class=\"token punctuation\">[</span><span class=\"token number\">100</span>%<span class=\"token punctuation\">]</span>\n\n<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span> <span class=\"token number\">2</span> passed <span class=\"token keyword\">in</span> <span class=\"token number\">0</span>.00s <span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span></code></pre></div>\n<p>주석으로 이미 작성했다시피, 테스트는 통과했습니다. <code class=\"language-text\">TypeError</code>가 런타임에 <code class=\"language-text\">raise</code>된 것이 캐치된 것이죠. 그렇다는 건 위의 자바코드와 같은 구성은 사용할 수 없다는 내용입니다. 😱🙀</p>\n<p>그렇다면 왜 안되는걸까요?</p>\n<h1 id=\"먼저-파이썬의-특징을-살펴봅시다\" style=\"position:relative;\"><a href=\"#%EB%A8%BC%EC%A0%80-%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%98-%ED%8A%B9%EC%A7%95%EC%9D%84-%EC%82%B4%ED%8E%B4%EB%B4%85%EC%8B%9C%EB%8B%A4\" aria-label=\"먼저 파이썬의 특징을 살펴봅시다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>먼저 파이썬의 특징을 살펴봅시다</h1>\n<p>파이썬에서의 타입에 대해 살펴보고, 파이썬 객체가 가지는 특징을 통해 오버로딩의 대체방안을 살펴봅시다.</p>\n<h2 id=\"초식-1---동적-타입\" style=\"position:relative;\"><a href=\"#%EC%B4%88%EC%8B%9D-1---%EB%8F%99%EC%A0%81-%ED%83%80%EC%9E%85\" aria-label=\"초식 1   동적 타입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>초식 (1) - 동적 타입</h2>\n<p>아마도 동적타입에 대한 이야기는 들어보셨을 겁니다<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>. 타입을 별도로 지정해줄 필요가 없다보니 이런 행동이 가능합니다:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">test_dynamic_type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    x <span class=\"token operator\">=</span> <span class=\"token number\">10</span>  <span class=\"token comment\"># int 타입이었다가</span>\n\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">assert</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">int</span>\n\n    x <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span>  <span class=\"token comment\"># 문자열로도 바꿀 수 있고</span>\n\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">assert</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">str</span>\n\n    x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 리스트로도 수정할 수 있습니다.</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">assert</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">list</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> python <span class=\"token operator\">-</span>vs test_dynamic_type<span class=\"token punctuation\">.</span>py\ntest_dynamic_type<span class=\"token punctuation\">.</span>py<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>test_dynamic_type <span class=\"token number\">4356563592</span>\n<span class=\"token number\">4363171952</span>\n<span class=\"token number\">4363299584</span>\nPASSED</code></pre></div>\n<p>다시말해 이렇게 됩니다:</p>\n<ol>\n<li>새로운 객체가 생성되고</li>\n<li>변수 <code class=\"language-text\">x</code>는 이 새로운 객체를 가리키게 됩니다</li>\n<li>이전에 참조하던 객체와의 연결은 끊어집니다</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">x <span class=\"token operator\">=</span> <span class=\"token number\">10</span>        <span class=\"token comment\"># x ----> [10] (id: 4356563592)</span>\nx <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span>   <span class=\"token comment\"># x ----> [\"hello\"] (id: 4363171952)</span>\nx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>   <span class=\"token comment\"># x ----> [[1,2,3]] (id: 4363299584)</span></code></pre></div>\n<h2 id=\"초식-2---duck-typing\" style=\"position:relative;\"><a href=\"#%EC%B4%88%EC%8B%9D-2---duck-typing\" aria-label=\"초식 2   duck typing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>초식 (2) - Duck typing</h2>\n<p>그리고 파이썬은 Duck typing을 지원합니다. 아주 유명한 말이죠:</p>\n<blockquote>\n<p>오리처럼 생기고, 오리처럼 헤엄치고, 오리처럼 우는 게 있다면 그건 오리일 가능성이 높다.</p>\n</blockquote>\n<p>객체에 빗대자면 이렇게 되겠죠:</p>\n<p>객체가 해당 타입에서 요구하는 모든 메서드와 속성을 가지고 있다면 그 타입으로 간주됩니다. 상속관계를 보지 않고 필요 메소드와 속성을 가지는지만 체크합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Duck</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">sound</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"꽥꽥\"</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">sound</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"멍멍\"</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">make_sound</span><span class=\"token punctuation\">(</span>animal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># animal의 구체적인 타입은 중요하지 않음</span>\n    <span class=\"token comment\"># sound() 메소드만 있으면 됨</span>\n    <span class=\"token keyword\">return</span> animal<span class=\"token punctuation\">.</span>sound<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">test_duck_typing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">assert</span> make_sound<span class=\"token punctuation\">(</span>Duck<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"꽥꽥\"</span>\n    <span class=\"token keyword\">assert</span> make_sound<span class=\"token punctuation\">(</span>Dog<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"멍멍\"</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> python <span class=\"token operator\">-</span>vs test_duck_typing<span class=\"token punctuation\">.</span>py\ntest_duck_typing<span class=\"token punctuation\">.</span>py<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>test_duck_typing PASSED</code></pre></div>\n<p>즉, 앞서 살펴보았던 자바와 같은 정적 타입 언어는 컴파일 시점에 메서드 시그니처로 오버로딩을 결정합니다. 하지만 파이썬은 런타임에 메서드의 존재 여부만 확인하죠.</p>\n<h2 id=\"초식-3---the-dunder-methods\" style=\"position:relative;\"><a href=\"#%EC%B4%88%EC%8B%9D-3---the-dunder-methods\" aria-label=\"초식 3   the dunder methods permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>초식 (3) - The dunder methods</h2>\n<p>파이썬 클래스는 설계 시 dunder methods<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup> 를 이용하여 설계할 수도 있습니다<sup id=\"fnref-3\"><a href=\"#fn-3\" class=\"footnote-ref\">3</a></sup>. 이로 인해 파이썬은 특정 인터페이스를 구현하지 않고도 주요 타입에 대해 동작을 정해줄 수 있지요.</p>\n<h3 id=\"기본-dunder-method를-살펴봅시다\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%B3%B8-dunder-method%EB%A5%BC-%EC%82%B4%ED%8E%B4%EB%B4%85%EC%8B%9C%EB%8B%A4\" aria-label=\"기본 dunder method를 살펴봅시다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기본 dunder method를 살펴봅시다</h3>\n<p>예를 들어 이런 테스트를 한다고 합시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pytest\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">test_dunder_methods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">with</span> pytest<span class=\"token punctuation\">.</span>raises<span class=\"token punctuation\">(</span>TypeError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"2\"</span>     <span class=\"token comment\"># 이걸 해주는 연산이 정의되지 않아서 안 되었던거고,</span>\n    \n    <span class=\"token keyword\">assert</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"2\"</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"12\"</span>     <span class=\"token comment\"># 서로 맞는 타입끼리의 `__add__`는 있으니 가능한 것이지요</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> pytest <span class=\"token operator\">-</span>vs test_dunder_methods<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ntest_dunder_methods<span class=\"token punctuation\">.</span>py<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>test_dunder_methods PASSED</code></pre></div>\n<h3 id=\"예시를-살펴봅시다\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%8B%9C%EB%A5%BC-%EC%82%B4%ED%8E%B4%EB%B4%85%EC%8B%9C%EB%8B%A4\" aria-label=\"예시를 살펴봅시다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예시를 살펴봅시다</h3>\n<p>그렇다면, 다양한 dunder를 직접 구현하고 이를 살펴봅시다. 예를들어, 길이를 표현하는 <code class=\"language-text\">Length</code> 라는 객체를 구상하고 이를 파이썬의 클래스로 표현해봅시다.</p>\n<p>이 클래스는 아래와 같은 기능을 제공합니다:</p>\n<ul>\n<li><code class=\"language-text\">Length</code> 클래스를 쓰고자 하는 이에게 값을 설명함\n<ul>\n<li>단순 엔드유저를 위한 출력 기능</li>\n<li><code class=\"language-text\">Length</code> 클래스 개발 중 디버깅 등을 하기 위한 출력기능</li>\n</ul>\n</li>\n<li>값의 길이, 동등여부, less than 연산여부를 가릴 수 있음</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Length</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> meters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>meters <span class=\"token operator\">=</span> meters\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>meters<span class=\"token punctuation\">}</span></span><span class=\"token string\">m\"</span></span>      <span class=\"token comment\"># print() 출력용</span>\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">__repr__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"Length(</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>meters<span class=\"token punctuation\">}</span></span><span class=\"token string\">)\"</span></span>  <span class=\"token comment\"># 개발자용 상세 출력</span>\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">__len__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>meters<span class=\"token punctuation\">)</span>       <span class=\"token comment\"># len() 호출 시</span>\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">__eq__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>meters <span class=\"token operator\">==</span> other<span class=\"token punctuation\">.</span>meters  <span class=\"token comment\"># == 연산자</span>\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">__lt__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>meters <span class=\"token operator\">&lt;</span> other<span class=\"token punctuation\">.</span>meters   <span class=\"token comment\"># &lt; 연산자</span></code></pre></div>\n<p>이를 테스트하면 아래와 같겠죠.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">test_custom_dunder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    distance <span class=\"token operator\">=</span> Length<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\"># __str__: 사용자(Length 사용자) 친화적 출력</span>\n    <span class=\"token keyword\">assert</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>distance<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"5m\"</span>\n    \n    <span class=\"token comment\"># __repr__: 개발자(Length 개발자)를 위한 상세 출력</span>\n    <span class=\"token keyword\">assert</span> <span class=\"token builtin\">repr</span><span class=\"token punctuation\">(</span>distance<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"Length(5)\"</span>\n    \n    <span class=\"token comment\"># __len__: len() 함수 지원</span>\n    <span class=\"token keyword\">assert</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>distance<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">5</span>\n    \n    <span class=\"token comment\"># __eq__, __lt__: 비교 연산자 지원</span>\n    <span class=\"token keyword\">assert</span> Length<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> Length<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">assert</span> Length<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> Length<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> pytest <span class=\"token operator\">-</span>vs test_custom_dunder<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ntest_custom_dunder<span class=\"token punctuation\">.</span>py<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>test_custom_dunder PASSED</code></pre></div>\n<p>이런 식으로, 파이썬의 기본문법을 써서 내가 원하는 개념을 표현할 수 있게 됩니다.</p>\n<h2 id=\"파이썬의-특징-정리\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%98-%ED%8A%B9%EC%A7%95-%EC%A0%95%EB%A6%AC\" aria-label=\"파이썬의 특징 정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파이썬의 특징 정리</h2>\n<p>언어의 특성이 가지는 구조적 설계방안으로 인해 오버로딩 불가능이 아닌, 구현 방법이 달랐던 것입니다.</p>\n<ol>\n<li>변수에 타입을 지정해주지 않아도 되고</li>\n<li>덕 타이핑의 개념이 지원되고</li>\n<li>파이썬의 문법을 그대로 활용할 수 있도록 dunder method를 구현하면<sup id=\"fnref-4\"><a href=\"#fn-4\" class=\"footnote-ref\">4</a></sup> 됩니다.</li>\n</ol>\n<p>그렇지만 이런 부분이 문제가 있죠.</p>\n<ol>\n<li>런타임에 프로그램 크래쉬를 유발할 수 있다는 점</li>\n<li>명확성 감소 (파이썬이 추구하는 명확성이 떨어짐이 문제)</li>\n<li>‘되겠거니’ 하다보니 유지보수가 힘들어짐 - 이런 코드가 쌓이면 코드의 예측이 어려움</li>\n</ol>\n<h1 id=\"그렇지만-타입을-아예-모르고-쓰고싶진-않아요\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%A0%87%EC%A7%80%EB%A7%8C-%ED%83%80%EC%9E%85%EC%9D%84-%EC%95%84%EC%98%88-%EB%AA%A8%EB%A5%B4%EA%B3%A0-%EC%93%B0%EA%B3%A0%EC%8B%B6%EC%A7%84-%EC%95%8A%EC%95%84%EC%9A%94\" aria-label=\"그렇지만 타입을 아예 모르고 쓰고싶진 않아요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그렇지만 타입을 아예 모르고 쓰고싶진 않아요…</h1>\n<p>파이썬은 이런 부분에 대해 충분히 인지하고 있었기 때문에 현재는 타입에 <em>힌트를 줄 수도</em> 있고, 런타임 레벨에서 어느정도 강제할 수 있는 방안을 제공합니다. 이에 대해 하나씩 설명하고자 합니다.</p>\n<h2 id=\"타입-힌팅\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85-%ED%9E%8C%ED%8C%85\" aria-label=\"타입 힌팅 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입 힌팅</h2>\n<blockquote>\n<p>파이썬 3.5부터 처음 나온 개념입니다.</p>\n</blockquote>\n<p>타입 힌팅은 파이썬 코드에 타입 정보를 명시적으로 추가하는 방법입니다. 파이썬 3.5에서 처음 도입되었고, 코드의 가독성과 유지보수성을 높이는데 큰 도움을 줍니다.</p>\n<p>파이썬 타입힌팅의 주요 특징은 아래와 같습니다:</p>\n<ul>\n<li>런타임에는 영향을 주지 않음 (단순한 힌트일 뿐)</li>\n<li>IDE와 타입 체커가 코드 분석 시 활용</li>\n<li>코드의 의도를 명확히 전달 가능</li>\n</ul>\n<p>타입 힌팅은 아래와 같은 장점을 가집니다.</p>\n<ol>\n<li>코드 이해도 향상\n<ul>\n<li>함수나 변수의 예상되는 타입을 바로 알 수 있음</li>\n<li>문서화 효과</li>\n</ul>\n</li>\n<li>버그 조기 발견\n<ul>\n<li>IDE나 타입 체커가 타입 관련 오류를 사전에 발견</li>\n<li>런타임 에러를 줄일 수 있음</li>\n</ul>\n</li>\n<li>리팩터링 용이성</li>\n</ol>\n<ul>\n<li>타입 정보가 있어 안전한 코드 수정 가능</li>\n<li>자동 완성 기능 강화</li>\n</ul>\n<p>파이썬에서 타입힌팅은 다양한 방법으로 기재할 수 있습니다.</p>\n<ul>\n<li>실제 구동할 코드에 타입힌팅을 주는 법(가장 널리 알려진 타입힌팅, 이쪽을 사용)</li>\n<li><code class=\"language-text\">.pyi</code> 파일 등에 기록하는 것\n<ul>\n<li>기존 파일을 그대로 두고 타입 힌팅만 제공합니다</li>\n<li>CPython 인터페이스에 주로 사용됩니다</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># mylib.pyi</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n</li>\n<li><code class=\"language-text\">py.typed</code> 파일로 기록하는 것\n<ul>\n<li>패키지가 타입 힌트를 공식제공함을 알리는 마커 파일입니다</li>\n<li>패키지 루트에 두고 정적 타입 체커가 이를 인식하게 합니다</li>\n</ul>\n</li>\n</ul>\n<p>이렇다보니 보통은 실제 구동코드에 타입힌팅을 주는 부분이 더 익숙합니다. 본 문서에서는 이 내용을 짚고 넘어가려 합니다.</p>\n<h3 id=\"타입-힌팅을-어떻게-하나요\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85-%ED%9E%8C%ED%8C%85%EC%9D%84-%EC%96%B4%EB%96%BB%EA%B2%8C-%ED%95%98%EB%82%98%EC%9A%94\" aria-label=\"타입 힌팅을 어떻게 하나요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입 힌팅을 어떻게 하나요?</h3>\n<p>파이썬 공식문서의 예시를 살펴볼까요.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">surface_area_of_cube</span><span class=\"token punctuation\">(</span>edge_length<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"The surface area of the cube is </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token number\">6</span> <span class=\"token operator\">*</span> edge_length <span class=\"token operator\">**</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">.\"</span></span></code></pre></div>\n<p>함수 시그니처를 이렇게 힌팅할 수 있습니다. <code class=\"language-text\">float</code> 타입을 받고 <code class=\"language-text\">str</code> 타입을 리턴하는 형식이죠.</p>\n<p>타입에 대한 힌트도 줄 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">Vector <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">scale</span><span class=\"token punctuation\">(</span>scalar<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">,</span> vector<span class=\"token punctuation\">:</span> Vector<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Vector<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>scalar <span class=\"token operator\">*</span> num <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> vector<span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># passes type checking; a list of floats qualifies as a Vector.</span>\nnew_vector <span class=\"token operator\">=</span> scale<span class=\"token punctuation\">(</span><span class=\"token number\">2.0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">4.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5.4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>아니면 아예 이런식으로 <code class=\"language-text\">TypeAlias</code> 를 써줄 수도 있지요.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> TypeAlias\n\nVector<span class=\"token punctuation\">:</span> TypeAlias <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">]</span></code></pre></div>\n<h3 id=\"타입힌팅-심화\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85%ED%9E%8C%ED%8C%85-%EC%8B%AC%ED%99%94\" aria-label=\"타입힌팅 심화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입힌팅 심화</h3>\n<ol>\n<li>TypeVar로 제네릭 타입 만들기</li>\n</ol>\n<p><code class=\"language-text\">TypeVar</code>는 파이썬에서 제네릭 타입을 정의할 때 사용하는 특별한 타입입니다. Java의 제네릭과 유사한 역할을 하며, 타입의 재사용성과 유연성을 높여줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> TypeVar<span class=\"token punctuation\">,</span> List<span class=\"token punctuation\">,</span> Sequence\n\nT <span class=\"token operator\">=</span> TypeVar<span class=\"token punctuation\">(</span><span class=\"token string\">'T'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 어떤 타입이든 될 수 있는 타입 변수</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">first</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">:</span> Sequence<span class=\"token punctuation\">[</span>T<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> T<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> lst<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span><span class=\"token string\">\"Empty sequence\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> lst<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># 사용 예시</span>\nnumbers<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\nfirst_num<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> first<span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># T는 int로 추론됨</span>\n\nstrings<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">]</span>\nfirst_str<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> first<span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># T는 str로 추론됨</span></code></pre></div>\n<p><code class=\"language-text\">bound</code> 값을 추가하여 타입을 제한할 수도 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># bound를 이용한 타입 제한</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">feed</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">pass</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span>Animal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">bark</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"멍멍!\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Animal이나 Animal의 서브클래스만 허용</span>\nBoundT <span class=\"token operator\">=</span> TypeVar<span class=\"token punctuation\">(</span><span class=\"token string\">'BoundT'</span><span class=\"token punctuation\">,</span> bound<span class=\"token operator\">=</span>Animal<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">take_care</span><span class=\"token punctuation\">(</span>animal<span class=\"token punctuation\">:</span> BoundT<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> BoundT<span class=\"token punctuation\">:</span>\n    animal<span class=\"token punctuation\">.</span>feed<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Animal의 메소드는 항상 사용 가능</span>\n    <span class=\"token keyword\">return</span> animal\n\n<span class=\"token comment\"># 사용 예시</span>\ndog <span class=\"token operator\">=</span> Dog<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ntake_care<span class=\"token punctuation\">(</span>dog<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># OK</span>\ntake_care<span class=\"token punctuation\">(</span><span class=\"token string\">\"cat\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 타입 체커 에러: str은 Animal의 서브타입이 아님</span></code></pre></div>\n<ol start=\"2\">\n<li>제약 조건이 있는 TypeVar</li>\n</ol>\n<p>특정 타입들로만 제한하고 싶을 때는 <code class=\"language-text\">TypeVar</code>에 제약 조건을 걸 수 있습니다:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> TypeVar<span class=\"token punctuation\">,</span> Union<span class=\"token punctuation\">,</span> List\n\n<span class=\"token comment\"># str이나 bytes 타입만 허용</span>\nStrOrBytes <span class=\"token operator\">=</span> TypeVar<span class=\"token punctuation\">(</span><span class=\"token string\">'StrOrBytes'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> StrOrBytes<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> StrOrBytes<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> StrOrBytes<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y\n\n<span class=\"token comment\"># 이렇게 하면 됨</span>\nresult1 <span class=\"token operator\">=</span> concat<span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"World\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># OK</span>\nresult2 <span class=\"token operator\">=</span> concat<span class=\"token punctuation\">(</span><span class=\"token string\">b\"Hello, \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">b\"World\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># OK</span>\n\n<span class=\"token comment\"># 이건 타입 체커가 에러를 발생시킴</span>\n<span class=\"token comment\"># result3 = concat(1, 2)  # Error: int는 허용되지 않음</span></code></pre></div>\n<ol start=\"3\">\n<li>overload 데코레이터 활용하기</li>\n</ol>\n<p><code class=\"language-text\">@overload</code> 데코레이터를 사용하면 함수가 여러 타입 시그니처를 가질 수 있음을 타입 체커에 알려줄 수 있습니다. 런타임에는 영향을 주지 않지만, 개발 시점에 타입 안전성을 보장하는데 도움을 줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> overload<span class=\"token punctuation\">,</span> Union\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">StringProcessor</span><span class=\"token punctuation\">:</span>\n    <span class=\"token decorator annotation punctuation\">@overload</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    \n    <span class=\"token decorator annotation punctuation\">@overload</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">:</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">:</span> Union<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Union<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> v <span class=\"token keyword\">in</span> value<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">test_string_processor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    processor <span class=\"token operator\">=</span> StringProcessor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\"># 둘 다 타입 체크를 통과함</span>\n    result1<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> processor<span class=\"token punctuation\">.</span>process<span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># \"HELLO\"</span>\n    result2<span class=\"token punctuation\">:</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> processor<span class=\"token punctuation\">.</span>process<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [\"HELLO\", \"WORLD\"]</span></code></pre></div>\n<ol start=\"4\">\n<li>선택적 매개변수와 기본값</li>\n</ol>\n<p><code class=\"language-text\">Optional</code> 표기를 통해 필요한 값을 추가적으로 쓸 수 있게 표기할 수도 있습니다. 그리고 기본값도 줄 수 있지요.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> Optional\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> title<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"Hello, </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>title<span class=\"token punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span></span><span class=\"token string\">!\"</span></span>\n    <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"Hello, </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span></span><span class=\"token string\">!\"</span></span>\n\nresult1 <span class=\"token operator\">=</span> greet<span class=\"token punctuation\">(</span><span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Ms.\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># \"Hello, Ms. Alice!\"</span>\nresult2 <span class=\"token operator\">=</span> greet<span class=\"token punctuation\">(</span><span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># \"Hello, Bob!\"</span></code></pre></div>\n<ol start=\"5\">\n<li>Union 타입과 Literal 타입</li>\n</ol>\n<p>Literal 은 말 그대로(<em>literally</em>) 동일한 문자열이 오기를 기대하는 타입입니다.</p>\n<p>Union은 이 값 중 하나의 값을 선택하겠다라는 의미로 사용합니다. 파이썬 3.11부터는 <code class=\"language-text\">|</code> 연산자로 표기할 수도 있지요.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> Union<span class=\"token punctuation\">,</span> Literal\n\n<span class=\"token comment\"># 특정 문자열만 허용하는 타입</span>\nLogLevel <span class=\"token operator\">=</span> Literal<span class=\"token punctuation\">[</span><span class=\"token string\">\"DEBUG\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"INFO\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"WARNING\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ERROR\"</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\n    message<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span>\n    level<span class=\"token punctuation\">:</span> LogLevel<span class=\"token punctuation\">,</span>\n    code<span class=\"token punctuation\">:</span> Union<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span>\n    <span class=\"token comment\"># 파이썬 3.11 이상부터는</span>\n    <span class=\"token comment\"># code: int | str 도 가능합니다.</span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"[</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>level<span class=\"token punctuation\">}</span></span><span class=\"token string\">] </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>code<span class=\"token punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>message<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 모두 유효한 호출입니다.</span>\nlog<span class=\"token punctuation\">(</span><span class=\"token string\">\"System starting\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"INFO\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\nlog<span class=\"token punctuation\">(</span><span class=\"token string\">\"File not found\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ERROR\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"E404\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 타입 체커가 에러를 발생시키는 경우</span>\n<span class=\"token comment\"># log(\"Test\", \"INVALID\", 200)  # Error: \"INVALID\"는 LogLevel에 없으니 안되죠.</span></code></pre></div>\n<ol start=\"6\">\n<li>콜백 함수의 타입 힌팅</li>\n</ol>\n<p>파이썬의 모든 것은 객체이므로, 이를 <code class=\"language-text\">Callable</code> 이라는 이름으로 매개변수로 받을 수 있게 힌트를 줄 수 있습니다. 이를 이용한 예시는 아래와 같습니다:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> Callable<span class=\"token punctuation\">,</span> TypeVar\n\nT <span class=\"token operator\">=</span> TypeVar<span class=\"token punctuation\">(</span><span class=\"token string\">'T'</span><span class=\"token punctuation\">)</span>\nR <span class=\"token operator\">=</span> TypeVar<span class=\"token punctuation\">(</span><span class=\"token string\">'R'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Callable의 특징을 기재함</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">map_list</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">:</span> Callable<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>T<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> R<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> items<span class=\"token punctuation\">:</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span>T<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span>R<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>func<span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> items<span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># 사용 예시</span>\nnumbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\nsquares <span class=\"token operator\">=</span> map_list<span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x <span class=\"token operator\">*</span> x<span class=\"token punctuation\">,</span> numbers<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [1, 4, 9]</span></code></pre></div>\n<ol start=\"7\">\n<li>클래스 메서드와 프로퍼티</li>\n</ol>\n<p><code class=\"language-text\">Protocol</code> 로 클래스 정의를 미리 흉내낼 때는 이렇게 프로퍼티를 미리 정의할 수도 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> ClassVar<span class=\"token punctuation\">,</span> Protocol\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">DataProcessor</span><span class=\"token punctuation\">(</span>Protocol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    MAX_ITEMS<span class=\"token punctuation\">:</span> ClassVar<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 클래스 변수</span>\n    \n    <span class=\"token decorator annotation punctuation\">@property</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">item_count</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">:</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CSVProcessor</span><span class=\"token punctuation\">:</span>\n    MAX_ITEMS<span class=\"token punctuation\">:</span> ClassVar<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1000</span>\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>_items<span class=\"token punctuation\">:</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    \n    <span class=\"token decorator annotation punctuation\">@property</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">item_count</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>_items<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">:</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> self<span class=\"token punctuation\">.</span>MAX_ITEMS<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span><span class=\"token string\">\"Too many items\"</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>_items<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></code></pre></div>\n<p>이러한 타입 힌팅을 활용하면 코드의 안정성을 높이고 개발자의 실수를 줄일 수 있습니다. IDE나 타입 체커를 통해 많은 오류를 사전에 발견할 수 있으며, 코드의 자동완성 기능도 더욱 정확해집니다.</p>\n<h3 id=\"타입힌팅---structural-subtyping으로\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85%ED%9E%8C%ED%8C%85---structural-subtyping%EC%9C%BC%EB%A1%9C\" aria-label=\"타입힌팅   structural subtyping으로 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입힌팅 - Structural Subtyping으로</h3>\n<p>파이썬의 타입 힌팅은 시간이 지나면서 더 파이썬스러운 방식으로 발전했습니다. 위에서 보았던 예시를 다시 살펴볼까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Duck</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">sound</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"꽥꽥\"</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">sound</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"멍멍\"</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">make_sound</span><span class=\"token punctuation\">(</span>animal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># animal의 구체적인 타입은 중요하지 않음</span>\n    <span class=\"token comment\"># sound() 메소드만 있으면 됨</span>\n    <span class=\"token keyword\">return</span> animal<span class=\"token punctuation\">.</span>sound<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">test_duck_typing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">assert</span> make_sound<span class=\"token punctuation\">(</span>Duck<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"꽥꽥\"</span>\n    <span class=\"token keyword\">assert</span> make_sound<span class=\"token punctuation\">(</span>Dog<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"멍멍\"</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> python <span class=\"token operator\">-</span>vs test_duck_typing<span class=\"token punctuation\">.</span>py\ntest_duck_typing<span class=\"token punctuation\">.</span>py<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>test_duck_typing PASSED</code></pre></div>\n<p>이후 structural subtyping 이 도입되면서, 클래스가 특정 메서드들을 구현하기만 하면 자동으로 해당 타입으로 인식되도록 변경되었습니다. <code class=\"language-text\">Protocol</code> 클래스를 통해 새 인터페이스를 정의할 수도 있지요.</p>\n<blockquote>\n<p>파이썬 3.8에서 처음 나온 개념입니다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> Protocol\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">(</span>Protocol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">sound</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>  <span class=\"token comment\"># Protocol은 구현부 없이 메서드 시그니처만 정의</span>\n\n<span class=\"token comment\"># make_sound에서, `Animal` 을 정의해주었으니</span>\n<span class=\"token comment\"># 컴파일 타임에 Protocol이 요구하는 메소드/속성이 있는지 정적으로 확인한다</span>\n<span class=\"token comment\"># 이제 Duck과 Dog는 자동으로 Animal 프로토콜을 구현한 것으로 인식한다!</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">make_sound</span><span class=\"token punctuation\">(</span>animal<span class=\"token punctuation\">:</span> Animal<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> animal<span class=\"token punctuation\">.</span>sound<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>다만 이런 정적 타입 체커(static type checker)를 활용하면 실제 개발에만 도움을 줄 뿐, 기저에 있는 덕 타이핑 방식대로 동작하며 개발 시 문제를 잡을 수 있게 도움을 의미합니다.</p>\n<h3 id=\"타입힌팅을-도와주는-도구\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85%ED%9E%8C%ED%8C%85%EC%9D%84-%EB%8F%84%EC%99%80%EC%A3%BC%EB%8A%94-%EB%8F%84%EA%B5%AC\" aria-label=\"타입힌팅을 도와주는 도구 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입힌팅을 도와주는 도구</h3>\n<p>앞서말했듯 타입 힌트를 도와주는 도구들을 통해 도움을 받을 수 있습니다. 가령 PyCharm 에서 저장 시 프로젝트의 모든 내 파이썬 파일에 대해 린트를 하는 등의 조치를 의미하죠. 때로는 타입이 맞지 않아 실제 코드를 잘못 사용하고있음을 알 수도 있습니다.</p>\n<p>정적 타입 검사기로는 아래 작업을 수행할 수 있습니다:\n- 코드 실행 없이 타입 오류를 분석\n- MyPy, Pyright, Pyre 등이 대표적\n- PEP 484(타입 힌트) 및 PEP 544(Protocol) 같은 제안을 기반으로 동작</p>\n<p>이런 도구들이 IDE와 결합되면 저장과 동시에 린팅, 타입검사 후 에러체크를 수행해주기도 합니다.</p>\n<p>반면 런타임에 타입을 검사하는 건 <code class=\"language-text\">isinstance()</code> 나 <code class=\"language-text\">type()</code> 이 있습니다. 이런 부분도 적절히 코드에 잘 녹여내서 해결할 수 있지요.</p>\n<h3 id=\"타입-힌팅에-대한-예시\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85-%ED%9E%8C%ED%8C%85%EC%97%90-%EB%8C%80%ED%95%9C-%EC%98%88%EC%8B%9C\" aria-label=\"타입 힌팅에 대한 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입 힌팅에 대한 예시</h3>\n<p><code class=\"language-text\">pyproject.toml</code> 에 기재하는 타입 힌팅 및 린팅(Black 사용법)을 기존으로 간단한 예시를 설명드리고자 합니다.</p>\n<p>아래 설정은 다음과 같은 내용을 강제합니다:</p>\n<ol>\n<li>모든 함수에 타입 힌트 필수 (<code class=\"language-text\">disallow_untyped_defs = true</code>)</li>\n<li>불완전한 타입 힌트 불허 (<code class=\"language-text\">disallow_incomplete_defs = true</code>)</li>\n<li>Any 타입 반환 시 경고 (<code class=\"language-text\">warn_return_any = true</code>)</li>\n<li>테스트 코드는 타입 힌트 옵션 (<code class=\"language-text\">[[tool.mypy.overrides]]</code> 섹션)</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"toml\"><pre class=\"language-toml\"><code class=\"language-toml\"><span class=\"token punctuation\">[</span><span class=\"token table class-name\">tool.black</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">line-length</span> <span class=\"token punctuation\">=</span> <span class=\"token number\">108</span>\n<span class=\"token key property\">target-version</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'py311'</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">include</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">'\\.pyi?$'</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token table class-name\">tool.mypy</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">python_version</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"3.11\"</span>\n<span class=\"token key property\">warn_return_any</span> <span class=\"token punctuation\">=</span> <span class=\"token boolean\">true</span>\n<span class=\"token key property\">warn_unused_configs</span> <span class=\"token punctuation\">=</span> <span class=\"token boolean\">true</span>\n<span class=\"token key property\">disallow_untyped_defs</span> <span class=\"token punctuation\">=</span> <span class=\"token boolean\">true</span>\n<span class=\"token key property\">disallow_incomplete_defs</span> <span class=\"token punctuation\">=</span> <span class=\"token boolean\">true</span>\n<span class=\"token key property\">check_untyped_defs</span> <span class=\"token punctuation\">=</span> <span class=\"token boolean\">true</span>\n<span class=\"token key property\">disallow_untyped_decorators</span> <span class=\"token punctuation\">=</span> <span class=\"token boolean\">true</span>\n<span class=\"token key property\">no_implicit_optional</span> <span class=\"token punctuation\">=</span> <span class=\"token boolean\">true</span>\n<span class=\"token key property\">warn_redundant_casts</span> <span class=\"token punctuation\">=</span> <span class=\"token boolean\">true</span>\n<span class=\"token key property\">warn_unused_ignores</span> <span class=\"token punctuation\">=</span> <span class=\"token boolean\">true</span>\n<span class=\"token key property\">warn_no_return</span> <span class=\"token punctuation\">=</span> <span class=\"token boolean\">true</span>\n<span class=\"token key property\">warn_unreachable</span> <span class=\"token punctuation\">=</span> <span class=\"token boolean\">true</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token table class-name\">tool.mypy.overrides</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">module</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"tests.*\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">disallow_untyped_defs</span> <span class=\"token punctuation\">=</span> <span class=\"token boolean\">false</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token table class-name\">tool.isort</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">profile</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"black\"</span>\n<span class=\"token key property\">multi_line_output</span> <span class=\"token punctuation\">=</span> <span class=\"token number\">3</span></code></pre></div>\n<p>black과 함께 사용하면 코드 스타일과 타입 안정성을 모두 확보할 수 있습니다.</p>\n<h1 id=\"진짜-오버로딩을-하려면-어떻게-해야해요\" style=\"position:relative;\"><a href=\"#%EC%A7%84%EC%A7%9C-%EC%98%A4%EB%B2%84%EB%A1%9C%EB%94%A9%EC%9D%84-%ED%95%98%EB%A0%A4%EB%A9%B4-%EC%96%B4%EB%96%BB%EA%B2%8C-%ED%95%B4%EC%95%BC%ED%95%B4%EC%9A%94\" aria-label=\"진짜 오버로딩을 하려면 어떻게 해야해요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>진짜 오버로딩을 하려면 어떻게 해야해요..?</h1>\n<p>이런 특성대신 실제 오버로딩을 활용하고자 한다면 파이썬 기본제공 도구를 사용하거나, 서드파티 라이브러리를 사용하여 해결할 수 있습니다.</p>\n<h2 id=\"singledispatch-활용\" style=\"position:relative;\"><a href=\"#singledispatch-%ED%99%9C%EC%9A%A9\" aria-label=\"singledispatch 활용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">@singledispatch</code> 활용</h2>\n<p>실제 목적으로서의 오버로딩을 구현하기 위해선 <code class=\"language-text\">functools</code> 의 <code class=\"language-text\">@singledispatch</code> 를 이용할 수 있습니다. 예를 들어 아래와 같은 계산기가 있다고 가정합시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Calculator</span><span class=\"token punctuation\">:</span>\n    <span class=\"token decorator annotation punctuation\">@singledispatchmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data1<span class=\"token punctuation\">,</span> data2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">raise</span> NotImplementedError<span class=\"token punctuation\">(</span><span class=\"token string\">\"Cannot process data of unknown type!\"</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\"># 그마저도 한 타입만 체크. 그래서 이름이 `single dispatch`</span>\n    <span class=\"token decorator annotation punctuation\">@add<span class=\"token punctuation\">.</span>register</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">_</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data1<span class=\"token punctuation\">,</span> data2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> data1 <span class=\"token operator\">+</span> data2\n\n    <span class=\"token decorator annotation punctuation\">@add<span class=\"token punctuation\">.</span>register</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">_</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data1<span class=\"token punctuation\">,</span> data2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> data1 <span class=\"token operator\">+</span> data2</code></pre></div>\n<p>이런 식으로 변경 후, 아래와 같이 사용할 수 있습니다:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">test_calc_int</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    calc <span class=\"token operator\">=</span> Calculator<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    result <span class=\"token operator\">=</span> calc<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\"># int 값 만을 받는 것은 허용</span>\n\n    <span class=\"token keyword\">assert</span> result <span class=\"token operator\">==</span> <span class=\"token number\">3</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">test_calc_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    calc <span class=\"token operator\">=</span> Calculator<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    result <span class=\"token operator\">=</span> calc<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\"># str 값도 허용</span>\n\n    <span class=\"token keyword\">assert</span> result <span class=\"token operator\">==</span> <span class=\"token string\">\"12\"</span></code></pre></div>\n<p>하지만, 파이썬 특유의 연산으로도 안 되는 건(프로토콜에 정의되지 않은 건) <code class=\"language-text\">TypeError</code> 가 납니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">test_single_dispatch_limitation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    calc <span class=\"token operator\">=</span> Calculator<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\"># 런타임에 뭐가 들어올 지 몰라서, 일단 연산을 시키기 때문에 에러가 날 수 있음</span>\n    <span class=\"token keyword\">with</span> pytest<span class=\"token punctuation\">.</span>raises<span class=\"token punctuation\">(</span>TypeError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        calc<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># int + str는 불가능. 그걸 TypeError로 잡음</span>\n    \n    <span class=\"token keyword\">with</span> pytest<span class=\"token punctuation\">.</span>raises<span class=\"token punctuation\">(</span>TypeError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        calc<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># str + int도 불가능. 그걸 TypeError로 잡음</span>\n    \n    <span class=\"token keyword\">with</span> pytest<span class=\"token punctuation\">.</span>raises<span class=\"token punctuation\">(</span>TypeError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        calc<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># int + list도 불가능. 그걸 TypeError로 잡음</span></code></pre></div>\n<h3 id=\"한계점\" style=\"position:relative;\"><a href=\"#%ED%95%9C%EA%B3%84%EC%A0%90\" aria-label=\"한계점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>한계점?</h3>\n<p><code class=\"language-text\">@singledispatch</code> 는 하나의 타입만 체크합니다. 그래서 <a href=\"https://pypi.org/project/multipledispatch/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">multipledispatch</code></a> 를 사용한다면, <code class=\"language-text\">TypeError</code> 가 아니라 <code class=\"language-text\">NotImplementedError</code> 를 raise 할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> multipledispatch <span class=\"token keyword\">import</span> dispatch   <span class=\"token comment\"># 이렇게 multipledispatch를 쓰면</span>\n<span class=\"token keyword\">import</span> pytest\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Calculator</span><span class=\"token punctuation\">:</span>\n    <span class=\"token decorator annotation punctuation\">@dispatch</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>      <span class=\"token comment\"># 여러 타입을 쓸 수 있습니다.</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data1<span class=\"token punctuation\">,</span> data2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> data1 <span class=\"token operator\">+</span> data2\n\n    <span class=\"token decorator annotation punctuation\">@dispatch</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data1<span class=\"token punctuation\">,</span> data2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> data1 <span class=\"token operator\">+</span> data2</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">test_calc_valid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    calc <span class=\"token operator\">=</span> Calculator<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 정상 케이스</span>\n    <span class=\"token keyword\">assert</span> calc<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">3</span>\n    <span class=\"token keyword\">assert</span> calc<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"World!\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"Hello, World!\"</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">test_calc_invalid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    calc <span class=\"token operator\">=</span> Calculator<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 타입이 맞지 않는 경우 NotImplementedError 발생.</span>\n    <span class=\"token comment\"># 기존 TypeError와는 달랐다는 점에 주의.</span>\n    <span class=\"token comment\"># 다른 타입은 구현을 안해서 NotImplementedError인 것.</span>\n    <span class=\"token keyword\">with</span> pytest<span class=\"token punctuation\">.</span>raises<span class=\"token punctuation\">(</span>NotImplementedError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        calc<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># int + str</span>\n\n    <span class=\"token keyword\">with</span> pytest<span class=\"token punctuation\">.</span>raises<span class=\"token punctuation\">(</span>NotImplementedError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        calc<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># str + int</span>\n\n    <span class=\"token keyword\">with</span> pytest<span class=\"token punctuation\">.</span>raises<span class=\"token punctuation\">(</span>NotImplementedError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        calc<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># int + list</span></code></pre></div>\n<h1 id=\"끝으로\" style=\"position:relative;\"><a href=\"#%EB%81%9D%EC%9C%BC%EB%A1%9C\" aria-label=\"끝으로 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>끝으로</h1>\n<p>정리하면 아래와 같습니다:</p>\n<p>파이썬은 덕 타이핑과 구조적 타이핑을 지원하는 언어이므로, 전통적인 오버로딩 개념이 잘 맞지 않습니다. 그러나 <code class=\"language-text\">@singledispatch</code>, <code class=\"language-text\">Protocol</code>, <code class=\"language-text\">TypeVar</code> 등을 활용하면 타입 체크를 강화할 수도 있습니다.</p>\n<p>언어가 지니는 특징과 구현방안을 이해한다면 보다 그 언어가 추구하는 방향으로 코드를 짤 수 있을 것입니다.</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\"><a href=\"https://en.wikipedia.org/wiki/Type_system\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://en.wikipedia.org/wiki/Type_system</a> 을 함께 살펴보면 더욱 좋습니다.<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a></li>\n<li id=\"fn-2\"><a href=\"https://docs.python.org/3/glossary.html#term-special-method\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.python.org/3/glossary.html#term-special-method</a> 를 의미합니다. dunder(<em>double underscore</em>) methods, special methods, 매직 메소드(<em>magic methods</em>) 라고 부르기도 합니다.<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a></li>\n<li id=\"fn-3\"><a href=\"https://docs.python.org/3/reference/datamodel.html#special-method-names\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.python.org/3/reference/datamodel.html#special-method-names</a> 을 참고해 주세요.<a href=\"#fnref-3\" class=\"footnote-backref\">↩</a></li>\n<li id=\"fn-4\">이를 프로토콜 구현이라고 부르기도 합니다.<a href=\"#fnref-4\" class=\"footnote-backref\">↩</a></li>\n</ol>\n</div>","fields":{"slug":"/devlog/python/2025-02-02---python-and-overloading//devlog/python/2025-02-02-python-and-overloading","tagSlugs":["/tag/python/","/tag/geultto/"]},"frontmatter":{"date":"2025-02-02T18:45:07.000Z","description":"파이썬이 가지는 언어적 측면과 철학의 차이때문에 의도적으로 없습니다. 그렇다면 어떤 차이가 있고 어떤 개념 차이가 있는지 파악 후 왜 오버로딩이 없으며, 대체제는 무엇인지 살펴봅시다.","tags":["python","geultto"],"title":"파이썬에는 오버로딩이 없다고요?","socialImage":{"publicURL":{"publicURL":"/static/f362749d11992f125f0cdfe8205b50ef/sangdo-dong.jpg"}}}}},"pageContext":{"slug":"/devlog/python/2025-02-02---python-and-overloading//devlog/python/2025-02-02-python-and-overloading"}},"staticQueryHashes":["251939775","357378587","401334301"]}