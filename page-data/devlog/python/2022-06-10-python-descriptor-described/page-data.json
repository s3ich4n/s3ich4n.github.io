{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/devlog/python/2022-06-10-python-descriptor-described","result":{"data":{"markdownRemark":{"id":"b250ac6e-d2c4-57cc-bb1a-60341cb66dc2","html":"<p>이 문서는 <a href=\"https://realpython.com/python-descriptors/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">여기</a>와 이펙티브 파이썬 2nd edition의 내용을 발췌하여 요약한 내용이다.</p>\n<h1 id=\"목차\" style=\"position:relative;\"><a href=\"#%EB%AA%A9%EC%B0%A8\" aria-label=\"목차 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>목차</h1>\n<ul>\n<li><a href=\"#%EB%A9%94%EC%86%8C%EB%93%9C-%EB%82%B4%EC%9D%98-python-descriptor%EC%99%80-%ED%95%A8%EC%88%98\">메소드 내의 python descriptor와 함수</a></li>\n<li><a href=\"#attribute%EC%9D%B4-lookup-chain%EC%9D%84-%ED%86%B5%ED%95%B4-access-%EB%90%98%EB%8A%94-%EB%B0%A9%EC%8B%9D\">Attribute이 lookup chain을 통해 access 되는 방식</a></li>\n<li><a href=\"#%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%98-%EB%94%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%84%B0%EB%A5%BC-%EC%A0%9C%EB%8C%80%EB%A1%9C-%EC%93%B0%EB%A0%A4%EB%A9%B4\">파이썬의 디스크립터를 제대로 쓰려면?</a></li>\n<li><a href=\"#%EB%94%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%84%B0%EB%A5%BC-%EC%93%B0%EB%8A%94-%EC%9D%B4%EC%9C%A0\">디스크립터를 쓰는 이유?</a></li>\n<li><a href=\"#%EB%82%B4-%EB%82%98%EB%A6%84%EC%9D%98-%EA%B2%B0%EB%A1%A0\">내 나름의 결론</a></li>\n</ul>\n<h2 id=\"메소드-내의-python-descriptor와-함수\" style=\"position:relative;\"><a href=\"#%EB%A9%94%EC%86%8C%EB%93%9C-%EB%82%B4%EC%9D%98-python-descriptor%EC%99%80-%ED%95%A8%EC%88%98\" aria-label=\"메소드 내의 python descriptor와 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>메소드 내의 python descriptor와 함수</h2>\n<ul>\n<li>\n<p>python의 메소드란?</p>\n<ul>\n<li>\n<p>메소드는 ‘object’ 인스턴스에 할당한 첫번째 arg를 가진 정규 함수다.</p>\n</li>\n<li>\n<p>메소드에 <code class=\"language-text\">.</code> notation을 사용하여 접근하면, 다음 작동을 한다</p>\n<ol>\n<li>알맞은 함수를 호출한다</li>\n<li>object 인스턴스를 첫번째 파라미터로 전달한다</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">obj.method(*args)</code>가 <code class=\"language-text\">method(obj, *args)</code>로 호출되는 과정에는 function 오브젝트의 <code class=\"language-text\">__get__()</code> 구현체가 쓰인다.</p>\n</li>\n<li>\n<p>이는 non-data descriptor 라고 부른다(후에 다시 설명될 것임).</p>\n</li>\n<li>\n<p>구체적으로 보면, <code class=\"language-text\">function</code> 오브젝트는 <code class=\"language-text\">__get__()</code> 오브젝트를 구현한다. 이는 <code class=\"language-text\">.</code> notation으로 호출할 때 bound method를 리턴한다.</p>\n</li>\n<li>\n<p>다른 전체 아규먼트 호출을 하기위해 함수 호출에 따라오는 (*args) 가 필요하다.</p>\n</li>\n<li>\n<p><code class=\"language-text\">CPython</code> 구현체를 python 형태로 풀어내면 다음과 같다:</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\">#</span>\n<span class=\"token comment\"># 참고링크</span>\n<span class=\"token comment\"># https://docs.python.org/3/howto/descriptor.html#functions-and-methods</span>\n<span class=\"token comment\">#</span>\n\n<span class=\"token keyword\">import</span> types\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__get__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">,</span> objtype<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token string\">\"Simulate func_descr_get() in Objects/funcobject.c\"</span>\n        <span class=\"token keyword\">if</span> obj <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> self\n        <span class=\"token keyword\">return</span> types<span class=\"token punctuation\">.</span>MethodType<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span></code></pre></div>\n<p>함수가 <code class=\"language-text\">.</code> notation 으로 호출되면 <code class=\"language-text\">__get__()</code> 함수가 호출되고 bound method 가 리턴된다.</p>\n<p>이는 일반 인스턴스 메소드 호출에 대해 작동한다. class method나 static method 에 대해서도 마찬가지다.</p>\n<p>static method 를 <code class=\"language-text\">obj.method(*args)</code> 형태로 호출할 때, 이는 자동으로 <code class=\"language-text\">method(*args)</code> 형태로 바뀐다. 비슷하게, class method를 <code class=\"language-text\">obj.method(type(obj), *args)</code> 형태로 호출할 때, 이는 자동으로 <code class=\"language-text\">method(type(obj), *args)</code> 형식으로 변경된다.</p>\n<ul>\n<li><code class=\"language-text\">@classmethod</code> 와 <code class=\"language-text\">@staticmethod</code> 간의 차이를 알기 위해서는 아래 페이지를 참고한다\n<a href=\"https://blog.s3ich4n.me/devlog/python/2022-06-09---python-classmethod-and-staticmethod/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">Python의 @classmethod</code> 와 <code class=\"language-text\">@</code>staticmethod 에 대하여</a></li>\n</ul>\n<p>static method의 cpython 형태를 python 형식으로 바꿔보면 다음과 같다:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">StaticMethod</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token string\">\"Emulate PyStaticMethod_Type() in Objects/funcobject.c\"</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>f <span class=\"token operator\">=</span> f\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__get__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">,</span> objtype<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>f</code></pre></div>\n<p>class method 구현체도 마찬가지:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ClassMethod</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token string\">\"Emulate PyClassMethod_Type() in Objects/funcobject.c\"</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>f <span class=\"token operator\">=</span> f\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__get__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">,</span> klass<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> klass <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            klass <span class=\"token operator\">=</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">def</span> <span class=\"token function\">newfunc</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">(</span>klass<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> newfunc</code></pre></div>\n<p>파이썬에서는 class method 는 단순히 class reference를 argument list 의 첫번째 argument로 받는 static method 일 뿐이다.</p>\n<h2 id=\"attribute이-lookup-chain을-통해-access-되는-방식\" style=\"position:relative;\"><a href=\"#attribute%EC%9D%B4-lookup-chain%EC%9D%84-%ED%86%B5%ED%95%B4-access-%EB%90%98%EB%8A%94-%EB%B0%A9%EC%8B%9D\" aria-label=\"attribute이 lookup chain을 통해 access 되는 방식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Attribute이 lookup chain을 통해 access 되는 방식</h2>\n<p>파이썬의 descriptor와 내부 방식을 알기위해선 attribute에 access할 때 일어나는 일을 알아야 한다.</p>\n<p>파이썬에서 모든 객체는 build-in <code class=\"language-text\">__dict__</code> 객체 안에 담겨있다. 이는 객체 자체가 선언한 모든 객체를 담는 딕셔너리다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Vehicle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    can_fly <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n    number_of_weels <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span>Vehicle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    number_of_weels <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> color\n\nmy_car <span class=\"token operator\">=</span> Car<span class=\"token punctuation\">(</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>my_car<span class=\"token punctuation\">.</span>__dict__<span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 해당 클래스 인스턴스의 __dict__ 값</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>my_car<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__dict__<span class=\"token punctuation\">)</span>    <span class=\"token comment\"># Car 클래스의 __dict__ 값</span></code></pre></div>\n<p>파이썬에서 모든 값은 ‘객체’ 다. 클래스도 마찬가지로 객체이며, <code class=\"language-text\">__dict__</code> attribute을 가지고있다. 그 값은 모든 attribute과 method 를 가지고 있다.</p>\n<p>내부 객체에 실제로 접근할때는 어떤식으로 접근하는걸까? 아래 코드를 예시로 들어보자</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># lookup.py</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Vehicle</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    can_fly <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n    number_of_wheels <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span>Vehicle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    number_of_wheels <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> color\n\nmy_car <span class=\"token operator\">=</span> Car<span class=\"token punctuation\">(</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>my_car<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>my_car<span class=\"token punctuation\">.</span>number_of_wheels<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>my_car<span class=\"token punctuation\">.</span>can_fly<span class=\"token punctuation\">)</span></code></pre></div>\n<p>결과야 쉽게 알 수 있을 것이다.</p>\n<p>내부적으로는 <code class=\"language-text\">my_car</code> 변수의 <code class=\"language-text\">color</code> 를 찾을 때, <code class=\"language-text\">my_car</code> 의 <code class=\"language-text\">__dict__</code> 객체 내부에서 ‘하나의’ 값을 찾는다. <code class=\"language-text\">number_of_wheels</code> 에 접근할 떄는 <code class=\"language-text\">Car</code> 객체의 <code class=\"language-text\">__dict__</code> 에서 찾는 것이다. <code class=\"language-text\">can_fly</code> 값은 <code class=\"language-text\">Vehicle</code> 객체의 <code class=\"language-text\">__dict__</code> 를 찾는 것이다.</p>\n<p>그러니까 실제로는 이렇다 이말임</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># lookup2.py</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Vehicle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    can_fly <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n    number_of_weels <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span>Vehicle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    number_of_weels <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> color\n\nmy_car <span class=\"token operator\">=</span> Car<span class=\"token punctuation\">(</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>my_car<span class=\"token punctuation\">.</span>__dict__<span class=\"token punctuation\">[</span><span class=\"token string\">'color'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>my_car<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__dict__<span class=\"token punctuation\">[</span><span class=\"token string\">'number_of_weels'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>my_car<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__base__<span class=\"token punctuation\">.</span>__dict__<span class=\"token punctuation\">[</span><span class=\"token string\">'can_fly'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>lookup chain 이 작동하는 방식을 풀면 다음과 같다:</p>\n<ul>\n<li>찾는 이름의 attribute가 가진 <strong>data descriptor</strong>의 <code class=\"language-text\">__get__</code> 메소드로 결과를 얻는다.</li>\n<li>그게 잘 안되면, 찾는 이름의 attribute가 가진 object의 <code class=\"language-text\">__dict__</code> 키값으로 값을 구한다.</li>\n<li>그게 잘 안되면, 찾는 이름의 attribute가 가진 <strong>non data descriptor</strong>의 <code class=\"language-text\">__get__</code> 메소드로 결과를 얻는다.</li>\n<li>그게 잘 안되면, 찾는 이름의 attribute가 가진 object type의 <code class=\"language-text\">__dict__</code> 키값으로 값을 구한다.</li>\n<li>그게 잘 안되면, 찾는 이름의 attribute가 가진 object 부모 type의 <code class=\"language-text\">__dict__</code> 키값으로 값을 구한다.</li>\n<li>그게 잘 안되면, 위의 과정을 모든 부모의 type 에 대해 객체의 <a href=\"https://data-flair.training/blogs/python-multiple-inheritance/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MRO</a> 대로 반복한다.</li>\n<li>그러고도 안되면 <code class=\"language-text\">AttributeError</code> Exception이 발생한다.</li>\n</ul>\n<h2 id=\"파이썬의-디스크립터를-제대로-쓰려면\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%98-%EB%94%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%84%B0%EB%A5%BC-%EC%A0%9C%EB%8C%80%EB%A1%9C-%EC%93%B0%EB%A0%A4%EB%A9%B4\" aria-label=\"파이썬의 디스크립터를 제대로 쓰려면 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파이썬의 디스크립터를 제대로 쓰려면?</h2>\n<p>descriptor 프로토콜(비-데이터 디스크립터)은, 객체 안에 다음 함수를 구현하면 된다:</p>\n<ul>\n<li><code class=\"language-text\">def __get__(self, obj, type=None) -> object</code></li>\n<li><code class=\"language-text\">def __set__(self, obj, value) -> None</code></li>\n</ul>\n<p>디스크립터를 구현할 때, 다음 요소를 잘 기억해두어야 한다:</p>\n<ul>\n<li><code class=\"language-text\">self</code> 값은 디스크립터 인스턴스이다</li>\n<li><code class=\"language-text\">obj</code> 값은 디스크립터가 attach 하는 인스턴스이다</li>\n<li><code class=\"language-text\">type</code> 값은 디스크립터가 atttach 하는 타입이다</li>\n</ul>\n<p><code class=\"language-text\">__set__()</code> 에는 <code class=\"language-text\">type</code> <a href=\"https://realpython.com/python-variables/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">변수</a>를 가지고 있지 않아도 된다. 왜냐면 객체에서만 <code class=\"language-text\">__set__()</code> 함수를 호출할 수 있기 때문이다. 반면, <code class=\"language-text\">__get__()</code> 함수는 객체와 클래스 모두 호출할 수 있다.</p>\n<p>다른 중요한점. 파이썬의 디스크립터는 클래스별로 ‘딱 한번’ 초기화된다는 점이다. 이는, 디스크립터를 포함하는 모든 클래스 인스턴스는 디스크립터 인스턴스를 공유한다는 것이다. 이점은 자칫 잘못하면 아래의 실수를 할 수 있다는 점이다:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># descriptors2.py</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">OneDigitNumericValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__get__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">object</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>value\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__set__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> value <span class=\"token operator\">></span> <span class=\"token number\">9</span> <span class=\"token keyword\">or</span> value <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token keyword\">or</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> value<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">raise</span> AttributeError<span class=\"token punctuation\">(</span><span class=\"token string\">\"The value is invalid\"</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    number <span class=\"token operator\">=</span> OneDigitNumericValue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nmy_foo_object <span class=\"token operator\">=</span> Foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nmy_second_foo_object <span class=\"token operator\">=</span> Foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nmy_foo_object<span class=\"token punctuation\">.</span>number <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>my_foo_object<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>my_second_foo_object<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">)</span>\n\nmy_third_foo_object <span class=\"token operator\">=</span> Foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>my_third_foo_object<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">Foo</code> 클래스는 number attribute를 가지고있고 이는 디스크립터다. 이 디스크립터는 정수값을 받고, 디스크립터의 속성으로 저장한다.</p>\n<p>그런데 뜻대로 되지않을텐데, 이유는 모든 <code class=\"language-text\">Foo</code> 인스턴스가 디스크립터 인스턴스를 공유하기 때문이다.</p>\n<p>결국 만든 것은 새로운 클래스 수준의 attribute 일 뿐이다.</p>\n<p><code class=\"language-text\">my_foo_object.number</code> 속성이 설정된 후 마지막 인스턴스가 생성 되었음에도 불구하고 Foo의 모든 인스턴스가 속성 번호에 대해 동일한 값을 가지고 있음을 알 수 있다.</p>\n<p><code class=\"language-text\">my_foo_object.number</code> attribute이 설정된 후 마지막 인스턴스가 생성 되었음에도 불구하고 모든 <code class=\"language-text\">Foo</code> 인스턴스가 동일한 <code class=\"language-text\">number</code> 값이 있음을 볼 수 있다.</p>\n<p>연결된 모든 객체에 대한 디스크립터의 모든 값을 저장하기 위해 딕셔너리를 쓰는게 낫겠다 싶다. 거기에다가 <code class=\"language-text\">__get__</code> 해서 값 두고 <code class=\"language-text\">__set__</code> 하면 되겠다 싶은데, 치명적인 단점이 있다.</p>\n<p>아래는 그 예시:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># descriptors3.py</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">OneDigitNumericValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__get__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">object</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">[</span>obj<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__set__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> value <span class=\"token operator\">></span> <span class=\"token number\">9</span> <span class=\"token keyword\">or</span> value <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token keyword\">or</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> value<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">raise</span> AttributeError<span class=\"token punctuation\">(</span><span class=\"token string\">\"The value is invalid\"</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">[</span>obj<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    number <span class=\"token operator\">=</span> OneDigitNumericValue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nmy_foo_object <span class=\"token operator\">=</span> Foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nmy_second_foo_object <span class=\"token operator\">=</span> Foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nmy_foo_object<span class=\"token punctuation\">.</span>number <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>my_foo_object<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>my_second_foo_object<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">)</span>\n\nmy_third_foo_object <span class=\"token operator\">=</span> Foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>my_third_foo_object<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">)</span></code></pre></div>\n<p>값은 원하는대로 갖고있는데 단점이 있다. 이는, 디스크립터가 오너 오브젝트에 대한 strong reference를 갖고있다는 점이다.</p>\n<p>객체를 destroy해도 메모리가 release되지 않는다. 이는 <a href=\"https://realpython.com/python-memory-management/#garbage-collection\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">gc</a>가 객체안의 디스크립터에 대한 객체를 계속 찾기 때문이다.</p>\n<p>이러면… weak reference를 하면 되겠다 싶다. 그럴 수도 있지만 모든 값이 weak reference로 참조될 수 있는 것은 아니며, 객체가 (gc에 의해) 수집되면 딕셔너리에서 사라진다는 사실을 처리해야 한다.</p>\n<p>괜찮은 해결책은, 디스크립터 자체에 값을 두는게 아니라, 디스크립터가 붙는 <strong>객체</strong>에 저장하면 될 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># descriptors4.py</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">OneDigitNumericValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__get__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">object</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">.</span>__dict__<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__set__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        obj<span class=\"token punctuation\">.</span>__dict__<span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    number <span class=\"token operator\">=</span> OneDigitNumericValue<span class=\"token punctuation\">(</span><span class=\"token string\">\"number\"</span><span class=\"token punctuation\">)</span>\n\nmy_foo_object <span class=\"token operator\">=</span> Foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nmy_second_foo_object <span class=\"token operator\">=</span> Foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nmy_foo_object<span class=\"token punctuation\">.</span>number <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>my_foo_object<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>my_second_foo_object<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">)</span>\n\nmy_third_foo_object <span class=\"token operator\">=</span> Foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>my_third_foo_object<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">)</span></code></pre></div>\n<p>다 잘되는데 단점이 있다. 초기화를 할 때 항상 이런식으로 선언을 해줘야 한다는 점이다:</p>\n<p><code class=\"language-text\">number = OneDigitNumericValue(\"number\")</code> ← “number” 라는 값을 기입해줘야 함</p>\n<p>파이썬 3.6부터는 <code class=\"language-text\">.__set_name__()</code> 이라는 걸출한게 <a href=\"https://www.python.org/dev/peps/pep-0487/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PEP 487</a>에 제안되었고, 정식 기능으로 생겼다.</p>\n<p>그 아래에는 메타클래스와 데코레이터로 할 수 있다. (사실 메타클래스는 제대로 쓰기에 너무 복잡해서, 필요하면 다시 공부하도록 하자…)</p>\n<p><code class=\"language-text\">__set_name__(self, owner, name)</code> 을 사용한 예시코드는 아래와 같다:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># descriptors5.py</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">OneDigitNumericValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__set_name__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> owner<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__get__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">object</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">.</span>__dict__<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__set__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        obj<span class=\"token punctuation\">.</span>__dict__<span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    number <span class=\"token operator\">=</span> OneDigitNumericValue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nmy_foo_object <span class=\"token operator\">=</span> Foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nmy_second_foo_object <span class=\"token operator\">=</span> Foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nmy_foo_object<span class=\"token punctuation\">.</span>number <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>my_foo_object<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>my_second_foo_object<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">)</span>\n\nmy_third_foo_object <span class=\"token operator\">=</span> Foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>my_third_foo_object<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">)</span></code></pre></div>\n<p>예상한대로 잘 됐고, <code class=\"language-text\">__init__()</code> 도 없다.</p>\n<h2 id=\"디스크립터를-쓰는-이유\" style=\"position:relative;\"><a href=\"#%EB%94%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%84%B0%EB%A5%BC-%EC%93%B0%EB%8A%94-%EC%9D%B4%EC%9C%A0\" aria-label=\"디스크립터를 쓰는 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>디스크립터를 쓰는 이유?</h2>\n<p>API 작성같이 고수준의 로직을 풀거나 하는 케이스에서는 디스크립터를 쓸 일이 없다. 일반적인 유스케이스 보다 아래 케이스에서 사용을 고려할 수 있다.</p>\n<ul>\n<li>Lazy properties (for <strong>non-data descriptor</strong>)\n<ul>\n<li>이것은 최초로 액세스 하기 전까지에는 initial value가 로드되지 않는다는 것</li>\n<li>그 후에는 initial value를 로드하고 나중의 사용을 위해 값이 캐시된다는 것</li>\n</ul>\n</li>\n</ul>\n<p><code class=\"language-text\">DeepThought</code> 라는 클래스가 <code class=\"language-text\">meaning_of_life()</code> 라는 함수를 갖고있다고 치자. 이 함수는 3초쯤 쉬고 해답을 주는 함수다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># slow_properties.py</span>\n<span class=\"token keyword\">import</span> time\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">DeepThought</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">meaning_of_life</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">42</span>\n\nmy_deep_thought_instance <span class=\"token operator\">=</span> DeepThought<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>my_deep_thought_instance<span class=\"token punctuation\">.</span>meaning_of_life<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>my_deep_thought_instance<span class=\"token punctuation\">.</span>meaning_of_life<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>my_deep_thought_instance<span class=\"token punctuation\">.</span>meaning_of_life<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>셋다 구동하려고 3초씩 매번 쉰다. 해답은 똑같은데 말이지. lazy property는 그 대신 이 메소드의 최초 실행시 연산 후 결과값을 캐싱한다. 디스크립터를 쓰면 이런 해답이 나온다:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># lazy_properties.py</span>\n<span class=\"token keyword\">import</span> time\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">LazyProperty</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> function<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>function <span class=\"token operator\">=</span> function\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> function<span class=\"token punctuation\">.</span>__name__\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__get__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">object</span><span class=\"token punctuation\">:</span>\n        obj<span class=\"token punctuation\">.</span>__dict__<span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>function<span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">.</span>__dict__<span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">DeepThought</span><span class=\"token punctuation\">:</span>\n    <span class=\"token decorator annotation punctuation\">@LazyProperty</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">meaning_of_life</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">42</span>\n\nmy_deep_thought_instance <span class=\"token operator\">=</span> DeepThought<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>my_deep_thought_instance<span class=\"token punctuation\">.</span>meaning_of_life<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>my_deep_thought_instance<span class=\"token punctuation\">.</span>meaning_of_life<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>my_deep_thought_instance<span class=\"token punctuation\">.</span>meaning_of_life<span class=\"token punctuation\">)</span></code></pre></div>\n<ol>\n<li><code class=\"language-text\">DeepThought</code> 를 선언하면서 <code class=\"language-text\">@LazyProperty</code> 를 타고간다.\n<ol>\n<li><del>데코레이터니까</del> non-data 디스크립터를 먼저 선언한다. <code class=\"language-text\">__init__</code> 하면서 function 값을 읽어와서 넣고, name도 마찬가지로 넣는다\n<ol>\n<li>function에는 함수의 주소값이 담긴다</li>\n<li>name에는 함수의 이름이 담긴다</li>\n</ol>\n</li>\n</ol>\n</li>\n<li><code class=\"language-text\">DeepThought</code> 를 초기화한다</li>\n<li>meaning_of_life를 호출하면 <code class=\"language-text\">LazyProperty</code>의 <code class=\"language-text\">__get__</code> 이 실행된다. 디스크립터가 붙는 객체에 함수 이름을 넣는다.\n<ol>\n<li><code class=\"language-text\">self.function(obj)</code> 를 실행하면서 <code class=\"language-text\">meaning_of_life</code> 함수를 구동한다.\n<code class=\"language-text\">obj</code> 값은 <code class=\"language-text\">DeepThought</code> 값이다\n그 결과는 <code class=\"language-text\">obj.__dict__[self.name]</code> 에 담긴다.</li>\n<li>그 결과를 <code class=\"language-text\">self.__name__</code> 에 저장한다.</li>\n</ol>\n</li>\n<li>나머지는 실행할 때마다 동일한 값을 공유한다.\n<ol>\n<li>이 때 파이썬은 <code class=\"language-text\">lookup chain</code> 을 사용하여, <code class=\"language-text\">__dict__</code> 내의 attribute 값을 찾는다.</li>\n</ol>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># wrong_lazy_properties.py</span>\n<span class=\"token keyword\">import</span> time\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">LazyProperty</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> function<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>function <span class=\"token operator\">=</span> function\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> function<span class=\"token punctuation\">.</span>__name__\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__get__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">object</span><span class=\"token punctuation\">:</span>\n        obj<span class=\"token punctuation\">.</span>__dict__<span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>function<span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">.</span>__dict__<span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__set__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">pass</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">DeepThought</span><span class=\"token punctuation\">:</span>\n    <span class=\"token decorator annotation punctuation\">@LazyProperty</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">meaning_of_life</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">42</span>\n\nmy_deep_thought_instance <span class=\"token operator\">=</span> DeepThought<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>my_deep_thought_instance<span class=\"token punctuation\">.</span>meaning_of_life<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>my_deep_thought_instance<span class=\"token punctuation\">.</span>meaning_of_life<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>my_deep_thought_instance<span class=\"token punctuation\">.</span>meaning_of_life<span class=\"token punctuation\">)</span></code></pre></div>\n<p>다만 <strong>data descriptor</strong> 에선 작동하지 않는다.</p>\n<ul>\n<li>DRY 한 코드</li>\n</ul>\n<p>이런류의 코드에 대해서는 DRY 해진다. 아래는 data descriptor를 안 쓴 예시</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># properties.py</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Values</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>_value1 <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        self<span class=\"token punctuation\">.</span>_value2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        self<span class=\"token punctuation\">.</span>_value3 <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        self<span class=\"token punctuation\">.</span>_value4 <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        self<span class=\"token punctuation\">.</span>_value5 <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n    <span class=\"token decorator annotation punctuation\">@property</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">value1</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_value1\n\n    <span class=\"token decorator annotation punctuation\">@value1<span class=\"token punctuation\">.</span>setter</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">value1</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>_value1 <span class=\"token operator\">=</span> value <span class=\"token keyword\">if</span> value <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">else</span> <span class=\"token number\">0</span>\n\n    <span class=\"token decorator annotation punctuation\">@property</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">value2</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_value2\n\n    <span class=\"token decorator annotation punctuation\">@value2<span class=\"token punctuation\">.</span>setter</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">value2</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>_value2 <span class=\"token operator\">=</span> value <span class=\"token keyword\">if</span> value <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">else</span> <span class=\"token number\">0</span>\n\n    <span class=\"token decorator annotation punctuation\">@property</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">value3</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_value3\n\n    <span class=\"token decorator annotation punctuation\">@value3<span class=\"token punctuation\">.</span>setter</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">value3</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>_value3 <span class=\"token operator\">=</span> value <span class=\"token keyword\">if</span> value <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">else</span> <span class=\"token number\">0</span>\n\n    <span class=\"token decorator annotation punctuation\">@property</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">value4</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_value4\n\n    <span class=\"token decorator annotation punctuation\">@value4<span class=\"token punctuation\">.</span>setter</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">value4</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>_value4 <span class=\"token operator\">=</span> value <span class=\"token keyword\">if</span> value <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">else</span> <span class=\"token number\">0</span>\n\n    <span class=\"token decorator annotation punctuation\">@property</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">value5</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_value5\n\n    <span class=\"token decorator annotation punctuation\">@value5<span class=\"token punctuation\">.</span>setter</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">value5</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>_value5 <span class=\"token operator\">=</span> value <span class=\"token keyword\">if</span> value <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">else</span> <span class=\"token number\">0</span>\n\nmy_values <span class=\"token operator\">=</span> Values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nmy_values<span class=\"token punctuation\">.</span>value1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\nmy_values<span class=\"token punctuation\">.</span>value2 <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>my_values<span class=\"token punctuation\">.</span>value1<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>my_values<span class=\"token punctuation\">.</span>value2<span class=\"token punctuation\">)</span></code></pre></div>\n<p>이걸 디스크립터로는 다음과 같이 줄일 수 있다:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># properties2.py</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">EvenNumber</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__set_name__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> owner<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__get__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">object</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">.</span>__dict__<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__set__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        obj<span class=\"token punctuation\">.</span>__dict__<span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>value <span class=\"token keyword\">if</span> value <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">else</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Values</span><span class=\"token punctuation\">:</span>\n    value1 <span class=\"token operator\">=</span> EvenNumber<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    value2 <span class=\"token operator\">=</span> EvenNumber<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    value3 <span class=\"token operator\">=</span> EvenNumber<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    value4 <span class=\"token operator\">=</span> EvenNumber<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    value5 <span class=\"token operator\">=</span> EvenNumber<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nmy_values <span class=\"token operator\">=</span> Values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nmy_values<span class=\"token punctuation\">.</span>value1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\nmy_values<span class=\"token punctuation\">.</span>value2 <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>my_values<span class=\"token punctuation\">.</span>value1<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>my_values<span class=\"token punctuation\">.</span>value2<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"내-나름의-결론\" style=\"position:relative;\"><a href=\"#%EB%82%B4-%EB%82%98%EB%A6%84%EC%9D%98-%EA%B2%B0%EB%A1%A0\" aria-label=\"내 나름의 결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>내 나름의 결론</h2>\n<p>이거… 제대로 쓰려면 상위 클래스에서 쓰고, 하위 클래스에서는 상속을 받고 써먹어야 하는 것 같다..</p>\n<p>코드가 dry 해지고, lazy properties 의 특징을 가지기야 한다만… 필요할 때 제대로 쓰자. 왜냐하면 평소엔 필요없을 것이기 때문이다.</p>\n<p>따라서, 좋은 라이브러리의 코드를 이해하고 타고들어갈 때, 혹은 저수준의 라이브러리/파이썬 스러운 인터페이스 설계 시에는 쓸 수 있으니 얼마든지 이런 방향을 알고는 있어야할 것이다.</p>","fields":{"slug":"/devlog/python/2022-06-10---python-descriptor-described//devlog/python/2022-06-10-python-descriptor-described","tagSlugs":["/tag/python/"]},"frontmatter":{"date":"2022-06-10T12:30:00.000Z","description":"Python의 디스크립터에 대하여 공부한 내용을 정리하고자 글을 작성하였습니다. 2부에서는 실제 오픈소스들의 코드를 보고 해설할 예정입니다.","tags":["python"],"title":"Python의 디스크립터에 대해 (1): 이론","socialImage":{"publicURL":{"publicURL":"/static/f362749d11992f125f0cdfe8205b50ef/sangdo-dong.jpg"}}}}},"pageContext":{"slug":"/devlog/python/2022-06-10---python-descriptor-described//devlog/python/2022-06-10-python-descriptor-described"}},"staticQueryHashes":["251939775","357378587","401334301"]}