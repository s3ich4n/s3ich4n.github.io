{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/devlog/python/2022-06-09-python-classmethod-and-staticmethod","result":{"data":{"markdownRemark":{"id":"bac2df9c-c5ef-5194-9403-92ab66e82c95","html":"<p>본 페이지에서는 Python의 <code class=\"language-text\">@classmethod</code>, <code class=\"language-text\">@staticmethod</code> 에 대한 차이와 실제 예시를 통해 어떤식의 차이가 있는지 기술한다.</p>\n<h2 id=\"classmethod-란\" style=\"position:relative;\"><a href=\"#classmethod-%EB%9E%80\" aria-label=\"classmethod 란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">@classmethod</code> 란?</h2>\n<ul>\n<li>클래스에 바인딩된 메소드를 의미한다.</li>\n<li><code class=\"language-text\">self</code> 대신, <code class=\"language-text\">cls</code> 변수를 메소드 앞에 추가한다.</li>\n<li><code class=\"language-text\">@classmethod</code> 를 상속받은 자식 클래스에서는, 자식 클래스의 property 를 가리킨다.</li>\n</ul>\n<h2 id=\"staticmethod-란\" style=\"position:relative;\"><a href=\"#staticmethod-%EB%9E%80\" aria-label=\"staticmethod 란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">@staticmethod</code> 란?</h2>\n<ul>\n<li>정적 메소드 개체는 일반적으로 사용자 정의 메소드 개체와 같은 다른 개체를 감싸는 래퍼다.</li>\n<li>정적 메소드 개체가 클래스 또는 클래스 인스턴스에서 검색될 때 실제로 반환된 개체는 더 이상 변형되지 않는 래핑된 개체이다.</li>\n<li>정적 메소드 개체는 일반적으로 래핑하는 개체가 있지만 자체적으로 호출할 수 없다.</li>\n<li>특정 객체 내에서, 로직으로 연결된 처리를 위해 작성하는 메소드를 의미한다.</li>\n</ul>\n<h2 id=\"실제-예시\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%A0%9C-%EC%98%88%EC%8B%9C\" aria-label=\"실제 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실제 예시</h2>\n<h3 id=\"classmethod-예시\" style=\"position:relative;\"><a href=\"#classmethod-%EC%98%88%EC%8B%9C\" aria-label=\"classmethod 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">@classmethod</code> 예시</h3>\n<ul>\n<li>공통적으로 상속받은 클래스들이 자신의 객체정보를 연산하기 위하여 처리한 예시값이다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">TypeBase</span><span class=\"token punctuation\">(</span>BaseModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\" TypeBase는 모든 이벤트 클래스가 상속하는 클래스\n    Pydantic을 통해, 필요 기능들을 사용할 수 있도록 작업하였다.\n    \"\"\"</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>data<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># (중략)</span>\n\n    <span class=\"token decorator annotation punctuation\">@classmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_types</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" 이벤트 클래스의 모든 필드에 대해 {변수명: 타입} 으로 리턴한다.\n        \"\"\"</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n            field<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">:</span> field<span class=\"token punctuation\">.</span>type_ <span class=\"token keyword\">for</span> field <span class=\"token keyword\">in</span> cls<span class=\"token punctuation\">.</span>__fields__<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token decorator annotation punctuation\">@classmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_searchables</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" 검색 가능한 필드에 대해 {변수명: 타입} 으로 리턴한다.\n        \"\"\"</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n            idx<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">:</span> idx<span class=\"token punctuation\">.</span>type_ <span class=\"token keyword\">for</span> idx <span class=\"token keyword\">in</span>\n            <span class=\"token punctuation\">(</span>field <span class=\"token keyword\">for</span> field <span class=\"token keyword\">in</span> cls<span class=\"token punctuation\">.</span>__fields__<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span>\n              field<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">in</span> cls<span class=\"token punctuation\">.</span>Config<span class=\"token punctuation\">.</span>searchables<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token decorator annotation punctuation\">@classmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_result_fields</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" 리턴값으로 제공가능한 필드에 대해 {변수명: 타입} 으로 리턴한다.\n        \"\"\"</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n            idx<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">:</span> idx<span class=\"token punctuation\">.</span>type_ <span class=\"token keyword\">for</span> idx <span class=\"token keyword\">in</span>\n            <span class=\"token punctuation\">(</span>field <span class=\"token keyword\">for</span> field <span class=\"token keyword\">in</span> cls<span class=\"token punctuation\">.</span>__fields__<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span>\n              field<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">in</span> cls<span class=\"token punctuation\">.</span>Config<span class=\"token punctuation\">.</span>results<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>이런 식으로, <code class=\"language-text\">TypeBase</code> 클래스를 상속받는 하위 객체에서 다음과 같이 사용할 수 있다.\n<ol>\n<li>상속받는 하위 객체에서, 메타클래스로 <code class=\"language-text\">searchables</code>, <code class=\"language-text\">results</code> 라는 필드값을 지정한다.</li>\n<li>해당 값에 대한 dictionary comprehension을 사용하여, <code class=\"language-text\">{변수명:타입}</code> 형식을 제공할 수 있게 된다.</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"staticmethod-예시\" style=\"position:relative;\"><a href=\"#staticmethod-%EC%98%88%EC%8B%9C\" aria-label=\"staticmethod 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">@staticmethod</code> 예시</h3>\n<ul>\n<li>\n<p>특정 메소드의 연산 등, 필요한 값들에 대해 바로 연산하는 용도로 사용할 수 있다.</p>\n<ul>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">    <span class=\"token decorator annotation punctuation\">@staticmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">parse_bool_envbars</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> value <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'true'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'True'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n\n    <span class=\"token decorator annotation punctuation\">@staticmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">parse_list_envbars</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token builtin\">list</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> value\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p>이런 식으로, 특정 메소드 내의 일부 값을 받은 후 즉시 필요한 값을 전달하는 용도로 사용한다.</p>\n</li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/devlog/python/2022-06-09---python-classmethod-and-staticmethod//devlog/python/2022-06-09-python-classmethod-and-staticmethod","tagSlugs":["/tag/python/"]},"frontmatter":{"date":"2022-06-09T10:30:00.000Z","description":"Python의 \"@classmethod\" 와 \"@staticmethod\"에 대해","tags":["python"],"title":"\"@classmethod\" 와 \"@staticmethod\"에 대해","socialImage":{"publicURL":{"publicURL":"/static/f362749d11992f125f0cdfe8205b50ef/sangdo-dong.jpg"}}}}},"pageContext":{"slug":"/devlog/python/2022-06-09---python-classmethod-and-staticmethod//devlog/python/2022-06-09-python-classmethod-and-staticmethod"}},"staticQueryHashes":["251939775","357378587","401334301"]}