{"componentChunkName":"component---src-templates-index-template-index-template-tsx","path":"/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"fields":{"categorySlug":"/category/devlog/","slug":"/devlog/python/2025-02-16---probing-pep-333-3-wsgi-and-asgi-pt02//devlog/python/2025-02-16-probing-pep-333-3-wsgi-and-asgi-pt02"},"frontmatter":{"description":"PEP 시리즈 - PEP 333, PEP 3333 을 탐구합니다. 이번 글에서는 ASGI 구현체에 대해 살펴봅니다.","category":"devlog","title":"PEP 공부해보기 - PEP 333, PEP 3333에 대하여 (2)","date":"2025-02-16T18:57:00.000Z","slug":"/devlog/python/2025-02-16-probing-pep-333-3-wsgi-and-asgi-pt02"}}},{"node":{"fields":{"categorySlug":"/category/devlog/","slug":"/devlog/python/2025-02-02---python-and-overloading//devlog/python/2025-02-02-python-and-overloading"},"frontmatter":{"description":"파이썬이 가지는 언어적 측면과 철학의 차이때문에 의도적으로 없습니다. 그렇다면 어떤 차이가 있고 어떤 개념 차이가 있는지 파악 후 왜 오버로딩이 없으며, 대체제는 무엇인지 살펴봅시다.","category":"devlog","title":"파이썬에는 오버로딩이 없다고요?","date":"2025-02-02T18:45:07.000Z","slug":"/devlog/python/2025-02-02-python-and-overloading"}}},{"node":{"fields":{"categorySlug":"/category/devlog/","slug":"/devlog/python/2025-01-19---refactoring-and-design-pattern-in-python//devlog/python/2025-01-19-refactoring-and-design-pattern"},"frontmatter":{"description":"파이썬으로 디자인 패턴과 리팩터링 2판을 읽는 스터디를 시작했습니다. 이를 통해 배운 점을 공유드립니다.","category":"devlog","title":"파이썬으로 살펴보는 디자인 패턴과 리팩터링","date":"2025-01-19T18:57:14.000Z","slug":"/devlog/python/2025-01-19-refactoring-and-design-pattern"}}},{"node":{"fields":{"categorySlug":"/category/retrospect/","slug":"/retrospect/2024-12-22---2024-retrospect//retrospect/2024-12-22-2024-retrospect"},"frontmatter":{"description":"2024년의 저를 회고합니다. 부끄러움이 많은 한 해를 보냈습니다. 함께의 힘을 알게되었습니다. 그리고 다음 나아갈 길을 확인해 보았습니다.","category":"retrospect","title":"2024년 회고","date":"2024-12-22T18:59:16.000Z","slug":"/retrospect/2024-12-22-2024-retrospect"}}},{"node":{"fields":{"categorySlug":"/category/devlog/","slug":"/devlog/python/2024-11-24---python-container-101-pt03//devlog/python/2024-11-24-python-container-101-pt03"},"frontmatter":{"description":"파이썬 컨테이너 최적화 기법을 이용하여 CPU bound 작업과 IO bound 작업을 직접 구동해봅니다.","category":"devlog","title":"[연재] 파이썬 컨테이너 선택 제 3형 - 파이썬 컨테이너 실전비교","date":"2024-11-24T23:57:00.000Z","slug":"/devlog/python/2024-11-24-python-container-101-pt03"}}},{"node":{"fields":{"categorySlug":"/category/retrospect/","slug":"/retrospect/2024-11-10---6-month-retrospect//retrospect/2024-11-10-6-month-retrospect"},"frontmatter":{"description":"입사 후 지난 6개월을 회고합니다. 지난 6개월간 무엇을 했고, 무엇을 반성하며 무엇을 향해 나아가야할지 썼습니다.","category":"retrospect","title":"지난 6개월 간 업무 회고","date":"2024-11-10T23:20:16.000Z","slug":"/retrospect/2024-11-10-6-month-retrospect"}}},{"node":{"fields":{"categorySlug":"/category/devlog/","slug":"/devlog/python/2024-10-26---python-container-101-pt02//devlog/python/2024-10-26-python-container-101-pt02"},"frontmatter":{"description":"컨테이너 사이즈 최소화의 필요성과, 최소화 과정 중 파이썬 라이브러리 설치 과정에서의 최적화 제안(PEP 656)을 소개합니다.","category":"devlog","title":"[연재] 파이썬 컨테이너 선택 제 2형 - 파이썬 컨테이너 최적화","date":"2024-10-26T05:08:00.000Z","slug":"/devlog/python/2024-10-26-python-container-101-pt02"}}}]}},"pageContext":{"limit":7,"offset":0,"pagination":{"currentPage":0,"prevPagePath":"/","nextPagePath":"/page/1","hasNextPage":true,"hasPrevPage":false}}},"staticQueryHashes":["251939775","357378587","401334301","63107425"]}