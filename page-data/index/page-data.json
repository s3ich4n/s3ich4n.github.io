{"componentChunkName":"component---src-templates-index-template-index-template-tsx","path":"/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"fields":{"categorySlug":"/category/retrospect/","slug":"/retrospect/2025-03-30---is-this-the-real-end-of-geultto-10th//retrospect/2025-03-30-is-this-the-real-end-of-geultto-10th"},"frontmatter":{"description":"저는 다르게 봅니다. 뭘 배웠기에 이렇게 자신있게 이야기하는지 쓰려합니다.","category":"retrospect","title":"글또10기 회고 - 이게 진짜 끝일까?","date":"2025-03-30T18:59:16.000Z","slug":"/retrospect/2025-03-30-is-this-the-real-end-of-geultto-10th"}}},{"node":{"fields":{"categorySlug":"/category/devlog/","slug":"/devlog/python/2025-03-16---fastapi-lessons-learned-pt01//devlog/python/2025-03-16-fastapi-lessons-learned-pt01"},"frontmatter":{"description":"FastAPI 앱으로 트랜잭션 스크립트부터 도메인 기반 기초적 설계의 재구조를 잡기까지의 여정을 설명합니다. 1부에서는 어떻게 바꾸었고 어떤 식의 1차 작업을 완료했는지를 되짚어봅니다","category":"devlog","title":"FastAPI 앱 개발 시 나만의 점검사항 (1) - 기본 구조와 테스팅","date":"2025-03-16T19:13:00.000Z","slug":"/devlog/python/2025-03-16-fastapi-lessons-learned-pt01"}}},{"node":{"fields":{"categorySlug":"/category/devlog/","slug":"/devlog/python/2025-02-16---probing-pep-333-3-wsgi-and-asgi-pt02//devlog/python/2025-02-16-probing-pep-333-3-wsgi-and-asgi-pt02"},"frontmatter":{"description":"PEP 시리즈 - PEP 333, PEP 3333 을 탐구합니다. 이번 글에서는 ASGI 구현체에 대해 살펴봅니다.","category":"devlog","title":"PEP 공부해보기 - PEP 333, PEP 3333에 대하여 (2)","date":"2025-02-16T18:57:00.000Z","slug":"/devlog/python/2025-02-16-probing-pep-333-3-wsgi-and-asgi-pt02"}}},{"node":{"fields":{"categorySlug":"/category/devlog/","slug":"/devlog/python/2025-02-02---python-and-overloading//devlog/python/2025-02-02-python-and-overloading"},"frontmatter":{"description":"파이썬이 가지는 언어적 측면과 철학의 차이때문에 의도적으로 없습니다. 그렇다면 어떤 차이가 있고 어떤 개념 차이가 있는지 파악 후 왜 오버로딩이 없으며, 대체제는 무엇인지 살펴봅시다.","category":"devlog","title":"파이썬에는 오버로딩이 없다고요?","date":"2025-02-02T18:45:07.000Z","slug":"/devlog/python/2025-02-02-python-and-overloading"}}},{"node":{"fields":{"categorySlug":"/category/devlog/","slug":"/devlog/python/2025-01-19---refactoring-and-design-pattern-in-python//devlog/python/2025-01-19-refactoring-and-design-pattern"},"frontmatter":{"description":"파이썬으로 디자인 패턴과 리팩터링 2판을 읽는 스터디를 시작했습니다. 이를 통해 배운 점을 공유드립니다.","category":"devlog","title":"파이썬으로 살펴보는 디자인 패턴과 리팩터링","date":"2025-01-19T18:57:14.000Z","slug":"/devlog/python/2025-01-19-refactoring-and-design-pattern"}}},{"node":{"fields":{"categorySlug":"/category/retrospect/","slug":"/retrospect/2024-12-22---2024-retrospect//retrospect/2024-12-22-2024-retrospect"},"frontmatter":{"description":"2024년의 저를 회고합니다. 부끄러움이 많은 한 해를 보냈습니다. 함께의 힘을 알게되었습니다. 그리고 다음 나아갈 길을 확인해 보았습니다.","category":"retrospect","title":"2024년 회고","date":"2024-12-22T18:59:16.000Z","slug":"/retrospect/2024-12-22-2024-retrospect"}}},{"node":{"fields":{"categorySlug":"/category/devlog/","slug":"/devlog/python/2024-11-24---python-container-101-pt03//devlog/python/2024-11-24-python-container-101-pt03"},"frontmatter":{"description":"파이썬 컨테이너 최적화 기법을 이용하여 CPU bound 작업과 IO bound 작업을 직접 구동해봅니다.","category":"devlog","title":"[연재] 파이썬 컨테이너 선택 제 3형 - 파이썬 컨테이너 실전비교","date":"2024-11-24T23:57:00.000Z","slug":"/devlog/python/2024-11-24-python-container-101-pt03"}}}]}},"pageContext":{"limit":7,"offset":0,"pagination":{"currentPage":0,"prevPagePath":"/","nextPagePath":"/page/1","hasNextPage":true,"hasPrevPage":false}}},"staticQueryHashes":["251939775","357378587","401334301","63107425"]}