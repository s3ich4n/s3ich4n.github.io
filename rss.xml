<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[팔공산 창고]]></title><description><![CDATA[팔공산 창고]]></description><link>http://github.com/dylang/node-rss</link><generator>GatsbyJS</generator><lastBuildDate>Tue, 22 Nov 2022 07:29:16 GMT</lastBuildDate><item><title><![CDATA[[CloudNet@] 테라폼 스터디 5주차 - Terraform의 반복문과 조건문 (2) - 조건문]]></title><description><![CDATA[Terraform의 타입과 값이 어떻게 쓰이는지 알고있다는 가정 하에, 반복문과 조건문을 사용하여 로직을 표현하는 방법을 담았습니다. 그 중, 조건문을 살펴봅시다.]]></description><link>https://blog.s3ich4n.me/devlog/terraform/2022-11-19-cloudneta-terraform-101-pt05-2</link><guid isPermaLink="false">https://blog.s3ich4n.me/devlog/terraform/2022-11-19-cloudneta-terraform-101-pt05-2</guid><pubDate>Sat, 19 Nov 2022 23:52:57 GMT</pubDate><content:encoded>&lt;p&gt;이 내용은 CloudNet@ 에서 진행하는 테라폼 기초 입문 스터디에 대한 연재글입니다.&lt;/p&gt;
&lt;p&gt;스터디에서 사용하는 교재는 &lt;a href=&quot;http://www.yes24.com/Product/Goods/101511312&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Terraform Up &amp;#x26; Running 2nd Edition&lt;/a&gt; 입니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;prerequisites&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#prerequisites&quot; aria-label=&quot;prerequisites permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Prerequisites&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.hashicorp.com/terraform/language/expressions/types&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Terraform: Types and Values&lt;/a&gt; 공식문서
&lt;ul&gt;
&lt;li&gt;타입과 값에는 어떤 것들이 사용될 수 있는지 확인해봅시다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;count&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;for_each&lt;/code&gt; 는 &lt;code class=&quot;language-text&quot;&gt;resource&lt;/code&gt; 내에서 사용될 수 있습니다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;for&lt;/code&gt; 표현식은 복잡한 타입을 또다른 복잡한 타입으로 변환하는데 쓰입니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;아래에서 5주차 스터디 내용을 공유합니다.&lt;/p&gt;
&lt;p&gt;교재의 5장 내용을 다루고 있습니다.&lt;/p&gt;
&lt;h1 id=&quot;본문&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B3%B8%EB%AC%B8&quot; aria-label=&quot;본문 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;본문&lt;/h1&gt;
&lt;p&gt;테라폼을 통해 마치 프로그램을 작성하듯 코드를 작성할 수 있습니다. 이번 챕터에서는 아래의 내용을 학습할 예정입니다:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;반복문, 조건문 사용방법
&lt;ul&gt;
&lt;li&gt;여기서는 조건문에 대해 설명합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;무중단 배포에 필요한 요소들 사용방법&lt;/li&gt;
&lt;li&gt;주의사항&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;조건문&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A1%B0%EA%B1%B4%EB%AC%B8&quot; aria-label=&quot;조건문 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;조건문&lt;/h2&gt;
&lt;p&gt;테라폼이 제공하는 조건문은 아래와 같이 구성되어 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;count&lt;/code&gt; 매개변수를 이용하여 사용: 조건부 리소스에서 사용&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;for_each&lt;/code&gt; 와 &lt;code class=&quot;language-text&quot;&gt;for&lt;/code&gt; 표현식: 리소스 내의 조건부 리소스, 인라인 블록에 사용&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;if&lt;/code&gt; 문자열 지시자: 문자열 내의 조건문에 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;count-매개변수&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#count-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98&quot; aria-label=&quot;count 매개변수 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code class=&quot;language-text&quot;&gt;count&lt;/code&gt; 매개변수&lt;/h3&gt;
&lt;p&gt;앞서 살펴보았듯, &lt;code class=&quot;language-text&quot;&gt;count&lt;/code&gt; 매개변수를 사용하면 반복문을 사용할 수 있습니다. 이를 응용하여 조건문 작업 또한 수행할 수 있습니다.&lt;/p&gt;
&lt;h4 id=&quot;count-매개변수를-사용한-if-구문&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#count-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C-if-%EA%B5%AC%EB%AC%B8&quot; aria-label=&quot;count 매개변수를 사용한 if 구문 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code class=&quot;language-text&quot;&gt;count&lt;/code&gt; 매개변수를 사용한 &lt;code class=&quot;language-text&quot;&gt;if&lt;/code&gt; 구문&lt;/h4&gt;
&lt;p&gt;일부 사용자들에게는 모듈을 생성하고, 나머지 사용자에게는 생성해주지 않기 위해선 &lt;strong&gt;분기 처리&lt;/strong&gt;를 수행합니다.&lt;/p&gt;
&lt;p&gt;이를 위해서는 Boolean 입력 변수를 변수값으로 추가해주고, 아래와같은 조건 표현식(conditional expression)을 추가합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;terraform&quot;&gt;&lt;pre class=&quot;language-terraform&quot;&gt;&lt;code class=&quot;language-terraform&quot;&gt;variable &amp;quot;enable_autoscaling&amp;quot; {
  description = &amp;quot;If set to true, enable auto scaling&amp;quot;
  type        = bool
}

&amp;lt;CONDITION&amp;gt; ? &amp;lt;TRUE_VAL&amp;gt; : &amp;lt;FALSE_VAL&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;CONDITION&lt;/code&gt;: boolean 판단 조건을 기재합니다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;TRUE_VAL&lt;/code&gt;: 판단 조건이 참일 때의 결과값입니다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;FALSE_VAL&lt;/code&gt;: 판단 조건이 거짓일 때의 결과값입니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;상기 조건을 조합하면 아래값처럼 &lt;code class=&quot;language-text&quot;&gt;webserver-cluster&lt;/code&gt; 모듈을 업데이트 할 수 있지요.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;terraform&quot;&gt;&lt;pre class=&quot;language-terraform&quot;&gt;&lt;code class=&quot;language-terraform&quot;&gt;resource &amp;quot;aws_autoscaling_schedule&amp;quot; &amp;quot;scale_out_during_business_hours&amp;quot; {
  # enable_autoscaling 값이 참/거짓일 때에 따라 auto scaling을 허용/불허할 수 있습니다.
  count = var.enable_autoscaling ? 1 : 0

  scheduled_action_name  = &amp;quot;${var.cluster_name}-scale-out-during-business-hours&amp;quot;
  min_size               = 2
  max_size               = 10
  desired_capacity       = 10
  recurrence             = &amp;quot;0 9 * * *&amp;quot; # 이 값은 cron 양식을 따릅니다!
  autoscaling_group_name = aws_autoscaling_group.example.name
}

resource &amp;quot;aws_autoscaling_schedule&amp;quot; &amp;quot;scale_in_at_night&amp;quot; {
  count = var.enable_autoscaling ? 1 : 0

  scheduled_action_name  = &amp;quot;${var.cluster_name}-scale-in-at-night&amp;quot;
  min_size               = 2
  max_size               = 10
  desired_capacity       = 2
  recurrence             = &amp;quot;0 17 * * *&amp;quot;
  autoscaling_group_name = aws_autoscaling_group.example.name
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이러한 조건을 staging 서버에서는 &lt;code class=&quot;language-text&quot;&gt;false&lt;/code&gt;로, production 서버에서는 &lt;code class=&quot;language-text&quot;&gt;true&lt;/code&gt; 로 두기 위해선 아래와 같이 사용하면 됩니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;staging 서버의 &lt;code class=&quot;language-text&quot;&gt;main.tf&lt;/code&gt; 파일에서는?&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;terraform&quot;&gt;&lt;pre class=&quot;language-terraform&quot;&gt;&lt;code class=&quot;language-terraform&quot;&gt;module &amp;quot;webserver_cluster&amp;quot; {
  source = &amp;quot;../../../../modules/services/webserver-cluster&amp;quot;

  cluster_name           = &amp;quot;webservers-stage&amp;quot;
  db_remote_state_bucket = &amp;quot;(YOUR_BUCKET_NAME)&amp;quot;
  db_remote_state_key    = &amp;quot;stage/data-stores/mysql/terraform.tfstate&amp;quot;

  instance_type        = &amp;quot;t2.micro&amp;quot;
  min_size             = 2
  max_size             = 2
  # boolean 타입이므로, 해당 값을 지정해서, 설정이 구동되게 지정해줄 수 있습니다.
  enable_autoscaling   = false
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;production 서버의 &lt;code class=&quot;language-text&quot;&gt;main.tf&lt;/code&gt; 파일에서는?&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;terraform&quot;&gt;&lt;pre class=&quot;language-terraform&quot;&gt;&lt;code class=&quot;language-terraform&quot;&gt;module &amp;quot;webserver_cluster&amp;quot; {
  source = &amp;quot;../../../../modules/services/webserver-cluster&amp;quot;

  cluster_name           = &amp;quot;webservers-prod&amp;quot;
  db_remote_state_bucket = &amp;quot;(YOUR_BUCKET_NAME)&amp;quot;
  db_remote_state_key    = &amp;quot;prod/data-stores/mysql/terraform.tfstate&amp;quot;

  instance_type        = &amp;quot;m4.large&amp;quot;
  min_size             = 2
  max_size             = 10
  # boolean 타입이므로, 해당 값을 지정해서, 설정이 구동되게 지정해줄 수 있습니다.
  enable_autoscaling   = true

  custom_tags = {
    Owner     = &amp;quot;team-foo&amp;quot;
    ManagedBy = &amp;quot;terraform&amp;quot;
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;count-매개변수를-사용한-if-else-구문&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#count-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C-if-else-%EA%B5%AC%EB%AC%B8&quot; aria-label=&quot;count 매개변수를 사용한 if else 구문 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code class=&quot;language-text&quot;&gt;count&lt;/code&gt; 매개변수를 사용한 &lt;code class=&quot;language-text&quot;&gt;if-else&lt;/code&gt; 구문&lt;/h4&gt;
&lt;p&gt;특정 IAM 사용자에게 CloudWatch에 대한 액세스 권한을 부여하는 예시로 살펴보겠습니다. 이 파일은 별도의 정책관련 테라폼 파일로 만들면 되겠지요. (&lt;code class=&quot;language-text&quot;&gt;s3ich4n&lt;/code&gt;이란 유저에 대해 권한을 부여해보죠)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;읽기 권한만 부여하기 위한 예시값 (&lt;code class=&quot;language-text&quot;&gt;iam_read_only.tf&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;terraform&quot;&gt;&lt;pre class=&quot;language-terraform&quot;&gt;&lt;code class=&quot;language-terraform&quot;&gt;resource &amp;quot;aws_iam_policy&amp;quot; &amp;quot;cloudwatch_read_only&amp;quot; {
  name   = &amp;quot;cloudwatch-read-only&amp;quot;
  policy = data.aws_iam_policy_document.cloudwatch_read_only.json
}

data &amp;quot;aws_iam_policy_document&amp;quot; &amp;quot;cloudwatch_read_only&amp;quot; {
  statement {
    effect    = &amp;quot;Allow&amp;quot;
    # cloudwatch의 일부 기능들(read 파트)에 대해서만 권한을 허용하였습니다.
    actions   = [
      &amp;quot;cloudwatch:Describe*&amp;quot;,
      &amp;quot;cloudwatch:Get*&amp;quot;,
      &amp;quot;cloudwatch:List*&amp;quot;
    ]
    resources = [&amp;quot;*&amp;quot;]
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;읽기/쓰기 권한을 부여하기 위한 예시값(&lt;code class=&quot;language-text&quot;&gt;iam_rw.tf&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;terraform&quot;&gt;&lt;pre class=&quot;language-terraform&quot;&gt;&lt;code class=&quot;language-terraform&quot;&gt;resource &amp;quot;aws_iam_policy&amp;quot; &amp;quot;cloudwatch_full_access&amp;quot; {
  name   = &amp;quot;cloudwatch-full-access&amp;quot;
  policy = data.aws_iam_policy_document.cloudwatch_full_access.json
}

data &amp;quot;aws_iam_policy_document&amp;quot; &amp;quot;cloudwatch_full_access&amp;quot; {
  statement {
    effect    = &amp;quot;Allow&amp;quot;
    # cloudwatch의 전체 기능에 대해 권한을 허용하였습니다.
    actions   = [&amp;quot;cloudwatch:*&amp;quot;]
    resources = [&amp;quot;*&amp;quot;]
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;give_s3ich4n_cloudwatch_full_access&lt;/code&gt; 이라는 변수값에 기반하여, 리소스를 어떻게 적용할지 살펴봅시다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;terraform&quot;&gt;&lt;pre class=&quot;language-terraform&quot;&gt;&lt;code class=&quot;language-terraform&quot;&gt;variable &amp;quot;give_s3ich4n_cloudwatch_full_access&amp;quot; {
  description = &amp;quot;If true, s3ich4n gets full access to CloudWatch&amp;quot;
  type        = bool
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;리소스 생성 시, 동작수행을 위해 &lt;code class=&quot;language-text&quot;&gt;count&lt;/code&gt; 매개변수와 조건 표현식을 모두 사용해봅시다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;terraform&quot;&gt;&lt;pre class=&quot;language-terraform&quot;&gt;&lt;code class=&quot;language-terraform&quot;&gt;resource &amp;quot;aws_iam_user_policy_attachment&amp;quot; &amp;quot;neo_cloudwatch_full_access&amp;quot; {
  count = var.give_neo_cloudwatch_full_access ? 1 : 0

  user       = aws_iam_user.example[0].name
  policy_arn = aws_iam_policy.cloudwatch_full_access.arn
}

resource &amp;quot;aws_iam_user_policy_attachment&amp;quot; &amp;quot;neo_cloudwatch_read_only&amp;quot; {
  count = var.give_neo_cloudwatch_full_access ? 0 : 1

  user       = aws_iam_user.example[0].name
  policy_arn = aws_iam_policy.cloudwatch_read_only.arn
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;위 코드에는 2개의 &lt;code class=&quot;language-text&quot;&gt;aws_iam_user_policy_attachment&lt;/code&gt; 리소스가 포함되어 있습니다.&lt;/li&gt;
&lt;li&gt;윗 부분은 전체 액세스 권한을 첨부하는 if절 이고, 아래는 읽기 전용 권한을 첨부하는 else 절입니다.&lt;/li&gt;
&lt;li&gt;위 접근 방식은 테라폼 코드가 if 나 else 절을 알필요가 없습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;for_each-와-for-표현식&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#for_each-%EC%99%80-for-%ED%91%9C%ED%98%84%EC%8B%9D&quot; aria-label=&quot;for_each 와 for 표현식 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code class=&quot;language-text&quot;&gt;for_each&lt;/code&gt; 와 &lt;code class=&quot;language-text&quot;&gt;for&lt;/code&gt; 표현식&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;for_each&lt;/code&gt; 표현식을 빈 컬렉션으로 전달하면, 0개의 리소스 또는 0개의 인라인 블록을 생성합니다. 비어있지 않은 컬렉션을 전달하면 하나 이상의 리소스 또는 인라인 블록을 만듭니다.&lt;/p&gt;
&lt;p&gt;이를 표현하기 위해서는 조건부로 어떻게 표현할까요? &lt;code class=&quot;language-text&quot;&gt;for_each&lt;/code&gt; 표현식과 &lt;code class=&quot;language-text&quot;&gt;for&lt;/code&gt; 표현식을 결합하여 사용할 수 있습니다. 예시값을 살펴보시지요.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;terraform&quot;&gt;&lt;pre class=&quot;language-terraform&quot;&gt;&lt;code class=&quot;language-terraform&quot;&gt;dynamic &amp;quot;tag&amp;quot; {
    for_each = {
    	for key, value in var.custom_tags:
    	key =&amp;gt; upper(value)
    	if key != &amp;quot;Name&amp;quot;
    }

    content {
    	key                 = tag.key
    	value               = tag.value
    	propagate_at_launch = true
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;중첩된 &lt;code class=&quot;language-text&quot;&gt;for&lt;/code&gt; 표현식은 일관성을 위해 &lt;code class=&quot;language-text&quot;&gt;var.custom_tags&lt;/code&gt; 를 반복하며 각 값을 대문자로 변환하고 모듈이 이미 자체 &lt;code class=&quot;language-text&quot;&gt;Name&lt;/code&gt; 태그를 설정했으므로, &lt;code class=&quot;language-text&quot;&gt;for&lt;/code&gt; 표현식의 조건을 사용하여 &lt;code class=&quot;language-text&quot;&gt;key&lt;/code&gt; 집합을 &lt;code class=&quot;language-text&quot;&gt;Name&lt;/code&gt; 으로 필터링합니다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;for&lt;/code&gt; 표현식에서 값을 필터링하여 임의 조건부 논리를 구현할 수 있습니다.&lt;/li&gt;
&lt;li&gt;리소스의 복사본을 여러 개 만들 때는 count 보다 for_each 를 사용하는 것이 더 낫지만,
&lt;ul&gt;
&lt;li&gt;조건 논리의 경우 비어 있지 않은 컬렉션에 for_each 를 설정하는 것보다 count 를 &lt;code class=&quot;language-text&quot;&gt;0&lt;/code&gt; 또는 &lt;code class=&quot;language-text&quot;&gt;1&lt;/code&gt;로 설정하는 것이 간단합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;즉, &lt;strong&gt;리소스를 조건부로 생성&lt;/strong&gt;할 때는 &lt;strong&gt;count&lt;/strong&gt; 를 사용할 수 있지만, &lt;strong&gt;그 외 모든 유형의 반복문 또는 조건문&lt;/strong&gt;에는 &lt;strong&gt;for_each&lt;/strong&gt; 를 사용합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;if-문자열-지시자&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#if-%EB%AC%B8%EC%9E%90%EC%97%B4-%EC%A7%80%EC%8B%9C%EC%9E%90&quot; aria-label=&quot;if 문자열 지시자 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code class=&quot;language-text&quot;&gt;if&lt;/code&gt; 문자열 지시자&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;if&lt;/code&gt; 문자열 지시자를 살펴봅시다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;terraform&quot;&gt;&lt;pre class=&quot;language-terraform&quot;&gt;&lt;code class=&quot;language-terraform&quot;&gt;# if 구문의 사용방법 입니다.
%{if &amp;lt;CONDITION&amp;gt; }&amp;lt;TRUEVAL&amp;gt;%{endif}

# if-else 구문의 사용방법입니다.
%{ for &amp;lt;INDEX&amp;gt;, &amp;lt;ITEM&amp;gt; in &amp;lt;COLLECTION&amp;gt; }&amp;lt;BODY&amp;gt;%{if &amp;lt;EXPRESSION&amp;gt;}%{ else }&amp;lt;FALSEVAL&amp;gt;%{ endif }%{ endfor }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;COLLECTION: 반복할 리스트, 맵. 말 그대로 반복 가능한 컬렉션을 의미합니다.&lt;/li&gt;
&lt;li&gt;INDEX: 이터레이션 시의 인덱스값을 표현합니다.&lt;/li&gt;
&lt;li&gt;ITEM: 각 항목에 할당할 로컬 변수의 이름입니다.&lt;/li&gt;
&lt;li&gt;BODY: ITEM을 참조할 수 있는 각각의 반복을 렌더링하는 대상입니다.&lt;/li&gt;
&lt;li&gt;EXPRESSION: 참/거짓을 판별하는 조건입니다.&lt;/li&gt;
&lt;li&gt;TRUEVAL: 참일 때 반복문을 통해 추가할 값입니다.&lt;/li&gt;
&lt;li&gt;FALSEVAL: 거짓일 때 반복문을 통해 추가할 값입니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/brikis98/terraform-up-and-running-code/blob/master/code/terraform/05-tips-and-tricks/loops-and-if-statements/live/global/string-directives/main.tf&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;예시&lt;/a&gt;를 보면서 함께 살펴봅시다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;terraform&quot;&gt;&lt;pre class=&quot;language-terraform&quot;&gt;&lt;code class=&quot;language-terraform&quot;&gt;variable &amp;quot;names&amp;quot; {
  description = &amp;quot;A list of names&amp;quot;
  type        = list(string)
  default     = [&amp;quot;alice&amp;quot;, &amp;quot;bob&amp;quot;, &amp;quot;charlie&amp;quot;]
}

# if 구문을 사용하는 방법입니다.
output &amp;quot;for_directive_index_if&amp;quot; {
  value = &amp;lt;&amp;lt;EOF
%{ for i, name in var.names }
  ${name}%{ if i &amp;lt; length(var.names) - 1 }, %{ endif }
%{ endfor }
EOF
}

# 마지막 `,` 문자에 대해 strip을 할 수도 있습니다.
output &amp;quot;for_directive_index_if_strip&amp;quot; {
  value = &amp;lt;&amp;lt;EOF
%{~ for i, name in var.names ~}
${name}%{ if i &amp;lt; length(var.names) - 1 }, %{ endif }
%{~ endfor ~}
EOF
}

# 마지막 `,` 문자에 대해 strip을 할 수도 있습니다.
output &amp;quot;for_directive_index_if_else_strip&amp;quot; {
  value = &amp;lt;&amp;lt;EOF
%{~ for i, name in var.names ~}
${name}%{ if i &amp;lt; length(var.names) - 1 }, %{ else }.%{ endif }
%{~ endfor ~}
EOF
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;terraform init &amp;amp;&amp;amp; terraform apply&lt;/code&gt;를 수행하면 아래와 같은 결과값을 보실 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ terraform init &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; terraform apply

&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;생략&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

Apply complete&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; Resources: &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; added, &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; changed, &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; destroyed.

Outputs:

for_directive_index_if &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;EOT

  alice,

  bob,

  charlie


EOT&lt;/span&gt;
for_directive_index_if_else_strip &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;alice, bob, charlie.&quot;&lt;/span&gt;
for_directive_index_if_strip &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;alice, bob, charlie&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;lessons-learned&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#lessons-learned&quot; aria-label=&quot;lessons learned permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Lessons Learned&lt;/h1&gt;
&lt;p&gt;제 5장에서는 아래의 내용을 반드시 기억하셨으면 좋겠습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;(중요!) Prerequisite를 반드시 읽어주세요. 테라폼의 타입과 값에 대한 내용은 알고있어야 앞으로의 진행이 수월할 것입니다!&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;프로그래밍 언어처럼 다루려면, 어떤 타입과 값을 사용할 수 있는지는 기본적으로 알아야 하기 때문입니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;조건문의 사용방법과 주의사항에 대해 배웠습니다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이것으로 제 5장, 조건문 설명을 마칩니다. 긴 글 읽어주셔서 감사합니다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[[CloudNet@] 테라폼 스터디 5주차 - Terraform의 반복문과 조건문 (1) - 반복문]]></title><description><![CDATA[Terraform의 타입과 값이 어떻게 쓰이는지 알고있다는 가정 하에, 반복문과 조건문을 사용하여 로직을 표현하는 방법을 담았습니다. 그 중, 반복문을 먼저 살펴봅시다.]]></description><link>https://blog.s3ich4n.me/devlog/terraform/2022-11-19-cloudneta-terraform-101-pt05-1</link><guid isPermaLink="false">https://blog.s3ich4n.me/devlog/terraform/2022-11-19-cloudneta-terraform-101-pt05-1</guid><pubDate>Wed, 16 Nov 2022 03:37:57 GMT</pubDate><content:encoded>&lt;p&gt;이 내용은 CloudNet@ 에서 진행하는 테라폼 기초 입문 스터디에 대한 연재글입니다.&lt;/p&gt;
&lt;p&gt;스터디에서 사용하는 교재는 &lt;a href=&quot;http://www.yes24.com/Product/Goods/101511312&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Terraform Up &amp;#x26; Running 2nd Edition&lt;/a&gt; 입니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;prerequisites&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#prerequisites&quot; aria-label=&quot;prerequisites permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Prerequisites&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.hashicorp.com/terraform/language/expressions/types&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Terraform: Types and Values&lt;/a&gt; 공식문서
&lt;ul&gt;
&lt;li&gt;타입과 값에는 어떤 것들이 사용될 수 있는지 확인해봅시다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;count&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;for_each&lt;/code&gt; 는 &lt;code class=&quot;language-text&quot;&gt;resource&lt;/code&gt; 내에서 사용될 수 있습니다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;for&lt;/code&gt; 표현식은 복잡한 타입을 또다른 복잡한 타입으로 변환하는데 쓰입니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;아래에서 5주차 스터디 내용을 공유합니다.&lt;/p&gt;
&lt;p&gt;교재의 5장 내용을 다루고 있습니다.&lt;/p&gt;
&lt;h1 id=&quot;본문&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B3%B8%EB%AC%B8&quot; aria-label=&quot;본문 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;본문&lt;/h1&gt;
&lt;p&gt;테라폼을 통해 마치 프로그램을 작성하듯 코드를 작성할 수 있습니다. 이번 챕터에서는 아래의 내용을 학습할 예정입니다:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;반복, 조건문 사용방법&lt;/li&gt;
&lt;li&gt;무중단 배포에 필요한 요소들 사용방법&lt;/li&gt;
&lt;li&gt;주의사항&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;반복문&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B0%98%EB%B3%B5%EB%AC%B8&quot; aria-label=&quot;반복문 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;반복문&lt;/h2&gt;
&lt;p&gt;테라폼이 제공하는 반복문 구성은 아래와 같습니다:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;count&lt;/code&gt; 구문&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;for_each&lt;/code&gt; 표현식&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;for&lt;/code&gt; 표현식&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;for&lt;/code&gt; 문자열 지시어&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;count-구문&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#count-%EA%B5%AC%EB%AC%B8&quot; aria-label=&quot;count 구문 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code class=&quot;language-text&quot;&gt;count&lt;/code&gt; 구문&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;count&lt;/code&gt; 구문을 사용한 반복에 대해 살펴봅시다.&lt;/p&gt;
&lt;h4 id=&quot;count-구문을-사용한-반복문-1&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#count-%EA%B5%AC%EB%AC%B8%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%9C-%EB%B0%98%EB%B3%B5%EB%AC%B8-1&quot; aria-label=&quot;count 구문을 사용한 반복문 1 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code class=&quot;language-text&quot;&gt;count&lt;/code&gt; 구문을 사용한 반복문 (1)&lt;/h4&gt;
&lt;p&gt;IAM 사용자를 3명 생성하는 예시로 살펴보겠습니다. 리소스는 &lt;a href=&quot;https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/iam_user&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;aws_iam_user&lt;/code&gt;&lt;/a&gt; 를 사용합니다. &lt;code class=&quot;language-text&quot;&gt;name&lt;/code&gt; 필드는 Required 입니다.&lt;/p&gt;
&lt;p&gt;전체 예시코드는 &lt;code class=&quot;language-text&quot;&gt;chapter05/example01/count/index&lt;/code&gt; 디렉토리를 살펴봐주세요.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;iam.tf&lt;/code&gt; 파일 전체&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;terraform&quot;&gt;&lt;pre class=&quot;language-terraform&quot;&gt;&lt;code class=&quot;language-terraform&quot;&gt;provider &amp;quot;aws&amp;quot; {
  region = &amp;quot;ap-northeast-2&amp;quot;
}

resource &amp;quot;aws_iam_user&amp;quot; &amp;quot;ch05-iam&amp;quot; {
  count = 3
  # 0부터 시작, 3번 반복합니다.
  name  = &amp;quot;s3ich4n.${count.index}&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;이 경우, 0부터 시작, 2까지 반복하는 인덱스 값을 추가합니다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;name&lt;/code&gt; 값에 인덱스를 사용하지 않는다면, 3명의 IAM 사용자 이름 &lt;strong&gt;중복&lt;/strong&gt;으로 오류가 발생합니다. 따라서, 반복문의 인덱스값을 사용하여 각 사용자에게 고유한 이름을 사용하도록 코드를 작성하였습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;예시를 구동해봅시다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;`$ terraform init

Initializing the backend&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.

Initializing provider plugins&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.
- Finding latest version of hashicorp/aws&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.
- Installed hashicorp/aws v4.39.0 &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;signed by HashiCorp&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

Terraform has created a lock &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; .terraform.lock.hcl to record the provider
selections it made above. Include this &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; your version control repository
so that Terraform can guarantee to &lt;span class=&quot;token function&quot;&gt;make&lt;/span&gt; the same selections by default when
you run &lt;span class=&quot;token string&quot;&gt;&quot;terraform init&quot;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; the future.

Terraform has been successfully initialized&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;중략&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

$ terraform apply

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  &lt;span class=&quot;token comment&quot;&gt;# aws_iam_user.ch05-iam[0] will be created&lt;/span&gt;
  + resource &lt;span class=&quot;token string&quot;&gt;&quot;aws_iam_user&quot;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;ch05-iam&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;생략&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      + name          &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;s3ich4n.0&quot;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;# aws_iam_user.ch05-iam[1] will be created&lt;/span&gt;
  + resource &lt;span class=&quot;token string&quot;&gt;&quot;aws_iam_user&quot;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;ch05-iam&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;생략&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      + name          &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;s3ich4n.1&quot;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;# aws_iam_user.ch05-iam[2] will be created&lt;/span&gt;
  + resource &lt;span class=&quot;token string&quot;&gt;&quot;aws_iam_user&quot;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;ch05-iam&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;생략&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      + name          &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;s3ich4n.2&quot;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

Plan: &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; to add, &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; to change, &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only &lt;span class=&quot;token string&quot;&gt;&apos;yes&apos;&lt;/span&gt; will be accepted to approve.

  Enter a value: &lt;span class=&quot;token function&quot;&gt;yes&lt;/span&gt;

aws_iam_user.ch05-iam&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: Creating&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.
aws_iam_user.ch05-iam&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: Creating&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.
aws_iam_user.ch05-iam&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: Creating&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.
aws_iam_user.ch05-iam&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: Creation complete after 1s &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;id&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;s3ich4n.1&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
aws_iam_user.ch05-iam&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: Creation complete after 1s &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;id&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;s3ich4n.2&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
aws_iam_user.ch05-iam&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: Creation complete after 1s &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;id&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;s3ich4n.0&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;

Apply complete&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; Resources: &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; added, &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; changed, &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; destroyed.

&lt;span class=&quot;token comment&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# 반복문 구동을 확인했습니다. 삭제합시다.&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;#&lt;/span&gt;
$ terraform destroy -auto-approve

aws_iam_user.ch05-iam&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: Refreshing state&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;. &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;id&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;s3ich4n.2&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
aws_iam_user.ch05-iam&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: Refreshing state&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;. &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;id&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;s3ich4n.0&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
aws_iam_user.ch05-iam&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: Refreshing state&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;. &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;id&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;s3ich4n.1&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  - destroy

Terraform will perform the following actions:

  &lt;span class=&quot;token comment&quot;&gt;# aws_iam_user.ch05-iam[0] will be destroyed&lt;/span&gt;
  - resource &lt;span class=&quot;token string&quot;&gt;&quot;aws_iam_user&quot;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;ch05-iam&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;생략&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;# aws_iam_user.ch05-iam[1] will be destroyed&lt;/span&gt;
  - resource &lt;span class=&quot;token string&quot;&gt;&quot;aws_iam_user&quot;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;ch05-iam&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;생략&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;# aws_iam_user.ch05-iam[2] will be destroyed&lt;/span&gt;
  - resource &lt;span class=&quot;token string&quot;&gt;&quot;aws_iam_user&quot;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;ch05-iam&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;생략&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

Plan: &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; to add, &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; to change, &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; to destroy.
aws_iam_user.ch05-iam&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: Destroying&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;. &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;id&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;s3ich4n.2&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
aws_iam_user.ch05-iam&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: Destroying&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;. &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;id&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;s3ich4n.0&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
aws_iam_user.ch05-iam&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: Destroying&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;. &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;id&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;s3ich4n.1&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
aws_iam_user.ch05-iam&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: Destruction complete after 1s
aws_iam_user.ch05-iam&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: Destruction complete after 1s
aws_iam_user.ch05-iam&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: Destruction complete after 1s

Destroy complete&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; Resources: &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; destroyed.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;0부터 2까지 반복되어 유저 이름에 값이 붙은 것을 확인할 수 있습니다.&lt;/p&gt;
&lt;h4 id=&quot;count-구문을-사용한-반복문-2&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#count-%EA%B5%AC%EB%AC%B8%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%9C-%EB%B0%98%EB%B3%B5%EB%AC%B8-2&quot; aria-label=&quot;count 구문을 사용한 반복문 2 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code class=&quot;language-text&quot;&gt;count&lt;/code&gt; 구문을 사용한 반복문 (2)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;(스포) 위험한 코드입니다! 잘못쓰기 쉬우니, 아래 주의사항을 반드시 보세요!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;마찬가지로, IAM 사용자를 3명 생성하는 예시로 살펴보겠습니다. 리소스는 &lt;a href=&quot;https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/iam_user&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;aws_iam_user&lt;/code&gt;&lt;/a&gt; 를 사용합니다. &lt;code class=&quot;language-text&quot;&gt;name&lt;/code&gt; 필드는 Required 입니다.&lt;/p&gt;
&lt;p&gt;전체 예시코드는 &lt;code class=&quot;language-text&quot;&gt;chapter05/example01/count/list_and_default&lt;/code&gt; 디렉토리를 살펴봐주세요.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;variables.tf&lt;/code&gt; 파일&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;terraform&quot;&gt;&lt;pre class=&quot;language-terraform&quot;&gt;&lt;code class=&quot;language-terraform&quot;&gt;variable &amp;quot;user_names&amp;quot; {
  description = &amp;quot;Create IAM users with these names&amp;quot;
  # 문자열을 담는 &amp;quot;리스트&amp;quot; 타입입니다.
  type        = list(string)
  default     = [&amp;quot;alice&amp;quot;, &amp;quot;bob&amp;quot;, &amp;quot;charlie&amp;quot;]
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;iam.tf&lt;/code&gt; 파일&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;terraform&quot;&gt;&lt;pre class=&quot;language-terraform&quot;&gt;&lt;code class=&quot;language-terraform&quot;&gt;provider &amp;quot;aws&amp;quot; {
  region = &amp;quot;ap-northeast-2&amp;quot;
}

resource &amp;quot;aws_iam_user&amp;quot; &amp;quot;ch05-ex01-count&amp;quot; {
  # 이런 식으로, user_names내 리스트 값의 길이를 알 수 있지요.
  count = length(var.user_names)
  name  = var.user_names[count.index]
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;outputs.tf&lt;/code&gt; 파일&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;terraform&quot;&gt;&lt;pre class=&quot;language-terraform&quot;&gt;&lt;code class=&quot;language-terraform&quot;&gt;output &amp;quot;first_arn&amp;quot; {
  # 첫번째 값을 가져옵니다.
  value       = aws_iam_user.ch05-ex01-count[0].arn
  description = &amp;quot;The ARN for the first user&amp;quot;
}

output &amp;quot;all_arns&amp;quot; {
  # 전체 값을 가져오는건 이렇게 사용합니다.
  value       = aws_iam_user.ch05-ex01-count[*].arn
  description = &amp;quot;The ARNs for all users&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;어떤 코드인지 개념을 살펴봅시다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;테라폼에서는 &lt;code class=&quot;language-text&quot;&gt;count&lt;/code&gt; 와 함께 배열 조회 구문과 &lt;a href=&quot;https://developer.hashicorp.com/terraform/language/functions/length&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;length&lt;/code&gt; 함수&lt;/a&gt; 를 사용해서 반복을 할 수 있습니다.
&lt;ul&gt;
&lt;li&gt;배열 조회 구문
&lt;ul&gt;
&lt;li&gt;ARRAY[&lt;INDEX&gt;]&lt;/li&gt;
&lt;li&gt;E.g., var.user_names 의 인덱스 &lt;code class=&quot;language-text&quot;&gt;0&lt;/code&gt;에서 요소를 찾는 방법: &lt;code class=&quot;language-text&quot;&gt;ch05-ex01-count[0]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;전체 값을 가져오는 방법: &lt;code class=&quot;language-text&quot;&gt;ch05-ex01-count[*]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;length (내장) 함수
&lt;ul&gt;
&lt;li&gt;length(&lt;ARRAY&gt;)&lt;/li&gt;
&lt;li&gt;주어진 ARRAY 의 항목 수를 반환하는 함수. 문자열 및 맵을 대상으로도 동작합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 예제를 스스로 &lt;code class=&quot;language-text&quot;&gt;terraform init &amp;amp;&amp;amp; terraform apply -auto-approve&lt;/code&gt; 해보시기 바랍니다.
(&lt;code class=&quot;language-text&quot;&gt;-auto-approve&lt;/code&gt; 플래그는, 자동으로 프로비저닝하라는 키워드입니다.)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ terraform init &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; terraform apply -auto-approve

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  &lt;span class=&quot;token comment&quot;&gt;# aws_iam_user.ch05-ex01-count[0] will be created&lt;/span&gt;
  + resource &lt;span class=&quot;token string&quot;&gt;&quot;aws_iam_user&quot;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;ch05-ex01-count&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;생략&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      + name          &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;alice&quot;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;생략&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;# aws_iam_user.ch05-ex01-count[1] will be created&lt;/span&gt;
  + resource &lt;span class=&quot;token string&quot;&gt;&quot;aws_iam_user&quot;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;ch05-ex01-count&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;생략&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      + name          &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;bob&quot;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;생략&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;# aws_iam_user.ch05-ex01-count[2] will be created&lt;/span&gt;
  + resource &lt;span class=&quot;token string&quot;&gt;&quot;aws_iam_user&quot;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;ch05-ex01-count&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;생략&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      + name          &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;charlie&quot;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;생략&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

Plan: &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; to add, &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; to change, &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; to destroy.

&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;생략&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

Apply complete&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; Resources: &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; added, &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; changed, &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; destroyed.

Outputs:

all_arns &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;arn:aws:iam::240962124292:user/alice&quot;&lt;/span&gt;,
  &lt;span class=&quot;token string&quot;&gt;&quot;arn:aws:iam::240962124292:user/bob&quot;&lt;/span&gt;,
  &lt;span class=&quot;token string&quot;&gt;&quot;arn:aws:iam::240962124292:user/charlie&quot;&lt;/span&gt;,
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
first_arn &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;arn:aws:iam::240962124292:user/alice&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;count-를-사용한-반복문의-제약사항&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#count-%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C-%EB%B0%98%EB%B3%B5%EB%AC%B8%EC%9D%98-%EC%A0%9C%EC%95%BD%EC%82%AC%ED%95%AD&quot; aria-label=&quot;count 를 사용한 반복문의 제약사항 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code class=&quot;language-text&quot;&gt;count&lt;/code&gt; 를 사용한 반복문의 제약사항&lt;/h4&gt;
&lt;p&gt;위의 예제를 통해 계정을 만들고, 아래의 예시를 통해 제약사항을 살펴봅시다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;전체 리소스를 반복할 수는 있지만 리소스 내에서 인라인 블록을 반복할 수는 없습니다. 아래 예시로 살펴봅시다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;terraform&quot;&gt;&lt;pre class=&quot;language-terraform&quot;&gt;&lt;code class=&quot;language-terraform&quot;&gt;resource &amp;quot;aws_autoscaling_group&amp;quot; &amp;quot;example&amp;quot; {
  launch_configuration = aws_launch_configuration.example.name
  vpc_zone_identifier  = data.aws_subnets.default.ids
  target_group_arns    = [aws_lb_target_group.asg.arn]
  health_check_type    = &amp;quot;ELB&amp;quot;

  min_size = var.min_size
  max_size = var.max_size

  tag {
    key                 = &amp;quot;Name&amp;quot;
    value               = var.cluster_name
    propagate_at_launch = true
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;각각의 tag 를 사용하려면 &lt;code class=&quot;language-text&quot;&gt;key&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;value&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;propagate_at_launch&lt;/code&gt; 에 대한 값으로 새 인라인 블록을 만들어야 합니다.&lt;/li&gt;
&lt;li&gt;따라서 &lt;code class=&quot;language-text&quot;&gt;count&lt;/code&gt; 구문을 사용해서 이러한 태그를 반복하여 동적인 인라인 &lt;code class=&quot;language-text&quot;&gt;tag&lt;/code&gt; 블록을 생성하려고 시도할 수도 있지만, 인라인 블록 내에서는 count 사용은 지원하지 않습니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;코드 재사용시 &lt;strong&gt;치명적인&lt;/strong&gt; 문제가 있습니다. 아래 예시로 살펴봅시다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;variables.tf&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;terraform&quot;&gt;&lt;pre class=&quot;language-terraform&quot;&gt;&lt;code class=&quot;language-terraform&quot;&gt;variable &amp;quot;user_names&amp;quot; {
  description = &amp;quot;Create IAM users with these names&amp;quot;
  type        = list(string)
  default     = [&amp;quot;alice&amp;quot;, &amp;quot;charlie&amp;quot;]
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;배열의 중간에 항목을 제거하면 모든 항목이 1칸씩 앞으로 당겨질 것입니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;테라폼은 인덱스 번호를 리소스 식별자로 봅니다. 따라서, ‘인덱스 1에서는 계정을 만들고, 인덱스2에서는 버킷을 삭제한다’라고 해석합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ terraform plan

aws_iam_user.ch05-ex01-count&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: Refreshing state&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;. &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;id&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;charlie&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
aws_iam_user.ch05-ex01-count&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: Refreshing state&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;. &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;id&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;bob&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
aws_iam_user.ch05-ex01-count&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: Refreshing state&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;. &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;id&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;alice&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;

Note: Objects have changed outside of Terraform

Terraform detected the following changes made outside of Terraform since the last &lt;span class=&quot;token string&quot;&gt;&quot;terraform apply&quot;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;which&lt;/span&gt; may have affected this plan:

  &lt;span class=&quot;token comment&quot;&gt;# aws_iam_user.ch05-ex01-count[0] has changed&lt;/span&gt;
  ~ resource &lt;span class=&quot;token string&quot;&gt;&quot;aws_iam_user&quot;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;ch05-ex01-count&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;id&lt;/span&gt;            &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;alice&quot;&lt;/span&gt;
        name          &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;alice&quot;&lt;/span&gt;
      + tags          &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;# (5 unchanged attributes hidden)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;# aws_iam_user.ch05-ex01-count[1] has changed&lt;/span&gt;
  ~ resource &lt;span class=&quot;token string&quot;&gt;&quot;aws_iam_user&quot;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;ch05-ex01-count&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;id&lt;/span&gt;            &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;bob&quot;&lt;/span&gt;
        name          &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;bob&quot;&lt;/span&gt;
      + tags          &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;# (5 unchanged attributes hidden)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;# aws_iam_user.ch05-ex01-count[2] has changed&lt;/span&gt;
  ~ resource &lt;span class=&quot;token string&quot;&gt;&quot;aws_iam_user&quot;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;ch05-ex01-count&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;id&lt;/span&gt;            &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;charlie&quot;&lt;/span&gt;
        name          &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;charlie&quot;&lt;/span&gt;
      + tags          &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;# (5 unchanged attributes hidden)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;plan 경고문은 생략. 현재 테라폼 코드로는 이런 식으로 프로비저닝 될 것이다 하는 내용이 써져있습니다.&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

Terraform will perform the following actions:

  &lt;span class=&quot;token comment&quot;&gt;# aws_iam_user.ch05-ex01-count[1] will be updated in-place&lt;/span&gt;
  ~ resource &lt;span class=&quot;token string&quot;&gt;&quot;aws_iam_user&quot;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;ch05-ex01-count&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;id&lt;/span&gt;            &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;bob&quot;&lt;/span&gt;
      ~ name          &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;bob&quot;&lt;/span&gt; -&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;charlie&quot;&lt;/span&gt;
        tags          &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;# (5 unchanged attributes hidden)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;# aws_iam_user.ch05-ex01-count[2] will be destroyed&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;# (because index [2] is out of range for count)&lt;/span&gt;
  - resource &lt;span class=&quot;token string&quot;&gt;&quot;aws_iam_user&quot;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;ch05-ex01-count&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      - arn           &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;arn:aws:iam::240962124292:user/charlie&quot;&lt;/span&gt; -&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; null
      - force_destroy &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt; -&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; null
      - &lt;span class=&quot;token function&quot;&gt;id&lt;/span&gt;            &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;charlie&quot;&lt;/span&gt; -&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; null
      - name          &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;charlie&quot;&lt;/span&gt; -&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; null
      - path          &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/&quot;&lt;/span&gt; -&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; null
      - tags          &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; -&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; null
      - tags_all      &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; -&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; null
      - unique_id     &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;AIDATQGTWHICFTYJYIOOQ&quot;&lt;/span&gt; -&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; null
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

Plan: &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; to add, &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; to change, &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; to destroy.

Changes to Outputs:
  ~ all_arns &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;# (1 unchanged element hidden)&lt;/span&gt;
        &lt;span class=&quot;token string&quot;&gt;&quot;arn:aws:iam::240962124292:user/bob&quot;&lt;/span&gt;,
      - &lt;span class=&quot;token string&quot;&gt;&quot;arn:aws:iam::240962124292:user/charlie&quot;&lt;/span&gt;,
    &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;count&lt;/code&gt; 사용 시 목록 중간 항목을 제거하면 테라폼은 해당 항목 뒤에 있는 &lt;strong&gt;모든 리소스를 삭제&lt;/strong&gt;한 다음 해당 리소스를 처음부터 다시 만듭니다… 😱😱&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;for_each-표현식&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#for_each-%ED%91%9C%ED%98%84%EC%8B%9D&quot; aria-label=&quot;for_each 표현식 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code class=&quot;language-text&quot;&gt;for_each&lt;/code&gt; 표현식&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;for_each&lt;/code&gt; 표현식을 이용한 반복문을 사용해봅시다. 먼저 &lt;code class=&quot;language-text&quot;&gt;for_each&lt;/code&gt; 표현식에 대해 알아봅시다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;for_each&lt;/code&gt; 구문은 테라폼 문법에 정의된 &lt;code class=&quot;language-text&quot;&gt;meta-argument &lt;/code&gt; 입니다. 모듈, 모든 리소스 타입에 응용될 수 있습니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;list&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;set&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;map&lt;/code&gt;을 사용하여 전체 리소스의 복사본, 리소스 내 인라인 블록의 복사본, 모듈의 복사본을 만들 수 있습니다. 문법은 아래와 같습니다:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;terraform&quot;&gt;&lt;pre class=&quot;language-terraform&quot;&gt;&lt;code class=&quot;language-terraform&quot;&gt;resource &amp;quot;&amp;lt;PROVIDER&amp;gt;_&amp;lt;TYPE&amp;gt;&amp;quot; &amp;quot;&amp;lt;NAME&amp;gt;&amp;quot; {
  for_each = &amp;lt;COLLECTION&amp;gt;

  [CONFIG ...]
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;COLLECTION: 루프를 처리할 set, map 을 의미&lt;/li&gt;
&lt;li&gt;CONFIG: 리소스와 관련된 하나이상의 인수
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;each.key&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;each.value&lt;/code&gt; 로 키/밸류에 접근할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;for_each-표현식을-이용한-예시-1&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#for_each-%ED%91%9C%ED%98%84%EC%8B%9D%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%98%88%EC%8B%9C-1&quot; aria-label=&quot;for_each 표현식을 이용한 예시 1 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code class=&quot;language-text&quot;&gt;for_each&lt;/code&gt; 표현식을 이용한 예시 (1)&lt;/h4&gt;
&lt;p&gt;전체 예시코드는 &lt;code class=&quot;language-text&quot;&gt;chapter05/example01/for_each&lt;/code&gt; 디렉토리를 살펴봐주세요.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;iam.tf&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;terraform&quot;&gt;&lt;pre class=&quot;language-terraform&quot;&gt;&lt;code class=&quot;language-terraform&quot;&gt;provider &amp;quot;aws&amp;quot; {
  region = &amp;quot;ap-northeast-2&amp;quot;
}

resource &amp;quot;aws_iam_user&amp;quot; &amp;quot;ch05-foreach&amp;quot; {
  for_each = toset(var.user_names)
  name     = each.value
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;variables.tf&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;terraform&quot;&gt;&lt;pre class=&quot;language-terraform&quot;&gt;&lt;code class=&quot;language-terraform&quot;&gt;variable &amp;quot;user_names&amp;quot; {
  description = &amp;quot;Create IAM users with these names&amp;quot;
  type        = list(string)
  default     = [&amp;quot;alice&amp;quot;, &amp;quot;bob&amp;quot;, &amp;quot;charlie&amp;quot;]
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;outputs.tf&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;terraform&quot;&gt;&lt;pre class=&quot;language-terraform&quot;&gt;&lt;code class=&quot;language-terraform&quot;&gt;output &amp;quot;all_users&amp;quot; {
  value = aws_iam_user.ch05-foreach
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;terraform init &amp;amp;&amp;amp; terraform apply -auto-approve&lt;/code&gt; 를 통해, output에 나오는 &lt;code class=&quot;language-text&quot;&gt;for_each&lt;/code&gt; 는 어떤식인지 살펴봅시다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ terraform init

&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;생략&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

$ terraform apply -auto-approve

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  &lt;span class=&quot;token comment&quot;&gt;# aws_iam_user.ch05-foreach[&quot;alice&quot;] will be created&lt;/span&gt;
  + resource &lt;span class=&quot;token string&quot;&gt;&quot;aws_iam_user&quot;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;ch05-foreach&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;생략&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      + name          &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;alice&quot;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;생략&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;# aws_iam_user.ch05-foreach[&quot;bob&quot;] will be created&lt;/span&gt;
  + resource &lt;span class=&quot;token string&quot;&gt;&quot;aws_iam_user&quot;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;ch05-foreach&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;생략&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      + name          &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;bob&quot;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;생략&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;# aws_iam_user.ch05-foreach[&quot;charlie&quot;] will be created&lt;/span&gt;
  + resource &lt;span class=&quot;token string&quot;&gt;&quot;aws_iam_user&quot;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;ch05-foreach&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;생략&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      + name          &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;charlie&quot;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;생략&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

Plan: &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; to add, &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; to change, &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; to destroy.

Changes to Outputs:
  + all_users &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      + alice   &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;생략&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
          + name                 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;alice&quot;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;생략&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      + bob     &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;생략&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
          + name                 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;bob&quot;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;생략&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      + charlie &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;생략&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
          + name                 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;charlie&quot;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;생략&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;생략&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

Apply complete&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; Resources: &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; added, &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; changed, &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; destroyed.

Outputs:

all_users &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;alice&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;arn&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;arn:aws:iam::REDACTED:user/alice&quot;&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;force_destroy&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;id&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;alice&quot;&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;name&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;alice&quot;&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;path&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/&quot;&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;permissions_boundary&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; tostring&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;null&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;tags&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; tomap&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;null&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; /* of string */
    &lt;span class=&quot;token string&quot;&gt;&quot;tags_all&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; tomap&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;unique_id&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;REDACTED&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;bob&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;arn&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;arn:aws:iam::REDACTED:user/bob&quot;&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;force_destroy&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;id&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;bob&quot;&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;name&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;bob&quot;&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;path&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/&quot;&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;permissions_boundary&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; tostring&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;null&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;tags&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; tomap&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;null&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; /* of string */
    &lt;span class=&quot;token string&quot;&gt;&quot;tags_all&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; tomap&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;unique_id&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;REDACTED&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;charlie&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;arn&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;arn:aws:iam::REDACTED:user/charlie&quot;&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;force_destroy&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;id&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;charlie&quot;&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;name&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;charlie&quot;&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;path&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/&quot;&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;permissions_boundary&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; tostring&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;null&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;tags&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; tomap&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;null&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; /* of string */
    &lt;span class=&quot;token string&quot;&gt;&quot;tags_all&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; tomap&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;unique_id&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;REDACTED&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;all_users&lt;/code&gt; 출력 변수가 &lt;code class=&quot;language-text&quot;&gt;for_each&lt;/code&gt; 의 키, 즉 사용자 이름을 키로 가지며 값이 해당 리소스의 전체 출력인 맵을 포함합니다.&lt;/p&gt;
&lt;h4 id=&quot;for_each-표현식을-이용한-예시-2-인라인-블록&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#for_each-%ED%91%9C%ED%98%84%EC%8B%9D%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%98%88%EC%8B%9C-2-%EC%9D%B8%EB%9D%BC%EC%9D%B8-%EB%B8%94%EB%A1%9D&quot; aria-label=&quot;for_each 표현식을 이용한 예시 2 인라인 블록 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;for_each 표현식을 이용한 예시 (2): 인라인 블록&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.hashicorp.com/terraform/tutorials/configuration-language/for-each&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;해당 링크&lt;/a&gt;의 예시를 참조하였습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;for-표현식&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#for-%ED%91%9C%ED%98%84%EC%8B%9D&quot; aria-label=&quot;for 표현식 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code class=&quot;language-text&quot;&gt;for&lt;/code&gt; 표현식&lt;/h3&gt;
&lt;p&gt;복잡한 타입을 또다른 복잡한 타입으로 변환하는데 쓰입니다. &lt;code class=&quot;language-text&quot;&gt;for&lt;/code&gt; 표현식은 아래와 같이 사용합니다. (&lt;a href=&quot;https://developer.hashicorp.com/terraform/language/expressions/for&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;공식링크&lt;/a&gt;)&lt;/p&gt;
&lt;h4 id=&quot;for-표현식을-이용한-예시-1-컨테이너에-값을-추가하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#for-%ED%91%9C%ED%98%84%EC%8B%9D%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%98%88%EC%8B%9C-1-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88%EC%97%90-%EA%B0%92%EC%9D%84-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0&quot; aria-label=&quot;for 표현식을 이용한 예시 1 컨테이너에 값을 추가하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code class=&quot;language-text&quot;&gt;for&lt;/code&gt; 표현식을 이용한 예시 (1): 컨테이너에 값을 추가하기&lt;/h4&gt;
&lt;p&gt;list 내의 모든 이름을 대문자로 변환하는 예제를 통해 알아봅시다. 사용은 아래와 같이 할 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;terraform&quot;&gt;&lt;pre class=&quot;language-terraform&quot;&gt;&lt;code class=&quot;language-terraform&quot;&gt;# 결과를 list 형식으로 리턴합니다.
[for &amp;lt;ITEM&amp;gt; in &amp;lt;LIST&amp;gt; : &amp;lt;OUTPUT&amp;gt;]
[for &amp;lt;ITEM&amp;gt; in &amp;lt;LIST&amp;gt; : &amp;lt;OUTPUT&amp;gt; if &amp;lt;EXPRESSION&amp;gt;] # 조건문 절에서 다시 살펴봅시다!

# 결과를 map 형식으로 리턴합니다.
{for &amp;lt;ITEM&amp;gt; in &amp;lt;LIST&amp;gt; : &amp;lt;OUTPUT_KEY&amp;gt; =&amp;gt; &amp;lt;OUTPUT_VALUE&amp;gt;}
{for &amp;lt;ITEM&amp;gt; in &amp;lt;LIST&amp;gt; : &amp;lt;OUTPUT_KEY&amp;gt; =&amp;gt; &amp;lt;OUTPUT_VALUE&amp;gt; if &amp;lt;EXPRESSION&amp;gt;} # 조건문 절에서 다시 살펴봅시다!&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;LIST: 반복할 리스트&lt;/li&gt;
&lt;li&gt;ITEM: LIST의 각 항목에 할당할 변수의 이름&lt;/li&gt;
&lt;li&gt;OUTPUT: ITEM을 변환한 표현식&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;if&lt;/code&gt; 구문(optional): 조건(&lt;code class=&quot;language-text&quot;&gt;&amp;lt;EXPRESSION&gt;&lt;/code&gt;)에 맞으면 값을 추가&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;terraform&quot;&gt;&lt;pre class=&quot;language-terraform&quot;&gt;&lt;code class=&quot;language-terraform&quot;&gt;variable &amp;quot;names&amp;quot; {
  description = &amp;quot;A list of names&amp;quot;
  type        = list(string)
  default     = [&amp;quot;alice&amp;quot;, &amp;quot;bob&amp;quot;, &amp;quot;charlie&amp;quot;]
}

output &amp;quot;upper_names&amp;quot; {
  # names 안의 값에 대해 반복을 진행하며, 결과로는 upper(이름)의 값이 들어갑니다.
  value = [for name in var.names : upper(name)]
}

output &amp;quot;short_upper_names&amp;quot; {
  # 조건을 기재할 수도 있습니다.
  value = [for name in var.names : upper(name) if length(name) &amp;lt; 6]
}

variable &amp;quot;prize_level&amp;quot; {
  description = &amp;quot;map&amp;quot;
  type        = map(string)
  default     = {
    alice     = &amp;quot;#1&amp;quot;
    bob       = &amp;quot;#2&amp;quot;
    charlie   = &amp;quot;#3&amp;quot;
  }
}

output &amp;quot;prize_status&amp;quot; {
  # prize_status의 value는 키, 밸류 쌍을 꺼낸 문자열을 리턴할 수 있습니다.
  value = [for name, role in var.prize_level : &amp;quot;\${name} goes to \${role} prize&amp;quot;]
}

output &amp;quot;upper_prize_status&amp;quot; {
  # name, role에 해당하는 map을 리턴할 수도 있습니다.
  value = {for name, role in var.prize_level : upper(name) =&amp;gt; upper(role)}
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;for-표현식을-이용한-예시-2-문자열로-리턴하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#for-%ED%91%9C%ED%98%84%EC%8B%9D%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%98%88%EC%8B%9C-2-%EB%AC%B8%EC%9E%90%EC%97%B4%EB%A1%9C-%EB%A6%AC%ED%84%B4%ED%95%98%EA%B8%B0&quot; aria-label=&quot;for 표현식을 이용한 예시 2 문자열로 리턴하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code class=&quot;language-text&quot;&gt;for&lt;/code&gt; 표현식을 이용한 예시 (2): 문자열로 리턴하기&lt;/h4&gt;
&lt;p&gt;앞서서 문자열 내에서 테라폼 코드를 참조하는 보간법 예시는 사용해본 적이 있습니다. &lt;code class=&quot;language-text&quot;&gt;&quot;Hello, ${var.name}!&quot;&lt;/code&gt; 과 같은 방식으로요.&lt;/p&gt;
&lt;p&gt;문자열 지시자를 사용하면, 문자열 보간처럼 &lt;code class=&quot;language-text&quot;&gt;for&lt;/code&gt; 반복문, &lt;code class=&quot;language-text&quot;&gt;if&lt;/code&gt; 제어문에서도 사용할 수 있습니다. 어떻게 사용하는지 살펴봅시다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;terraform&quot;&gt;&lt;pre class=&quot;language-terraform&quot;&gt;&lt;code class=&quot;language-terraform&quot;&gt;# 반복문의 기본입니다.
%{ for &amp;lt;ITEM&amp;gt; in &amp;lt;COLLECTION&amp;gt; }&amp;lt;BODY&amp;gt;%{ endfor }

# 인덱스를 추가할 수도 있습니다.
%{ for &amp;lt;INDEX&amp;gt;, &amp;lt;ITEM&amp;gt; in &amp;lt;COLLECTION&amp;gt; }&amp;lt;BODY&amp;gt;%{ endfor }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;COLLECTION: 반복할 리스트, 맵. 말 그대로 반복 가능한 컬렉션을 의미합니다.&lt;/li&gt;
&lt;li&gt;ITEM: 각 항목에 할당할 로컬 변수의 이름입니다.&lt;/li&gt;
&lt;li&gt;BODY: ITEM을 참조할 수 있는 각각의 반복을 렌더링하는 대상입니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/brikis98/terraform-up-and-running-code/blob/master/code/terraform/05-tips-and-tricks/loops-and-if-statements/live/global/string-directives/main.tf&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;예시&lt;/a&gt;를 보면서 함께 살펴봅시다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;terraform&quot;&gt;&lt;pre class=&quot;language-terraform&quot;&gt;&lt;code class=&quot;language-terraform&quot;&gt;variable &amp;quot;names&amp;quot; {
  description = &amp;quot;A list of names&amp;quot;
  type        = list(string)
  default     = [&amp;quot;alice&amp;quot;, &amp;quot;bob&amp;quot;, &amp;quot;charlie&amp;quot;]
}

output &amp;quot;for_directive&amp;quot; {
  # 끝의 endfor directive가 붙는다는 점을 제외하면 쉽게 이해할 수 있을 듯 합니다.
  value = &amp;quot;%{ for name in var.names }${name}, %{ endfor }&amp;quot;
}

output &amp;quot;for_directive_index&amp;quot; {
  # 파이썬의 enumerate() 을 쓰듯 사용할 수도 있군요!
  value = &amp;quot;%{ for i, name in var.names }(${i}) ${name}, %{ endfor }&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;terraform init &amp;amp;&amp;amp; terraform apply&lt;/code&gt;를 수행하면 아래와 같은 결과값을 보실 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ terraform init &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; terraform apply

&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;생략&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

Apply complete&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; Resources: &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; added, &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; changed, &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; destroyed.

Outputs:

for_directive &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;alice, bob, charlie, &quot;&lt;/span&gt;
for_directive_index &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;(0) alice, (1) bob, (2) charlie, &quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;lessons-learned&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#lessons-learned&quot; aria-label=&quot;lessons learned permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Lessons Learned&lt;/h1&gt;
&lt;p&gt;제 5장에서는 아래의 내용을 반드시 기억하셨으면 좋겠습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;(중요!) Prerequisite에서, 테라폼의 타입과 값에 대한 내용은 이미 알고있어야 하는 주요한 내용이라고 봅니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;프로그래밍 언어처럼 다루려면, 어떤 타입과 값을 사용할 수 있는지는 기본적으로 알아야 하기 때문입니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;반복문의 사용방법과 주의사항에 대해 배웠습니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;조건문의 사용방법과 주의사항에 대해 배웠습니다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이것으로 제 5장, 반복문 설명을 마칩니다. 긴 글 읽어주셔서 감사합니다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[[CloudNet@] 테라폼 스터디 4주차 - Terraform의 module에 대하여]]></title><description><![CDATA[Terraform의 module 에 대한 소개와, 어떻게 활용하는지, 그리고 주의사항과 모듈 버전관리에 대한 내용을 담았습니다.]]></description><link>https://blog.s3ich4n.me/devlog/terraform/2022-11-10-cloudneta-terraform-101-pt04</link><guid isPermaLink="false">https://blog.s3ich4n.me/devlog/terraform/2022-11-10-cloudneta-terraform-101-pt04</guid><pubDate>Thu, 10 Nov 2022 04:11:57 GMT</pubDate><content:encoded>&lt;p&gt;이 내용은 CloudNet@ 에서 진행하는 테라폼 기초 입문 스터디에 대한 연재글입니다.&lt;/p&gt;
&lt;p&gt;스터디에서 사용하는 교재는 &lt;a href=&quot;http://www.yes24.com/Product/Goods/101511312&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Terraform Up &amp;#x26; Running 2nd Edition&lt;/a&gt; 입니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;prerequisites&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#prerequisites&quot; aria-label=&quot;prerequisites permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Prerequisites&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;학습용 링크를 공유합니다.
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=yWhwZpzJ3no&amp;#x26;t=2504s&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;(당근페이) 박병진님 - 확장 가능한 테라폼 코드 관리를 위한 원칙&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;테라폼의-모듈에-대하여&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%85%8C%EB%9D%BC%ED%8F%BC%EC%9D%98-%EB%AA%A8%EB%93%88%EC%97%90-%EB%8C%80%ED%95%98%EC%97%AC&quot; aria-label=&quot;테라폼의 모듈에 대하여 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;테라폼의 모듈에 대하여&lt;/h1&gt;
&lt;p&gt;테라폼의 모듈이 등장하게 된 배경에 대해 살펴보고, 주의사항은 어떤 것이 있는지 알아봅시다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;모듈은, 둘 이상의 환경에서 코드 재사용, 여러 테라폼 리소스를 하나의 논리적 그룹으로 관리하기 위해 사용합니다.
&lt;ul&gt;
&lt;li&gt;E.g., 스테이징, 프로덕션 환경에서 공통적으로 사용되는 코드를 &lt;code class=&quot;language-text&quot;&gt;modules&lt;/code&gt; 같은 디렉토리에 빼고, 파일경로를 참조하여 사용하는 것이 바로 그 방안입니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;테라폼의 모듈은 아래와 같이 분류됩니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Root module&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;모든 Terraform 구성에는 기본 작업 디렉토리 의 파일에 정의된 리소스로 구성된 &lt;em&gt;루트 모듈&lt;/em&gt; 이라고 하는 하나 이상의 모듈 이 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Child module&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Terraform 모듈(일반적으로 구성의 루트 모듈)은 다른 모듈을 &lt;em&gt;호출&lt;/em&gt; 하여 해당 리소스를 구성에 포함할 수 있습니다. 다른 모듈에 의해 호출된 모듈을 종종 &lt;em&gt;자식 모듈이라고 합니다.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;자식 모듈은 동일한 구성 내에서 여러 번 호출할 수 있으며 여러 구성에서 동일한 자식 모듈을 사용할 수 있습니다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Published module&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;로컬 파일 시스템의 모듈 외에도 Terraform은 공개 또는 비공개 레지스트리에서 모듈을 로드할 수 있습니다. 이렇게 하면 다른 사람이 사용할 수 있도록 모듈을 게시하고 다른 사람이 게시한 모듈을 사용할 수 있습니다.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://registry.terraform.io/browse/modules&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Terraform Registry&lt;/a&gt;에서 가져오거나, Terraform Cloud, Terraform Enterprise 같은 서비스를 사용하여 참조할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;그렇다면 테라폼 모듈을 가져오는 소스는 어떤 것이 있을까요?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;로컬경로&lt;/li&gt;
&lt;li&gt;Terraform Registry&lt;/li&gt;
&lt;li&gt;GitHub&lt;/li&gt;
&lt;li&gt;Bitbucket&lt;/li&gt;
&lt;li&gt;GCS buckets, S3 buckets&lt;/li&gt;
&lt;li&gt;Terraform Registry
&lt;ul&gt;
&lt;li&gt;하시코프에서 공식적으로 운영하는 테라폼 프로바이더 및 모듈 저장소, 공개된 모듈을 쉽게 활용 가능합니다.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/terraform-aws-modules&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;[Github] terraform-aws-modules&lt;/a&gt; : 하시코프 ambassador 중 한 명인 Anton Babenko 가 리드, 가장 인기 있는 AWS 테라폼 모듈을 관리하는 Github 조직입니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;모듈-기본&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%AA%A8%EB%93%88-%EA%B8%B0%EB%B3%B8&quot; aria-label=&quot;모듈 기본 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;모듈 기본&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;폴더에 있는 모든 테라폼 구성파일은 모듈입니다.&lt;/li&gt;
&lt;li&gt;현재 작업 디렉토리의 모듈은 루트 모듈이라고 부릅니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;모듈을 사용하기 위한 구문은 아래와 같습니다:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;terraform&quot;&gt;&lt;pre class=&quot;language-terraform&quot;&gt;&lt;code class=&quot;language-terraform&quot;&gt;module &amp;quot;&amp;lt;NAME&amp;gt;&amp;quot; {
  source = &amp;quot;&amp;lt;SOURCE&amp;gt;&amp;quot;

  [CONFIG ...]
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;NAME&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;테라폼 코드 전체에서 참조하기 위해 사용하는 &lt;strong&gt;식별자&lt;/strong&gt;입니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SOURCE&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;modules/services/webserver-cluster&lt;/code&gt; 와 같은 모듈 코드를 찾을 수 있는 &lt;strong&gt;경로&lt;/strong&gt;입니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CONFIG&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;그 모듈과 관련된 특정한 하나 이상의 인수로 구성됩니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;모듈을 적용하거나 source 파라미터를 수정하는 경우 반드시 &lt;code class=&quot;language-text&quot;&gt;terrraform init&lt;/code&gt; 명령 실행이 필요합니다.&lt;/p&gt;
&lt;p&gt;다시말해 &lt;code class=&quot;language-text&quot;&gt;init&lt;/code&gt; 명령어 하나로 손쉽게 프로바이더와 모듈을 다운로드하고 백엔드를 구성할 수 있습니다.&lt;/p&gt;
&lt;h2 id=&quot;모듈의-입력값&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%AA%A8%EB%93%88%EC%9D%98-%EC%9E%85%EB%A0%A5%EA%B0%92&quot; aria-label=&quot;모듈의 입력값 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;모듈의 입력값&lt;/h2&gt;
&lt;h2 id=&quot;모듈과-지역변수&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%AA%A8%EB%93%88%EA%B3%BC-%EC%A7%80%EC%97%AD%EB%B3%80%EC%88%98&quot; aria-label=&quot;모듈과 지역변수 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;모듈과 지역변수&lt;/h2&gt;
&lt;h2 id=&quot;모듈과-출력&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%AA%A8%EB%93%88%EA%B3%BC-%EC%B6%9C%EB%A0%A5&quot; aria-label=&quot;모듈과 출력 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;모듈과 출력&lt;/h2&gt;
&lt;h2 id=&quot;모듈-사용-시-주의사항&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%AA%A8%EB%93%88-%EC%82%AC%EC%9A%A9-%EC%8B%9C-%EC%A3%BC%EC%9D%98%EC%82%AC%ED%95%AD&quot; aria-label=&quot;모듈 사용 시 주의사항 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;모듈 사용 시 주의사항&lt;/h2&gt;
&lt;p&gt;모듈을 사용할 때, 아래의 주의사항에 대해 참고해주세요.&lt;/p&gt;
&lt;h3 id=&quot;파일-경로-file-paths-인라인-블록-inline-blocks에-대하여&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%8C%8C%EC%9D%BC-%EA%B2%BD%EB%A1%9C-file-paths-%EC%9D%B8%EB%9D%BC%EC%9D%B8-%EB%B8%94%EB%A1%9D-inline-blocks%EC%97%90-%EB%8C%80%ED%95%98%EC%97%AC&quot; aria-label=&quot;파일 경로 file paths 인라인 블록 inline blocks에 대하여 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;파일 경로 File paths, 인라인 블록 Inline blocks에 대하여&lt;/h3&gt;
&lt;p&gt;파일 경로(File paths)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;루트 모듈에서 file 함수 사용은 가능하지만, 별도의 폴더에 정의된 모듈에서 file 함수를 사용하기 위해서 경로 참조 path reference 표현식이 필요합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;path.module&lt;/code&gt; : 표현식이 정의된 모듈의 파일 시스템 경로를 반환&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;path.root&lt;/code&gt; : 루트 모듈의 파일 시스템 경로를 반환&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;path.cwd&lt;/code&gt; : 현재 작업 중인 디렉터리의 파일 시스템 경로를 반환&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;사용자 데이터 스크립트의 경우 모듈 자체에 상대 경로가 필요하므로 &lt;code class=&quot;language-text&quot;&gt;modules/services/webserver-cluster/main.tf&lt;/code&gt; 의 &lt;code class=&quot;language-text&quot;&gt;templatefile&lt;/code&gt; 데이터소스에서 &lt;code class=&quot;language-text&quot;&gt;path.module&lt;/code&gt; 사용&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;인라인 블록(Inline blocks)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;일부 테라폼 리소스는 인라인 블록 또는 별도의 리소스(권장)로 정의 할 수 있습니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;다만 인라인 블록으로 규칙을 정의한 경우에는 코드가 작동하지 &lt;strong&gt;않습니다!&lt;/strong&gt;. 아래와 같은 유사한 리소스를 사용하면 그런 문제가 발생할 수 있습니다:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;aws_security_group&lt;/code&gt; 과 &lt;code class=&quot;language-text&quot;&gt;aws_security_group_rule&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;aws_route_table&lt;/code&gt; 과 &lt;code class=&quot;language-text&quot;&gt;aws_route&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;aws_network_acl&lt;/code&gt; 과 &lt;code class=&quot;language-text&quot;&gt;aws_network_acl_rule&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;등등…&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(스터디 중 논의) 이런 값들은 일일이 코드로 작성하는 편이 좀 더 변화에 유연하다고 하는 지적이 있었습니다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;모듈-버전관리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%AA%A8%EB%93%88-%EB%B2%84%EC%A0%84%EA%B4%80%EB%A6%AC&quot; aria-label=&quot;모듈 버전관리 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;모듈 버전관리&lt;/h2&gt;
&lt;p&gt;모듈에 대한 버전관리를 통해, 특정 환경(스테이징, 프로덕션 등)별로 보다 세부적인 관리를 진행하는 방안에 대해 소개합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;여러 Repository를 통해 관리하는 전략을 소개하고자 합니다.
&lt;ul&gt;
&lt;li&gt;테라폼 모듈로 분리하고자 하는 로직은 별도의 Git repository를 생성하고, Git의 tag 기능을 활용하여 버저닝을 수행합니다.&lt;/li&gt;
&lt;li&gt;인프라를 관리하는 Git Repository에서는 아래 방안을 사용합니다.
&lt;ul&gt;
&lt;li&gt;상기 테라폼 모듈 로직에 대해 submodule로 추가하고, 스테이징/프로덕션에 대하여 tag에 기재한 버전을 사용합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;lessons-learned&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#lessons-learned&quot; aria-label=&quot;lessons learned permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Lessons Learned&lt;/h1&gt;
&lt;p&gt;제 4장에서는 아래의 내용을 반드시 기억하셨으면 좋겠습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;테라폼의 모듈 사용으로 인해, 코드 재사용과 여러 테라폼 리소스에 대한 논리적 관리를 꾀할 수 있습니다.&lt;/li&gt;
&lt;li&gt;모듈 사용법을 읽고, 반복되는 내용을 어떻게 효과적으로 제어하는지 알아볼 수 있습니다.&lt;/li&gt;
&lt;li&gt;특히 주요 주의사항과 모듈 버전관리 전략에 대해 읽고, 모듈 사용시 의도치 않은 실수를 하지 않도록 대비할 수 있습니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이것으로 제 4장을 마칩니다. 긴 글 읽어주셔서 감사합니다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[[CloudNet@] 테라폼 스터디 3주차 - Terraform 상태 격리방안]]></title><description><![CDATA[Terraform 의 상태값에 대한 격리 방안에 대한 내용을 담고있습니다. 아울러 속성값 참고와 내장 함수에 대한 설명을 함께 추가하였습니다.]]></description><link>https://blog.s3ich4n.me/devlog/terraform/2022-11-03-cloudneta-terraform-101-pt03</link><guid isPermaLink="false">https://blog.s3ich4n.me/devlog/terraform/2022-11-03-cloudneta-terraform-101-pt03</guid><pubDate>Thu, 03 Nov 2022 21:09:10 GMT</pubDate><content:encoded>&lt;p&gt;이 내용은 CloudNet@ 에서 진행하는 테라폼 기초 입문 스터디에 대한 연재글입니다.&lt;/p&gt;
&lt;p&gt;스터디에서 사용하는 교재는 Terraform Up &amp;#x26; Running 2nd Edition 입니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;prerequisites&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#prerequisites&quot; aria-label=&quot;prerequisites permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Prerequisites&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/ko_kr/AmazonS3/latest/userguide/Welcome.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;AWS S3&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;오브젝트를 버킷 단위로 저장하는 클라우드 스토리지&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AWS DynamoDB
&lt;ul&gt;
&lt;li&gt;AWS에서 제공하는 NoSQL 데이터베이스 서버&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(스포!) 원격지에 테라폼의 “상태”를 기록하기 위해 사용합니다!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;아래에서 3주차 스터디 내용을 공유합니다.&lt;/p&gt;
&lt;p&gt;교재의 3장을 다룹니다.&lt;/p&gt;
&lt;h1 id=&quot;들어가며&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%93%A4%EC%96%B4%EA%B0%80%EB%A9%B0&quot; aria-label=&quot;들어가며 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;들어가며…&lt;/h1&gt;
&lt;p&gt;테라폼의 상태 관리에 대해 정리하고자 합니다. 왜 상태관리를 해야하는지, 어떤방안이 있으며 어떤식으로 작성하면 좋은지 작성합니다.&lt;/p&gt;
&lt;h2 id=&quot;테라폼-상태관리의-필요성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%85%8C%EB%9D%BC%ED%8F%BC-%EC%83%81%ED%83%9C%EA%B4%80%EB%A6%AC%EC%9D%98-%ED%95%84%EC%9A%94%EC%84%B1&quot; aria-label=&quot;테라폼 상태관리의 필요성 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;테라폼 상태관리의 필요성&lt;/h2&gt;
&lt;p&gt;테라폼은 기본적으로 생성한 인프라에 대한 정보를 상태파일에 기록합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;terraform.tfstate&lt;/code&gt; 파일로 기록됩니다.&lt;/li&gt;
&lt;li&gt;상태 파일은 프라이빗 API 임에 유의합니다!
&lt;ul&gt;
&lt;li&gt;배포할 때 마다 테라폼이 알아서 작성하는 파일입니다. &lt;strong&gt;임의로 건들여서는 안됩니다&lt;/strong&gt;!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;본격적으로 테라폼을 도입하고, 코드를 작성/배포하다 보면 자연스럽게 여러 사람들이 작업하겠지요. 그렇다면 자연스레 아래와 같은 요구사항이 발생할 수 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;상태파일 저장을 위한 &lt;em&gt;“공유 스토리지”&lt;/em&gt; 사용 필요&lt;/li&gt;
&lt;li&gt;상태파일 잠금(Locking)이 필요
&lt;ul&gt;
&lt;li&gt;한번에 한 명령만 실행; 경쟁 상태(&lt;em&gt;race condition&lt;/em&gt;) 방지 필요&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;상태파일을 격리가 필요
&lt;ul&gt;
&lt;li&gt;개발환경, 테스트환경, 스테이징 환경, 프로덕션 환경 등이 잘 분리되어있어야 함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;테라폼-상태-공유-방법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%85%8C%EB%9D%BC%ED%8F%BC-%EC%83%81%ED%83%9C-%EA%B3%B5%EC%9C%A0-%EB%B0%A9%EB%B2%95&quot; aria-label=&quot;테라폼 상태 공유 방법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;테라폼 상태 공유 방법&lt;/h2&gt;
&lt;p&gt;운영, 프로덕션 레벨에서 팀 단위로 인프라 구성 코드를 공유하는 방법은 여러가지가 있습니다.&lt;/p&gt;
&lt;h3 id=&quot;git-등의-vcs를-이용하면&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#git-%EB%93%B1%EC%9D%98-vcs%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EB%A9%B4&quot; aria-label=&quot;git 등의 vcs를 이용하면 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Git 등의 VCS를 이용하면?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;push/pull 시 실수로 파일을 빼먹거나 해서 문제가 발생할 수 있습니다.
&lt;ul&gt;
&lt;li&gt;버그를 잡은 코드가 다시 들어가거나&lt;/li&gt;
&lt;li&gt;그로인해 인프라가 복제되거나, 사라지거나… :scream:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;락을 걸 수 없음(&lt;code class=&quot;language-text&quot;&gt;terraform apply&lt;/code&gt; 에 대한 락을 의미)
&lt;ul&gt;
&lt;li&gt;한번 한 명령만 실행할 수 없습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;시크릿 파일 관리가 곤란함
&lt;ul&gt;
&lt;li&gt;테라폼의 모든 데이터는 평문으로 쓰임&lt;/li&gt;
&lt;li&gt;주요 기밀정보가 &lt;strong&gt;평문으로 기록&lt;/strong&gt;됩니다! :scream:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이런 문제를 해결하기 위해선, 원격 백엔드를 사용합니다. 1장에서 배운 “backend”의 저장공간을 원격 저장소로 설정하는 것을 의미합니다.&lt;/p&gt;
&lt;h3 id=&quot;테라폼의-원격-백엔드-를-사용하면&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%85%8C%EB%9D%BC%ED%8F%BC%EC%9D%98-%EC%9B%90%EA%B2%A9-%EB%B0%B1%EC%97%94%EB%93%9C-%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%A9%B4&quot; aria-label=&quot;테라폼의 원격 백엔드 를 사용하면 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;테라폼의 원격 백엔드 를 사용하면?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;.tfstate&lt;/code&gt; 파일을 원격지에 두고 관리할 수 있습니다.
&lt;ul&gt;
&lt;li&gt;AWS S3
&lt;ul&gt;
&lt;li&gt;GCP 클라우드 스토리지&lt;/li&gt;
&lt;li&gt;Azure storage&lt;/li&gt;
&lt;li&gt;HashiCorp 사의
&lt;ul&gt;
&lt;li&gt;Terraform Cloud (비싸고 좋고 추천받음)&lt;/li&gt;
&lt;li&gt;Terraform Pro&lt;/li&gt;
&lt;li&gt;Terraform Enterprise&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;본 교재에서는 AWS S3와 DynamoDB의 결합을 이용하여 소개합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;테라폼-상태-관리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%85%8C%EB%9D%BC%ED%8F%BC-%EC%83%81%ED%83%9C-%EA%B4%80%EB%A6%AC&quot; aria-label=&quot;테라폼 상태 관리 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;테라폼 상태 관리&lt;/h1&gt;
&lt;p&gt;그렇다면, 원격 백엔드를 활용한 상태관리를 살펴봅시다.&lt;/p&gt;
&lt;p&gt;제 3장의 예시를 보면 dev, staging 환경을 S3, DynamoDB로 분리하긴 했지만, 상태파일 자체가 단일인 상황은 막을 수 없습니다. 따라서, 책에서는 상태 격리에 대해서는 두가지 접근법을 함께 사용하기를 제안합니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;테라폼의 &lt;code class=&quot;language-text&quot;&gt;Workspace&lt;/code&gt; (이하 워크스페이스) 라는 개념&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;복수개의/분리된/이름이 지정된 워크스페이스를 사용하여 상태파일을 격리합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;분리된 파일 레이아웃 지정&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;개발환경, 스테이징 환경, 실제 프로덕션 환경(!)에 대한 분리를 통해 실수를 방지할 수 있습니다.&lt;/li&gt;
&lt;li&gt;디렉토리 구조를 통한 분리를 의미합니다.
&lt;ul&gt;
&lt;li&gt;[예습!] 이는 모듈화 및 테라폼 내의 &lt;code class=&quot;language-text&quot;&gt;function&lt;/code&gt; 기능과도 밀접한 영향을 가집니다. 필요한 사항에 대해서는 프로그램을 작성하거나 모듈화를 잘 하여 반복되는 코드를 없애자는 것이 주요 골자죠.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;상태관리-1-workspace-설정&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%83%81%ED%83%9C%EA%B4%80%EB%A6%AC-1-workspace-%EC%84%A4%EC%A0%95&quot; aria-label=&quot;상태관리 1 workspace 설정 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;상태관리 (1): Workspace 설정&lt;/h2&gt;
&lt;p&gt;그렇다면, 상태관리를 가능하게 하는 방법 중 하나인 &lt;code class=&quot;language-text&quot;&gt;Workspace&lt;/code&gt;를 알아봅시다.&lt;/p&gt;
&lt;p&gt;테라폼은 기본적으로 &lt;code class=&quot;language-text&quot;&gt;default&lt;/code&gt; 라는 워크스페이스를 사용합니다. 새 작업공간을 만들기 위해서는 &lt;code class=&quot;language-text&quot;&gt;terraform workspace&lt;/code&gt; 커맨드를 사용합니다.&lt;/p&gt;
&lt;p&gt;그렇다면 워크스페이스를 변경하는 것은 어떤 의미를 가질까요?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;다른 작업 공간으로 전환&lt;/strong&gt;하는 것은 &lt;strong&gt;상태 파일이 저장된 경로를 변경&lt;/strong&gt;하는 것과 같습니다.&lt;/li&gt;
&lt;li&gt;작업 공간은 코드 리팩토링을 시도하는 것 같이 이미 &lt;strong&gt;배포되어 있는 인프라에 영향을 주지 않고 테라폼 모듈을 테스트&lt;/strong&gt; 할 때 유용합니다.&lt;/li&gt;
&lt;li&gt;다시말해, 새로운 작업 공간을 생성하여 완전히 &lt;strong&gt;동일한 인프라의 복사본을 배포&lt;/strong&gt;할 수 있지만 상태 정보는 별도의 파일에 저장합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;상술하였듯, 워크스페이스 지정&lt;strong&gt;만&lt;/strong&gt;으로는 문제를 해결할 수 없습니다. 후술할 파일 레이아웃을 함께 지정하여 작업하는 것이 권장됩니다. 어떤 이유로 인해 워크스페이스 만을 사용할 수 없는지 아래에서 설명하겠습니다:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;먼저, 모든 작업 공간의 상태 파일은 동일한 백엔드(예. 동일한 S3 버킷)에 저장합니다. 모든 작업 공간이 동일한 인증과 접근 통제를 사용합니다.
&lt;ul&gt;
&lt;li&gt;E.g., 테스트 환경과 프로덕션 환경이 다른 백엔드를 사용하는 경우, 백엔드에 다른 보안 수준의 통제 설정을 수행하는 것은 불가능합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;코드나 터미널에 현재 작업 공간에 대한 정보가 표시 되지 않습니다. 코드 탐색 시 한 작업 공간에 배치된 모듈은 다른 모든 작업 공간에 배치된 모듈과 동일합니다.
&lt;ul&gt;
&lt;li&gt;이로 인해 인프라를 제대로 파악하기 어려워 유지 관리가 어렵게 됩니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;위 두 항목의 결합된 문제가 발생 할 수 있음. 예를 들면 테스트 환경이 아닌 프로덕션 환경에서 &lt;code class=&quot;language-text&quot;&gt;terraform destroy&lt;/code&gt; &lt;strong&gt;명령을 실행&lt;/strong&gt; 할 수 있습니다… :scream_cat:
&lt;ul&gt;
&lt;li&gt;검증과 운영 환경이 동일한 인증 매커니즘을 사용하기 때문에 위 오류에서 보호할 방법이 없습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;따라서 &lt;strong&gt;파일 레이아웃&lt;/strong&gt;을 이용한 격리를 함께 사용할 것을 권장합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;상태관리-2-파일-레이아웃을-이용한-구성파일-격리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%83%81%ED%83%9C%EA%B4%80%EB%A6%AC-2-%ED%8C%8C%EC%9D%BC-%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EA%B5%AC%EC%84%B1%ED%8C%8C%EC%9D%BC-%EA%B2%A9%EB%A6%AC&quot; aria-label=&quot;상태관리 2 파일 레이아웃을 이용한 구성파일 격리 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;상태관리 (2): 파일 레이아웃을 이용한 구성파일 격리&lt;/h2&gt;
&lt;p&gt;상태관리 방법 중 또다른 하나는 파일 레이아웃을 잡는 것입니다. 핵심은 아래와 같습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;테라폼 프로젝트를 생성하고, 파일레이아웃을 잡습니다.
&lt;ul&gt;
&lt;li&gt;각 구성파일을 분리된 폴더에 넣습니다(E.g., staging, production, etc.).&lt;/li&gt;
&lt;li&gt;필요에 따라 디렉토리 별로에 서로 다른 백엔드 환경을 구성합니다(E.g., S3 버킷 백엔드의 AWS 계정분리).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;예시를 위해, 아래와 같은 구조를 가진다고 하죠.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;.
├── global
│   └── s3
│       ├── main.tf
│       └── outputs.tf
├── mgmt
│   ├── services
│   └── vpc
├── prod
│   ├── services
│   └── vpc
└── stage
    ├── data-stores
    │   └── mysql
    │       ├── main-vpgsg.tf
    │       ├── main.tf
    │       ├── outputs.tf
    │       ├── terraform.tfstate
    │       └── variables.tf
    └── services
        └── webserver-cluster
            ├── main.tf
            └── user-data.sh&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;최상위 폴더&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;stage&lt;/strong&gt; : 테스트 환경과 같은 사전 프로덕션 워크로드 workload 환경&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;prod&lt;/strong&gt; : 사용자용 맵 같은 프로덕션 워크로드 환경&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;mgmt&lt;/strong&gt; : 베스천 호스트(Bastion Host), 젠킨스(Jenkins) 와 같은 데브옵스 도구 환경&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;global&lt;/strong&gt; : S3, IAM과 같이 모든 환경에서 사용되는 리소스를 배치&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;각 환경별 구성 요소&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;vpc&lt;/strong&gt; : 해당 환경을 위한 네트워크 토폴로지&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;services&lt;/strong&gt; : 해당 환경에서 서비스되는 애플리케이션, 각 앱은 자체 폴더에 위치하여 다른 앱과 분리&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;data-storage&lt;/strong&gt; : 해당 환경 별 데이터 저장소. 각 데이터 저장소 역시 자체 폴더에 위치하여 다른 데이터 저장소와 분리&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;명명 규칙 naming conventions (예시)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;variables.tf&lt;/strong&gt; : 입력 변수&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;outputs.tf&lt;/strong&gt; : 출력 변수&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;main-xxx.tf&lt;/strong&gt; : 리소스 → 개별 테라폼 파일 규모가 커지면 특정 기능을 기준으로 &lt;strong&gt;별도 파일&lt;/strong&gt;로 분리
&lt;ul&gt;
&lt;li&gt;E.g., main-iam.tf, main-s3.tf 등&lt;/li&gt;
&lt;li&gt;후에 배울 &lt;strong&gt;모듈&lt;/strong&gt; 단위로 나눌 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;dependencies.tf&lt;/strong&gt; : 데이터 소스&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;providers.tf&lt;/strong&gt; : 공급자&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;상태관리-예제-1&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%83%81%ED%83%9C%EA%B4%80%EB%A6%AC-%EC%98%88%EC%A0%9C-1&quot; aria-label=&quot;상태관리 예제 1 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;상태관리 예제 (1)&lt;/h1&gt;
&lt;p&gt;이 문단에서는 ELB, ASG, 그리고 RDS가 구축된 환경을 만들고, 이에 대해 디렉토리 구조를 아래와 같이 작성하여 실습하도록 하겠습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;├── global
│   └── s3
│       ├── main.tf
│       └── outputs.tf
└── stage
    ├── data-stores
    │   └── mysql
    │       ├── main-vpgsg.tf
    │       ├── main.tf
    │       ├── outputs.tf
    │       └── variables.tf
    └── services
        └── webserver-cluster
            ├── main.tf
            └── user-data.sh&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;코드의 위치는 아래와 같습니다:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/s3ich4n/terraform-study-101/tree/main/chapter03/example03-file-layout&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://github.com/s3ich4n/terraform-study-101/tree/main/chapter03/example03-file-layout&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;rds-생성-도중-배울-요소&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#rds-%EC%83%9D%EC%84%B1-%EB%8F%84%EC%A4%91-%EB%B0%B0%EC%9A%B8-%EC%9A%94%EC%86%8C&quot; aria-label=&quot;rds 생성 도중 배울 요소 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;RDS 생성 도중 배울 요소&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;리소스에 전달해야 되는 매개변수 중 &lt;strong&gt;패스워드&lt;/strong&gt; 처럼 &lt;strong&gt;민감정보&lt;/strong&gt;는 코드에 직접 &lt;strong&gt;평문 입력을 하는 대신 전달 할 수 있는 방안&lt;/strong&gt;을 모색해야 합니다. 방법은 아래와 같습니다.
&lt;ul&gt;
&lt;li&gt;다양한 &lt;strong&gt;시크릿 저장소를 활용&lt;/strong&gt;
E.g.,
AWS Secret Manager, AWS SSM Parameter
GCP KMS 와 KMS Secrets
Azure Key Vault 와 Vault Secret, etc.
&lt;ul&gt;
&lt;li&gt;최소한의 일만 하는 계정을 만들기: 분리와 역할, 필요하면 추가
&lt;ul&gt;
&lt;li&gt;스테이징: 스테이징 프로비저닝에 필요한 AWS 서비스 일부만 허용&lt;/li&gt;
&lt;li&gt;프로덕션: 상기 내용과 마찬가지(권한은 모두 막고, 필요한 단편적인 기능만을 허용하여 넓혀가는 것이 좋습니다.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;테라폼 &lt;strong&gt;외부에서 환경 변수&lt;/strong&gt;를 통해 시크릿 값을 테라폼에 전달
(테스트나 빠르게 개발할 때만 쓰고, 현업에선 &lt;strong&gt;절대&lt;/strong&gt; 사용하지 맙시다!)
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;export TF_VAR_db_password=&quot;(YOUR_DB_PASSWORD)&quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;혹은 &lt;code class=&quot;language-text&quot;&gt;direnv&lt;/code&gt; 의 &lt;code class=&quot;language-text&quot;&gt;.envrc&lt;/code&gt; 파일에 상기 명령과 같은 환경변수를 넣어놓고 사용합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;웹-서버-클러스터-배포-중-배울-요소&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9B%B9-%EC%84%9C%EB%B2%84-%ED%81%B4%EB%9F%AC%EC%8A%A4%ED%84%B0-%EB%B0%B0%ED%8F%AC-%EC%A4%91-%EB%B0%B0%EC%9A%B8-%EC%9A%94%EC%86%8C&quot; aria-label=&quot;웹 서버 클러스터 배포 중 배울 요소 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;웹 서버 클러스터 배포 중 배울 요소&lt;/h2&gt;
&lt;p&gt;웹 서버 클러스터를 배포하며 &lt;code class=&quot;language-text&quot;&gt;terraform_remote_state&lt;/code&gt; 라는 값과, 테라폼의 내장 함수(build-in function)에 대해 살펴봅시다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;백엔드에 상태 파일(위에서 살펴본 RDS 정보)를 읽어서 웹 서버 클러스터 구성을 합니다. 이 때 변환 데이터는 읽기 전용입니다.&lt;/li&gt;
&lt;li&gt;모든 데이터베이스의 출력 변수는 상태 파일에 저장되며 아래와 같은 형식의 속성 참조를 이용해 &lt;code class=&quot;language-text&quot;&gt;terraform_remote_state&lt;/code&gt; 데이터 소스에서 읽을 수 있으며, 그 양식은 아래와 같습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;data.terraform_remote_state.&amp;lt;NAME&gt;.outputs.&amp;lt;ATTRIBUTE&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;E.g., &lt;code class=&quot;language-text&quot;&gt;terraform_remote_state&lt;/code&gt; 데이터 소스에서 데이터베이스 주소와 포트 정보를 가져와서 HTTP 응답에 정보를 노출&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;user_data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;EOF
#!/bin/bash
echo &quot;Hello, World&quot; &gt;&gt; index.html
echo &quot;&lt;span class=&quot;token variable&quot;&gt;${data.terraform_remote_state.db.outputs.address}&lt;/span&gt;&quot; &gt;&gt; index.html
echo &quot;&lt;span class=&quot;token variable&quot;&gt;${data.terraform_remote_state.db.outputs.port}&lt;/span&gt;&quot; &gt;&gt; index.html
nohup busybox httpd -f -p &lt;span class=&quot;token variable&quot;&gt;${var.server_port}&lt;/span&gt; &amp;amp;
EOF&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;사용자 데이터 스크립트&lt;/strong&gt;가 길어지면 인라인으로 정의가 복잡해집니다. 이럴 때는 관련 코드를 외부화하는 것이 코드의 복잡도를 떨어뜨리는 방법입니다. 테라폼의 &lt;strong&gt;내장 함수&lt;/strong&gt;와 &lt;code class=&quot;language-text&quot;&gt;template_file&lt;/code&gt; 라는 데이터 소스를 사용해봅시다.&lt;/li&gt;
&lt;li&gt;테라폼에는 표현식을 사용하여 실행할 수 있는 여러 &lt;strong&gt;내장 함수&lt;/strong&gt;(built-in functions)들이 있습니다. 함수 사용법은 아래와 같습니다.
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.hashicorp.com/terraform/language/functions&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;내장 함수에 대한 링크&lt;/a&gt;를 참고하셔서, 필요한 내장 함수가 있는지 확인해보시고 적재적소에 사용합시다.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Reinventing_the_wheel&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;바퀴를 두번 만들 필요는 없지요!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;function_name()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;E.g., &lt;a href=&quot;https://developer.hashicorp.com/terraform/language/functions/format&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;format&lt;/code&gt;&lt;/a&gt; 함수는 아래 처럼 사용합니다. 문자열 FMT의 &lt;code class=&quot;language-text&quot;&gt;sprintf&lt;/code&gt; 구문에 따라 &lt;code class=&quot;language-text&quot;&gt;ARGS&lt;/code&gt; 인수를 형식화하는 호출방식입니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;format(&amp;lt;FMT&gt;, &amp;lt;ARGS&gt;, ...)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;내장 함수는 테라폼 콘솔을 실행 후, 대화형 콘솔을 사용해서 질의한 결과를 바로 확인하는 것으로 디버깅할 수 있습니다.&lt;/li&gt;
&lt;li&gt;테라폼 콘솔은 &lt;strong&gt;읽기 전용&lt;/strong&gt;입니다. 실수로 인프라나 상태가 변경되지 않습니다. 안심하세요!&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# 참고: 테라폼 콘솔 사용에 관하여&lt;/span&gt;
terraform console
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; format&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;%.3f&quot;&lt;/span&gt;, &lt;span class=&quot;token number&quot;&gt;3.14159265359&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token string&quot;&gt;&quot;3.142&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;그 외에도 테라폼에는 문자열, 숫자, 리스트, 맵 등을 조작하는 데 사용할 수 있는 많은 내장 함수가 존재합니다. 예시에서는 &lt;a href=&quot;https://developer.hashicorp.com/terraform/language/functions/templatefile&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;templatefile&lt;/code&gt;&lt;/a&gt; 함수를 살펴봅시다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;templatefile&lt;/code&gt; 함수는 PATH 에서 파일을 읽고 그 내용을 문자열로 반환합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;templatefile(&amp;lt;PATH&gt;, &amp;lt;VARS&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;E.g., 스크립트 파일을 넣고 stage/services/webserver-cluster/user-data.sh 파일을 넣고 문자열로 내용을 읽을 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token shebang important&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; index.html &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;EOF
&amp;lt;h1&gt;Hello, World&amp;lt;/h1&gt;
&amp;lt;p&gt;DB address: &lt;span class=&quot;token variable&quot;&gt;${db_address}&lt;/span&gt;&amp;lt;/p&gt;
&amp;lt;p&gt;DB port: &lt;span class=&quot;token variable&quot;&gt;${db_port}&lt;/span&gt;&amp;lt;/p&gt;
EOF&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;nohup&lt;/span&gt; busybox httpd &lt;span class=&quot;token parameter variable&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;${server_port}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;사용자 데이터 스크립트에 동적인 데이터는 참조와 보간을 활용. 아래는 ASG 코드 예시&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;templatefile&lt;/code&gt; 데이터 소스의 vars 맵에 있는 변수만 사용 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;resource &lt;span class=&quot;token string&quot;&gt;&quot;aws_launch_configuration&quot;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;example&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  image_id        &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;ami-0fb653ca2d3203ac1&quot;&lt;/span&gt;
  instance_type   &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;t2.micro&quot;&lt;/span&gt;
  security_groups &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;aws_security_group.instance.id&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;# Render the User Data script as a template&lt;/span&gt;
  user_data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; templatefile&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;user-data.sh&quot;&lt;/span&gt;, &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    server_port &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; var.server_port
    db_address  &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; data.terraform_remote_state.db.outputs.address
    db_port     &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; data.terraform_remote_state.db.outputs.port
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;# Required when using a launch configuration with an auto scaling group.&lt;/span&gt;
  lifecycle &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    create_before_destroy &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;lessons-learned&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#lessons-learned&quot; aria-label=&quot;lessons learned permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Lessons Learned&lt;/h1&gt;
&lt;p&gt;제 3장에서는 아래의 내용을 반드시 기억하셨으면 좋겠습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;테라폼 파일을 다수의 사람과 함께 관리할 때 상태관리는 선택이 아닌 필수입니다.
&lt;ol&gt;
&lt;li&gt;워크스페이스 설정을 수행합니다.&lt;/li&gt;
&lt;li&gt;파일 레이아웃을 함께 잡아, 실수를 최대한으로 줄입시다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;민감정보는 시크릿 저장소와 같은 서비스를 활용합시다.&lt;/li&gt;
&lt;li&gt;속성 참조와 내장함수를 통해, 코드반복을 대폭축소합시다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;tips-and-tricks&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tips-and-tricks&quot; aria-label=&quot;tips and tricks permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tips and tricks&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;테라폼 코드도 컨벤션이 있습니다!
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.hashicorp.com/terraform/language/syntax/style&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;테라폼 컨벤션&lt;/a&gt;에 대한 이해를 하고, lint 도 할 수 있다는 말이겠군요.&lt;/li&gt;
&lt;li&gt;그렇다면 pre-commit hook 도 당연히 있을겁니다.&lt;/li&gt;
&lt;li&gt;그렇다면 테스트에도 쓰일 수 있겠군요.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이것으로 제 3장을 마칩니다. 긴 글 읽어주셔서 감사합니다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[[CloudNet@] 테라폼 스터디 2주차 - Terraform 을 통한 VPC, ALB, ASG 배포 실습]]></title><description><![CDATA[Terraform 코드를 통해 VPC 구성과 ALB, ASG 설정을 작성하고, 데이터 소스 블록에 대해 학습합니다.]]></description><link>https://blog.s3ich4n.me/devlog/terraform/2022-10-27-cloudneta-terraform-101-pt02</link><guid isPermaLink="false">https://blog.s3ich4n.me/devlog/terraform/2022-10-27-cloudneta-terraform-101-pt02</guid><pubDate>Thu, 27 Oct 2022 18:11:00 GMT</pubDate><content:encoded>&lt;p&gt;이 내용은 CloudNet@ 에서 진행하는 테라폼 기초 입문 스터디에 대한 연재글입니다.&lt;/p&gt;
&lt;p&gt;스터디에서 사용하는 교재는 Terraform Up &amp;#x26; Running 2nd Edition 입니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;prerequisites&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#prerequisites&quot; aria-label=&quot;prerequisites permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Prerequisites&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;AWS의 VPC 환경에 대한 이해
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=FeYagEibtPE&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;[추천!] AWS 강의실 YouTube 채널의 VPC 강의&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/ko_kr/vpc/latest/userguide/what-is-amazon-vpc.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Amazon VPC란 무엇인가? (위의 강의를 읽으신 후 일독하시면 크게 도움이 됩니다)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/s3ich4n/terraform-study-101/blob/main/chapter01/exercises/challenge01/README.md&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;제가 1주차 도전과제에 대해 공부하며, 요약한 게시글&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;도전과제 내용: AWS VPC에 대해 IaC화 후 EC2 웹서버를 추가하여 프로비저닝하기&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;아래에서 2주차 스터디 내용을 공유합니다.&lt;/p&gt;
&lt;p&gt;교재의 2장 중, 코드내용 중 VPC 환경을 만들고 ASG/ELB 구축을 테라폼으로 진행합니다. 이와 함께 상태관리에 대해 다룹니다.&lt;/p&gt;
&lt;h2 id=&quot;vpc-환경-구축&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#vpc-%ED%99%98%EA%B2%BD-%EA%B5%AC%EC%B6%95&quot; aria-label=&quot;vpc 환경 구축 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;VPC 환경 구축&lt;/h2&gt;
&lt;p&gt;아래 도식의 환경을 코드로 구성합니다:&lt;/p&gt;
&lt;p&gt;예시코드는 아래 경로를 참고해 주세요.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/s3ich4n/terraform-study-101/tree/main/chapter02/exercises/required01&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://github.com/s3ich4n/terraform-study-101/tree/main/chapter02/exercises/required01&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;코드에 대한 설명은 다음과 같습니다:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;required01_vpc.tf&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;프로바이더, VPC를 정의하여, VPC 환경을 작성하였습니다.&lt;/li&gt;
&lt;li&gt;서브넷을 나누었습니다.&lt;/li&gt;
&lt;li&gt;인터넷 게이트웨이를 통해 외부 통신을 사용하도록 하였습니다.&lt;/li&gt;
&lt;li&gt;라우팅 테이블을 통해 서브넷에서 어떤 라우팅 테이블을 타고 트래픽이 흐를 것인지 작성하였습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;required01_sg.tf&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;시큐리티 그룹을 정의하여, 인터넷 게이트웨이를 통한 ingress, egress 포트를 기재하였습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;required01_ec.tf&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;데이터 소스 블록(하단 참고)을 사용하여, AMI(AWS에서 관리하는 머신 이미지) 정보를 가져와 어떻게 사용할 것인지 코드로 작성했습니다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;aws_instance&lt;/code&gt; 선언 시, &lt;code class=&quot;language-text&quot;&gt;ami&lt;/code&gt; config을 수정하며 상기 데이터 소스 블록의 값을 사용했습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;데이터-소스-블록이란&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%86%8C%EC%8A%A4-%EB%B8%94%EB%A1%9D%EC%9D%B4%EB%9E%80&quot; aria-label=&quot;데이터 소스 블록이란 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;데이터 소스 블록이란?&lt;/h2&gt;
&lt;p&gt;예시코드에 있는 내용 중, &lt;code class=&quot;language-text&quot;&gt;data&lt;/code&gt; 로 시작하는 구문은, 데이터 소스 블록을 의미합니다. 이는 아래와 같습니다:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;테라폼을 실행할 때 마다 provider 별로 가져온 읽기 전용 정보를 의미합니다.
&lt;ul&gt;
&lt;li&gt;E.g., &lt;a href=&quot;https://registry.terraform.io/providers/hashicorp/aws/latest/docs/data-sources/ami&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;aws_ami&lt;/code&gt;&lt;/a&gt; 의 데이터 소스 블록은 이런 내용을 가지고 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;데이터 소스를 통하여 아래 내용을 사용할 수 있습니다.
&lt;ul&gt;
&lt;li&gt;테라폼 외부에서 정의된 정보&lt;/li&gt;
&lt;li&gt;별도의 테라폼 구성으로 정의된 정보&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;다른 코드에서, &lt;code class=&quot;language-text&quot;&gt;data.&amp;lt;provider&gt;.&amp;lt;name&gt;.&amp;lt;attribute&gt;&lt;/code&gt; 과 같은 방식으로 호출해올 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;데이터 소스 블록을 사용하는 방법은 아래와 같습니다:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;terraform&quot;&gt;&lt;pre class=&quot;language-terraform&quot;&gt;&lt;code class=&quot;language-terraform&quot;&gt;data &amp;quot;&amp;lt;PROVIDER&amp;gt;_&amp;lt;TYPE&amp;gt;&amp;quot; &amp;quot;&amp;lt;NAME&amp;gt;&amp;quot; {
  [CONFIG …]
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;PROVIDER : &lt;code class=&quot;language-text&quot;&gt;aws&lt;/code&gt; 같은 공급자의 이름&lt;/li&gt;
&lt;li&gt;TYPE : &lt;code class=&quot;language-text&quot;&gt;vpc&lt;/code&gt; 같은 사용하려는 데이터 소스의 유형&lt;/li&gt;
&lt;li&gt;NAME : 테라폼 코드에서 이 데이터 소스를 참조하는 데 사용할 수 있는 식별자&lt;/li&gt;
&lt;li&gt;CONFIG : 해당 데이터 소스에 고유한 하나 이상의 인수로 구성됩니다.
&lt;ul&gt;
&lt;li&gt;아래의 예시는 &lt;code class=&quot;language-text&quot;&gt;aws_vpc&lt;/code&gt; 데이터 소스를 사용하여 기본 VPC(default vpc)의 데이터를 사용하는 구문입니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;이런 방식으로 호출할 수 있지요:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;terraform&quot;&gt;&lt;pre class=&quot;language-terraform&quot;&gt;&lt;code class=&quot;language-terraform&quot;&gt;data &amp;quot;aws_ami&amp;quot; &amp;quot;s3ich4n-chapter02-ex01-amazonlinux2&amp;quot; {
  most_recent = true
  filter {
    name   = &amp;quot;owner-alias&amp;quot;
    values = [&amp;quot;amazon&amp;quot;]
  }

  filter {
    name   = &amp;quot;name&amp;quot;
    values = [&amp;quot;amzn2-ami-hvm-*-x86_64-ebs&amp;quot;]
  }

  owners = [&amp;quot;amazon&amp;quot;]
}

resource &amp;quot;aws_instance&amp;quot; &amp;quot;s3ich4n-chapter02-ex01-ec2&amp;quot; {
  ami                         = data.aws_ami.s3ich4n-chapter02-ex01-amazonlinux2.id
  (중략)
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;vpc환경에서-alb-asg-구축&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#vpc%ED%99%98%EA%B2%BD%EC%97%90%EC%84%9C-alb-asg-%EA%B5%AC%EC%B6%95&quot; aria-label=&quot;vpc환경에서 alb asg 구축 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;VPC환경에서 ALB, ASG 구축&lt;/h2&gt;
&lt;p&gt;이제 VPC 환경에서 ALB, ASG를 추가한 환경을 구축해보겠습니다. 도식은 아래와 같습니다:&lt;/p&gt;
&lt;p&gt;예시코드는 아래 경로를 참고해 주세요.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/s3ich4n/terraform-study-101/tree/main/chapter02/exercises/required02&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://github.com/s3ich4n/terraform-study-101/tree/main/chapter02/exercises/required02&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;구축에 앞서 ALB와 ASG, 그리고 이 둘을 함께 사용하려면 어떻게 해야하는지에 대해 살펴보겠습니다.&lt;/p&gt;
&lt;h3 id=&quot;asg란&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#asg%EB%9E%80&quot; aria-label=&quot;asg란 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ASG란?&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/auto-scaling-groups.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;AWS의 ASG(Auto Scaling Groups)&lt;/a&gt;를 의미합니다. EC2 인스턴스의 자동적인 스케일링, 관리를 위해 논리적인 그룹으로 묶는 기능을 수행합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;EC2 인스턴스 클러스터 시작, 인스턴스 상태 모니터링/교체, 부하에 따른 클러스터 사이즈 조정 등을 자동으로 해줍니다.&lt;/li&gt;
&lt;li&gt;따라서, 운영하고자 하는 서비스의 트래픽 양에 따라 클러스터의 적절한 크기를 조절해야 합니다.&lt;/li&gt;
&lt;li&gt;공부를 마치고, &lt;a href=&quot;https://www.airpair.com/aws/posts/building-a-scalable-web-app-on-amazon-web-services-p1&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;AWS에 HA 및 scalable system 구축방법에 대한 링크&lt;/a&gt;를 읽어보시길 권장합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ASG는 시작 구성정보를 참고하여 인스턴스를 생성하는데, 재배포를 한다면 시작구성을 변경할 수 없습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;따라서, 리소스 생성, 업데이트, 삭제 방법을 구성하는 수명주기(&lt;code class=&quot;language-text&quot;&gt;lifecycle&lt;/code&gt;) 설정을 추가해야 합니다.
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;create_before_destroy&lt;/code&gt; 설정을 이 때 사용합니다.&lt;/li&gt;
&lt;li&gt;테라폼은 리소스를 교체하는 순서를 반대로 하여 교체 리소스를 먼저 생성하고(이전 리소스가 가리키고 있던 참조를 업데이트하여 교체한 리소스를 가리킴) 기존 리소스를 삭제합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;alb란&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#alb%EB%9E%80&quot; aria-label=&quot;alb란 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ALB란?&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.aws.amazon.com/ko_kr/elasticloadbalancing/latest/application/introduction.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;AWS ALB(Application Load Balancer)&lt;/a&gt;를 의미합니다. 둘 이상의 AZ(Availability Zone, 가용 영역)에서 EC2, 컨테이너, IP 주소 등에 대해 들어오는 트래픽을 자동으로 분산하는 역할을 수행합니다.&lt;/p&gt;
&lt;p&gt;→ 트래픽을 분산시키고, 외부에 노출시키는 IP 주소를 단일화합니다.&lt;/p&gt;
&lt;p&gt;ALB의 주요 구성에 대해 알아보겠습니다:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;리스너
&lt;ul&gt;
&lt;li&gt;특정 포트, 특정 프로토콜에 대해 수신&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;리스너 규칙
&lt;ul&gt;
&lt;li&gt;특정 경로에 대해 어디로 요청을 “대상 그룹”으로 보낼지 설정&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;대상 그룹
&lt;ul&gt;
&lt;li&gt;요청을 받는 하나 이상의 서버&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;FYI, AWS에서는 로드 밸런싱을 위한 여러 서비스가 존재합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NLB (네트워크 로드 밸런서)
&lt;ul&gt;
&lt;li&gt;L4 레벨 트래픽 처리에 적합(TCP, UDP, TLS, etc.)합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CLB (클래식 로드 밸런서)
&lt;ul&gt;
&lt;li&gt;AWS의 레거시 로드밸런서입니다.&lt;/li&gt;
&lt;li&gt;L7, L4 모두 가능하지만 새로 나온 서비스에 비하면 기능이 적습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;asg-alb를-사용하려면&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#asg-alb%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%A0%A4%EB%A9%B4&quot; aria-label=&quot;asg alb를 사용하려면 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ASG, ALB를 사용하려면?&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;ASG, ALB를 함께 사용하려면?&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;어떤 인스턴스 그룹을 바라보아야 할지 설정해야 합니다.&lt;/li&gt;
&lt;li&gt;헬스체크 타입 추가(EC2 → ELB)가 필요합니다.&lt;/li&gt;
&lt;li&gt;LB healthcheck 룰을 추가해야합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;lessons-learned&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#lessons-learned&quot; aria-label=&quot;lessons learned permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Lessons Learned&lt;/h2&gt;
&lt;p&gt;제 2장에서는 테라폼을 사용하여 기본적인 환경구축을 수행하는 방법에 대해 배웠습니다. 또한 데이터 소스 블록에 대한 내용을 학습했습니다. 아래 내용을 반드시 기억하셨으면 좋겠습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;VPC 환경을 테라폼으로 표현하는 방법에 대해 배웠습니다.&lt;/li&gt;
&lt;li&gt;VPC 환경에 ALB, ASG를 함께 구축하여 트래픽양에 따른 scale-out을 코드화 하였습니다
&lt;ol&gt;
&lt;li&gt;아직 정확히 어떤 시점에, 어떻게 스케일아웃을 하고 다시 원복해야 하는지에 대한 내용은 나오지 않았습니다!&lt;/li&gt;
&lt;li&gt;후에 다시 기술할 예정입니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;데이터 소스 블록에 대해 배웠습니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이것으로 제 2장을 마칩니다. 긴 글 읽어주셔서 감사합니다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[[CloudNet@] 테라폼 스터디 1주차 - Terraform의 기초]]></title><description><![CDATA[Terraform의 등장배경과, 간략한 소개, 그리고 기초적인 예시를 통해 어떻게 사용하는지에 대한 내용을 담고 있습니다.]]></description><link>https://blog.s3ich4n.me/devlog/terraform/2022-10-20-cloudneta-terraform-101-pt01</link><guid isPermaLink="false">https://blog.s3ich4n.me/devlog/terraform/2022-10-20-cloudneta-terraform-101-pt01</guid><pubDate>Thu, 20 Oct 2022 16:34:00 GMT</pubDate><content:encoded>&lt;p&gt;이 내용은 &lt;a href=&quot;https://www.notion.so/gasidaseo/CloudNet-Blog-c9dfa44a27ff431dafdd2edacc8a1863&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;CloudNet@&lt;/a&gt; 에서 진행하는 테라폼 기초 입문 스터디에 대한 연재글입니다.&lt;/p&gt;
&lt;p&gt;스터디에서 사용하는 교재는 &lt;a href=&quot;http://www.yes24.com/Product/Goods/101511312&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Terraform Up &amp;#x26; Running 2nd Edition&lt;/a&gt; 입니다.&lt;/p&gt;
&lt;h1 id=&quot;들어가며&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%93%A4%EC%96%B4%EA%B0%80%EB%A9%B0&quot; aria-label=&quot;들어가며 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;들어가며…&lt;/h1&gt;
&lt;p&gt;인프라를 코드를 통해 관리(Infrastructure as Code, 이하 IaC)하는 개념은 널리 퍼져있습니다. 이는 수동으로 운영하는 수고를 벗어나, 코드화하여 관리할 수 있는 이점을 지니기도 합니다.&lt;/p&gt;
&lt;p&gt;그렇지만 올바르게 알아야 이를 적재적소에 사용할 수 있으며, 백엔드 개발에 대한 지식을 익혀둔 현 시점에 학습하면 협업 및 서브프로젝트 진행에 도움이 될 것이라고 판단하였습니다.&lt;/p&gt;
&lt;p&gt;따라서 제가 공부한 내용을 남겨, 이해하고 배운 내용을 공유하려 합니다.&lt;/p&gt;
&lt;p&gt;부디 이 내용이 도움이 되기를 바랍니다.&lt;/p&gt;
&lt;h1 id=&quot;이-글의-대상은&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9D%B4-%EA%B8%80%EC%9D%98-%EB%8C%80%EC%83%81%EC%9D%80&quot; aria-label=&quot;이 글의 대상은 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;이 글의 대상은?&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;백엔드 개발 경험이 있으면서 인프라를 코드로 관리(Infrastructure as Code, IaC)하는 방법에 대해 알고싶은 분&lt;/li&gt;
&lt;li&gt;AWS, GCP, Microsoft Azure 등의 클라우드 컴퓨팅 서비스에 대한 기본 개념을 갖추신 분&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;목차&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%AA%A9%EC%B0%A8&quot; aria-label=&quot;목차 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;목차&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#Prerequisites&quot;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#devops%EC%9D%98-%EB%8C%80%EB%91%90-iac%EC%9D%98-%EB%93%B1%EC%9E%A5-%EA%B7%B8%EB%A6%AC%EA%B3%A0-terraform&quot;&gt;DevOps의 대두, IaC의 등장, 그리고 Terraform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#terraform-%EC%9D%B4%EB%9E%80&quot;&gt;Terraform 이란?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%85%8C%EB%9D%BC%ED%8F%BC%EC%97%90-%EB%8C%80%ED%95%98%EC%97%AC&quot;&gt;테라폼에 대하여&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%85%8C%EB%9D%BC%ED%8F%BC%EC%9D%98-%EA%B8%B0%EB%B3%B8-%EA%B0%9C%EB%85%90&quot;&gt;테라폼의 기본 개념&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%85%8C%EB%9D%BC%ED%8F%BC-%EC%BD%94%EB%93%9C%EC%97%90-%EB%8C%80%ED%95%98%EC%97%AC&quot;&gt;테라폼 코드에 대하여&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%85%8C%EB%9D%BC%ED%8F%BC-%EA%B5%AC%EB%8F%99%EB%B0%A9%EB%B2%95&quot;&gt;테라폼 구동방법&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#lessons-learned&quot;&gt;Lessons learned&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;prerequisites&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#prerequisites&quot; aria-label=&quot;prerequisites permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Prerequisites&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/tfutils/tfenv&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;tfenv&lt;/a&gt; 를 통한 테라폼 설치환경 분리
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.44bits.io/ko/post/managing-teraform-versions-with-tfenv&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;참고링크 1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AWS의 IAM user 자격증명 설정
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.voidmainvoid.net/405&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;AWS IAM에 대한 설명&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://direnv.net/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;direnv&lt;/a&gt; 를 설치하여, 디렉토리 별 환경변수 설정
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.44bits.io/ko/post/direnv_for_managing_directory_environment&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;참고링크 1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;아래에서 1주차 스터디 내용을 공유합니다.&lt;/p&gt;
&lt;p&gt;교재의 1, 2장을 다룹니다.&lt;/p&gt;
&lt;h2 id=&quot;devops의-대두-iac의-등장-그리고-terraform&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#devops%EC%9D%98-%EB%8C%80%EB%91%90-iac%EC%9D%98-%EB%93%B1%EC%9E%A5-%EA%B7%B8%EB%A6%AC%EA%B3%A0-terraform&quot; aria-label=&quot;devops의 대두 iac의 등장 그리고 terraform permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;DevOps의 대두, IaC의 등장, 그리고 Terraform&lt;/h2&gt;
&lt;p&gt;과거에는 랙이나 캐비넷에 서버를 설치하고, 배선작업을 하고 쿨링 시스템을 설정하여 서버를 개발하던 시절이 있었습니다(물론 현재에도 여전히 유효하며, 필요에 따라서는 사용해야 합니다!). 이러한 시대에는 개발팀(Dev)과 운영팀(Ops)이 분리되어 하드웨어, 소프트웨어 파트를 각각 맡았으며 회사가 커짐에 따라 불필요한 수고가 많아졌습니다. &lt;a href=&quot;https://ko.wikipedia.org/wiki/%ED%81%B4%EB%9D%BC%EC%9A%B0%EB%93%9C_%EC%BB%B4%ED%93%A8%ED%8C%85&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;클라우드 컴퓨팅&lt;/a&gt;의 시대가 도래하여 필요에 따라 하드웨어 제품을 “대여” 할 수 있게 되고, &lt;code class=&quot;language-text&quot;&gt;Chef&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;Puppet&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;Terraform&lt;/code&gt; 등과 같은 소프트웨어의 등장하여 이러한 수고를 “모든” 회사가 하지 않아도 되는 시대가 왔습니다. 이러한 시대의 흐름을 타고 개발과 운영이 한데 어우러진, 이른 바 “DevOps 운동”이 시작되었습니다. 소프트웨어 개발 전반에 필요한 프로세스와 방법론, 그리고 세부 기술에 대한 논의가 진행되는건 당연한 수순이라고 할 수 있겠네요.&lt;/p&gt;
&lt;p&gt;따라서, DevOps는 아래와 같다고 할 수 있겠습니다:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;소프트웨어를 효율적으로 전달하는 프로세스&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;IaC(Infrastructure as Code)는 이러한 DevOps를 할 수 있게 한 원동력입니다. 문자 그대로, 인프라환경을 코드로 작성할 수 있게 된 것이지요. 앞서 말씀드린 &lt;code class=&quot;language-text&quot;&gt;Chef&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;Puppet&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;Terraform&lt;/code&gt; 등과 같은 도구가 그 대상 중 하나입니다. 저희는 앞으로 그 중 하나인 &lt;code class=&quot;language-text&quot;&gt;Terraform&lt;/code&gt;(이하 테라폼)을 배우게 될 것입니다.&lt;/p&gt;
&lt;h2 id=&quot;terraform-이란&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#terraform-%EC%9D%B4%EB%9E%80&quot; aria-label=&quot;terraform 이란 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Terraform 이란?&lt;/h2&gt;
&lt;p&gt;HashiCorp 에서 만든 IaC 도구입니다. 사람이 읽기 쉬운(human-readable) 설정파일을 통해 버저닝과 재사용, 그리고 팀원간의 공유를 할 수 있게 합니다.&lt;/p&gt;
&lt;p&gt;코드화가 된다면, 코드를 작성할 때의 덕목을 모두 사용할 수 있음을 의미합니다. 따라서, 좋은 코드를 작성하기 위한 요소를 알고, Ops 파트의 특성을 공유한다면 보다 기민한 제품개발(뭐가 되었든!)을 할 수 있겠지요.&lt;/p&gt;
&lt;h3 id=&quot;iac-도구의-장점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#iac-%EB%8F%84%EA%B5%AC%EC%9D%98-%EC%9E%A5%EC%A0%90&quot; aria-label=&quot;iac 도구의 장점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;IaC 도구의 장점&lt;/h3&gt;
&lt;p&gt;인프라를 코드 형식으로 작성하는 경우, 아래의 장점을 가져갈 수 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;자급식 배포 (&lt;strong&gt;Self-service&lt;/strong&gt;): 배포 프로세스를 자동화 할 수 있으며, 개발자는 필요할 때마다 자체적으로 배포를 진행 할 수 있습니다.&lt;/li&gt;
&lt;li&gt;속도와 안정성 (&lt;strong&gt;Speed and safety&lt;/strong&gt;) : 제대로 작성된 코드는 자동/일관적이며, 사람이 발생시킬 수 있는 오류(human error)의 가능성이 현저히 적습니다.&lt;/li&gt;
&lt;li&gt;문서화 (&lt;strong&gt;Documentation&lt;/strong&gt;) : 시스템 관리자 조직만 인프라에 관한 정보를 독점하는 것이 아니라, 누구나 읽을 수 있는 소스 파일로 인프라 상태를 나타낼수 있습니다.&lt;/li&gt;
&lt;li&gt;버전 관리 (&lt;strong&gt;Version control&lt;/strong&gt;) : 인프라의 변경 내용이 모두 기록된 코드형 인프라 소스 파일을 저장할 수 있으므로 버전을 쉽게 관리할 수 있습니다. 또한 문제 발생 시 코드를 통한 원상복구가 가능합니다.&lt;/li&gt;
&lt;li&gt;유효성 검증 (&lt;strong&gt;Validation&lt;/strong&gt;) : 인프라 상태가 코드로 정의되어 있으면 코드가 변경될 때마다 검증을 수행하고 일련의 자동화된 테스트를 실행할 수 있습니다.&lt;/li&gt;
&lt;li&gt;재사용성 (&lt;strong&gt;Reuse&lt;/strong&gt;) : 인프라를 재사용 가능한 모듈로 패키징할 수 있어 검증된 모듈로 일관되게 배포할 수 있습니다.&lt;/li&gt;
&lt;li&gt;이 모든게 되다니 행복해요(&lt;strong&gt;Happiness&lt;/strong&gt;)!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;테라폼에-대하여&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%85%8C%EB%9D%BC%ED%8F%BC%EC%97%90-%EB%8C%80%ED%95%98%EC%97%AC&quot; aria-label=&quot;테라폼에 대하여 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;테라폼에 대하여&lt;/h2&gt;
&lt;p&gt;아래에서 본격적으로 테라폼이 어떤 식으로 사용되는지에 대해 살펴보겠습니다.&lt;/p&gt;
&lt;h3 id=&quot;테라폼의-기본-개념&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%85%8C%EB%9D%BC%ED%8F%BC%EC%9D%98-%EA%B8%B0%EB%B3%B8-%EA%B0%9C%EB%85%90&quot; aria-label=&quot;테라폼의 기본 개념 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;테라폼의 기본 개념&lt;/h3&gt;
&lt;p&gt;테라폼에서 주요하게 사용되는 기본개념은 아래와 같습니다:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;resource&lt;/strong&gt; : 실제로 생성할 인프라 자원을 의미&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;provider&lt;/strong&gt; : 테라폼으로 정의할 Infrastructure Provider(AWS, Microsoft Azure, GCP 등)를 의미&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;output&lt;/strong&gt; : 인프라를 프로비저닝 한 후에 생성된 자원을 &lt;code class=&quot;language-text&quot;&gt;output&lt;/code&gt; 부분으로 뽑을 수 있음. &lt;code class=&quot;language-text&quot;&gt;output&lt;/code&gt;으로 추출한 부분은 이후에 &lt;code class=&quot;language-text&quot;&gt;remote state&lt;/code&gt;에서 활용 가능&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;backend&lt;/strong&gt; : 테라폼의 상태를 저장할 공간을 지정하는 부분. &lt;code class=&quot;language-text&quot;&gt;backend&lt;/code&gt;를 사용하면 현재 배포된 최신 상태를 외부에 저장하기 때문에 다른 사람과의 협업이 가능&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;module&lt;/strong&gt; : 공통적으로 활용할 수 있는 인프라 코드를 한 곳으로 모아서 정의하는 부분. 이를 사용하면 변수만 바꿔서 동일한 리소스를 손쉽게 생성할 수 있음&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;remote state&lt;/strong&gt; : &lt;code class=&quot;language-text&quot;&gt;remote state&lt;/code&gt;를 사용하면 VPC, IAM 등과 같이 여러 서비스가 공통으로 사용하는 것을 사용할 수 있음. &lt;code class=&quot;language-text&quot;&gt;tfstate&lt;/code&gt;파일이 저장되어 있는 &lt;code class=&quot;language-text&quot;&gt;backend&lt;/code&gt; 정보를 명시하면, 테라폼이 해당 &lt;code class=&quot;language-text&quot;&gt;backend&lt;/code&gt;에서 &lt;code class=&quot;language-text&quot;&gt;output&lt;/code&gt; 정보들을 가져옴&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;테라폼-코드에-대하여&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%85%8C%EB%9D%BC%ED%8F%BC-%EC%BD%94%EB%93%9C%EC%97%90-%EB%8C%80%ED%95%98%EC%97%AC&quot; aria-label=&quot;테라폼 코드에 대하여 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;테라폼 코드에 대하여&lt;/h3&gt;
&lt;p&gt;테라폼 코드의 실제 작성요소에 대해 간략히 정리하고자 합니다.&lt;/p&gt;
&lt;p&gt;테라폼 코드는 HCL(Hashicorp Configuration Language) 로 작성합니다.&lt;/p&gt;
&lt;p&gt;OS 마다 &lt;strong&gt;바이너리&lt;/strong&gt; 파일이 존재하는데, Go코드는 하나의 바이너리 파일로 컴파일되며 &lt;code class=&quot;language-text&quot;&gt;terraform &amp;lt;args&gt;&lt;/code&gt; 형식의 명령어로 실행합니다. 테라폼 바이너리가 &lt;code class=&quot;language-text&quot;&gt;provider&lt;/code&gt;를 대신해 API를 호출하여 리소스를 생성합니다. 테라폼은 인프라 정보가 담겨 있는 테라폼 구성 파일을 생성하여 API를 호출하지요.&lt;/p&gt;
&lt;p&gt;확장자는 &lt;code class=&quot;language-text&quot;&gt;*.tf&lt;/code&gt; 입니다.&lt;/p&gt;
&lt;h3 id=&quot;테라폼-구동방법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%85%8C%EB%9D%BC%ED%8F%BC-%EA%B5%AC%EB%8F%99%EB%B0%A9%EB%B2%95&quot; aria-label=&quot;테라폼 구동방법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;테라폼 구동방법&lt;/h3&gt;
&lt;p&gt;테라폼의 구동 후 프로비저닝[1] 은 크게 3단계로 나뉩니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;terraform init&lt;/code&gt; 을 통해 테라폼 프로젝트를 initialize
&lt;ul&gt;
&lt;li&gt;지정한 backend에 상태 저장을 위한 &lt;code class=&quot;language-text&quot;&gt;.tfstate&lt;/code&gt; 파일을 생성합니다. 여기에는 가장 마지막에 적용한 테라폼 내역이 저장됩니다.&lt;/li&gt;
&lt;li&gt;init 작업을 완료하면, local에는 &lt;code class=&quot;language-text&quot;&gt;.tfstate&lt;/code&gt;에 정의된 내용을 담은 &lt;code class=&quot;language-text&quot;&gt;.terraform&lt;/code&gt; 파일이 생성됩니다.&lt;/li&gt;
&lt;li&gt;기존에 다른 개발자가 이미 &lt;code class=&quot;language-text&quot;&gt;.tfstate&lt;/code&gt;에 인프라를 정의해 놓은 것이 있다면, 다른 개발자는 init작업을 통해서 local에 sync를 맞출 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;terraform plan&lt;/code&gt; 을 통해 수행하고자 하는 동작을 테스트
&lt;ul&gt;
&lt;li&gt;정의한 코드가 어떤 인프라를 만들게 되는지 미리 예측 결과를 보여줍니다. 단, plan을 한 내용에 에러가 없다고 하더라도, 실제 적용되었을 때는 에러가 발생할 수 있습니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code class=&quot;language-text&quot;&gt;terraform plan&lt;/code&gt; 명령어는 어떠한 형상에도 변화를 주지 않습니다.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;terraform apply&lt;/code&gt;를 통해 실제 프로비저닝을 수행
&lt;ul&gt;
&lt;li&gt;실제로 인프라를 배포하기 위한 명령어입니다. apply를 완료하면, AWS 상에 실제로 해당 인프라가 생성되고 작업 결과가 backend의 &lt;code class=&quot;language-text&quot;&gt;.tfstate&lt;/code&gt; 파일에 저장됩니다.&lt;/li&gt;
&lt;li&gt;해당 결과는 local의 .terraform 파일에도 저장됩니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;예시를-통한-resource-정의-방법-표현&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%98%88%EC%8B%9C%EB%A5%BC-%ED%86%B5%ED%95%9C-resource-%EC%A0%95%EC%9D%98-%EB%B0%A9%EB%B2%95-%ED%91%9C%ED%98%84&quot; aria-label=&quot;예시를 통한 resource 정의 방법 표현 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;예시를 통한 &lt;code class=&quot;language-text&quot;&gt;resource&lt;/code&gt; 정의 방법 표현&lt;/h3&gt;
&lt;p&gt;실제로 생성할 인프라 자원에 대해 정의하는 방법은 아래와 같습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;terraform&quot;&gt;&lt;pre class=&quot;language-terraform&quot;&gt;&lt;code class=&quot;language-terraform&quot;&gt;resource &amp;quot;&amp;lt;PROVIDER&amp;gt;_&amp;lt;TYPE&amp;gt;&amp;quot; &amp;quot;&amp;lt;NAME&amp;gt;&amp;quot; {
  [CONFIG ...]
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;PROVIDER : ‘aws’ 같은 공급자의 이름&lt;/li&gt;
&lt;li&gt;TYPE : ‘security_group’ 같은 리소스의 유형&lt;/li&gt;
&lt;li&gt;NAME : 리소스의 이름&lt;/li&gt;
&lt;li&gt;CONFIG : 한개 이상의 &lt;em&gt;arguments&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;그렇다면, 예시코드를 보며 이해해보죠.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/s3ich4n/terraform-study-101/blob/4e0b9159a443853311734cf0a839a11772290bbf/chapter01/example01/main.tf#L1-L12&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://github.com/s3ich4n/terraform-study-101/blob/4e0b9159a443853311734cf0a839a11772290bbf/chapter01/example01/main.tf#L1-L12&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;line 1~3: &lt;code class=&quot;language-text&quot;&gt;provider&lt;/code&gt; 정의를 통해 어느 프로바이더를 사용할지 기재합니다.
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;region&lt;/code&gt; 은 어느 지역의 장비를 사용할 것인지를 기재하는 것입니다.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;region에 대한 리스트&lt;/a&gt; 는 해당 링크를 참조해주세요.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;line 5~11: &lt;code class=&quot;language-text&quot;&gt;resource&lt;/code&gt; 에 대한 정의입니다. 어떤 프로바이더의 리소스를 사용할 것이며, 사용자가 정의한 이름을 사용하겠다는 의미이지요.
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;config&lt;/code&gt; 값은 리소스에 따라 다릅니다. 현재 사용한 &lt;a href=&quot;https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/instance&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;aws_instance&lt;/code&gt;&lt;/a&gt; 에 대한 상세한 내용은 이 링크를 참조해주세요.&lt;/li&gt;
&lt;li&gt;pro tips) 향후 작업하시며, 테라폼의 공식문서를 많이 보시게 될 겁니다!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;예시를-통한-참조reference-방법-표현&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%98%88%EC%8B%9C%EB%A5%BC-%ED%86%B5%ED%95%9C-%EC%B0%B8%EC%A1%B0reference-%EB%B0%A9%EB%B2%95-%ED%91%9C%ED%98%84&quot; aria-label=&quot;예시를 통한 참조reference 방법 표현 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;예시를 통한 참조(reference) 방법 표현&lt;/h3&gt;
&lt;p&gt;참조(reference)는 코드의 다른 부분에서 사전에 정의한 리소스의 특정 값에 액세스 할 수 있게 해주는 표현식을 의미합니다. 정의 방법은 아래와 같습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;terraform&quot;&gt;&lt;pre class=&quot;language-terraform&quot;&gt;&lt;code class=&quot;language-terraform&quot;&gt;&amp;lt;PROVIDER&amp;gt;_&amp;lt;TYPE&amp;gt;.&amp;lt;NAME&amp;gt;.&amp;lt;ATTRIBUTE&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;PROVIDER : ‘aws’ 같은 공급자의 이름&lt;/li&gt;
&lt;li&gt;TYPE : ‘security_group’ 같은 리소스의 유형&lt;/li&gt;
&lt;li&gt;NAME : 보안 그룹 이름인 ‘instance’ 같은 리소스의 이름&lt;/li&gt;
&lt;li&gt;ATTRIBUTE : ‘name’ 과 같은 리소스의 인수 중 하나이거나 리소스가 내보낸 속성 중 하나&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;예시1)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;aws&lt;/code&gt; PROVIDER의 &lt;code class=&quot;language-text&quot;&gt;security_group&lt;/code&gt; TYPE에 대해&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;instance&lt;/code&gt;라는 이름의 NAME내의 &lt;code class=&quot;language-text&quot;&gt;id&lt;/code&gt; 라는 ATTRIBUTE 을 가져오려면?
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;aws_security_group.instance.id&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;종속성
&lt;ul&gt;
&lt;li&gt;하나의 리소스에서 다른 리소스로 &lt;strong&gt;참조&lt;/strong&gt;를 추가하면 내재된 &lt;strong&gt;종속성&lt;/strong&gt;이 작성됩니다.&lt;/li&gt;
&lt;li&gt;테라폼은 종속성 구문을 분석하여 종속성 그래프를 작성하고, 이를 사용하여 리소스를 생성하는 순서를 &lt;strong&gt;자동&lt;/strong&gt;으로 결정합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;변수variables-표현&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B3%80%EC%88%98variables-%ED%91%9C%ED%98%84&quot; aria-label=&quot;변수variables 표현 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;변수(variables) 표현&lt;/h3&gt;
&lt;p&gt;변수(variables)는 자주 사용되는 값에 대해 변수값으로 별도의 &lt;code class=&quot;language-text&quot;&gt;.tf&lt;/code&gt; 파일에 기록하는 것을 의미합니다.&lt;/p&gt;
&lt;p&gt;두가지 예시코드를 살펴보며 학습하겠습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;variables.tf&lt;/code&gt; 파일에 분리된 예시코드
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/s3ich4n/terraform-study-101/blob/main/chapter01/example04/variables.tf&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://github.com/s3ich4n/terraform-study-101/blob/main/chapter01/example04/variables.tf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;server_port&lt;/code&gt; 라는 변수를 정의하여, 다른 테라폼 파일에서 사용하도록 합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;main.tf&lt;/code&gt; 파일에 작성된 프로바이더, 리소스 정의와 변수 참조
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/s3ich4n/terraform-study-101/blob/4e0b9159a4/chapter01/example04/main.tf&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://github.com/s3ich4n/terraform-study-101/blob/4e0b9159a4/chapter01/example04/main.tf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;line 27~28: &lt;code class=&quot;language-text&quot;&gt;var.server_port&lt;/code&gt; 와 같이 변수값을 참조하여 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;lessons-learned&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#lessons-learned&quot; aria-label=&quot;lessons learned permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Lessons learned&lt;/h2&gt;
&lt;p&gt;제 1장에서는 테라폼의 기본 내용을 살펴보았습니다. 아래 내용을 반드시 기억하셨으면 좋겠습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;다양한 IaC 도구들의 등장과 클라우드 컴퓨팅의 등장으로, 개발과 운영은 새로운 패러다임을 맞이했습니다.&lt;/li&gt;
&lt;li&gt;테라폼의 기본적인 개념에 대해 익히고, 특정 프로바이더의 리소스를 사용할 수 있습니다.&lt;/li&gt;
&lt;li&gt;2에서 언급한 리소스의 값을 마치 변수처럼 “참조”할 수 있으며, 공통적으로 사용되는 상수값은 “변수”로 둘 수 있습니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이것으로 제 1장을 마칩니다. 긴 글 읽어주셔서 감사합니다.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;[1]: “작성된 코드에 대한 환경을 배포한다” 로 이해하면 쉽습니다. 적절한 권한을 가진 유저가 인프라 구성 명령을 내려서 실제 인프라 구성을 수행하는 것이지요.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Python의 디스크립터에 대해 (1): 이론]]></title><description><![CDATA[Python의 디스크립터에 대하여 공부한 내용을 정리하고자 글을 작성하였습니다. 2부에서는 실제 오픈소스들의 코드를 보고 해설할 예정입니다.]]></description><link>https://blog.s3ich4n.me/devlog/python/2022-06-10-python-descriptor-described</link><guid isPermaLink="false">https://blog.s3ich4n.me/devlog/python/2022-06-10-python-descriptor-described</guid><pubDate>Fri, 10 Jun 2022 12:30:00 GMT</pubDate><content:encoded>&lt;p&gt;이 문서는 &lt;a href=&quot;https://realpython.com/python-descriptors/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;여기&lt;/a&gt;와 이펙티브 파이썬 2nd edition의 내용을 발췌하여 요약한 내용이다.&lt;/p&gt;
&lt;h1 id=&quot;목차&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%AA%A9%EC%B0%A8&quot; aria-label=&quot;목차 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;목차&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%A9%94%EC%86%8C%EB%93%9C-%EB%82%B4%EC%9D%98-python-descriptor%EC%99%80-%ED%95%A8%EC%88%98&quot;&gt;메소드 내의 python descriptor와 함수&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#attribute%EC%9D%B4-lookup-chain%EC%9D%84-%ED%86%B5%ED%95%B4-access-%EB%90%98%EB%8A%94-%EB%B0%A9%EC%8B%9D&quot;&gt;Attribute이 lookup chain을 통해 access 되는 방식&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%98-%EB%94%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%84%B0%EB%A5%BC-%EC%A0%9C%EB%8C%80%EB%A1%9C-%EC%93%B0%EB%A0%A4%EB%A9%B4&quot;&gt;파이썬의 디스크립터를 제대로 쓰려면?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%94%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%84%B0%EB%A5%BC-%EC%93%B0%EB%8A%94-%EC%9D%B4%EC%9C%A0&quot;&gt;디스크립터를 쓰는 이유?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%82%B4-%EB%82%98%EB%A6%84%EC%9D%98-%EA%B2%B0%EB%A1%A0&quot;&gt;내 나름의 결론&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;메소드-내의-python-descriptor와-함수&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A9%94%EC%86%8C%EB%93%9C-%EB%82%B4%EC%9D%98-python-descriptor%EC%99%80-%ED%95%A8%EC%88%98&quot; aria-label=&quot;메소드 내의 python descriptor와 함수 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;메소드 내의 python descriptor와 함수&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;python의 메소드란?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;메소드는 ‘object’ 인스턴스에 할당한 첫번째 arg를 가진 정규 함수다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;메소드에 &lt;code class=&quot;language-text&quot;&gt;.&lt;/code&gt; notation을 사용하여 접근하면, 다음 작동을 한다&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;알맞은 함수를 호출한다&lt;/li&gt;
&lt;li&gt;object 인스턴스를 첫번째 파라미터로 전달한다&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;obj.method(*args)&lt;/code&gt;가 &lt;code class=&quot;language-text&quot;&gt;method(obj, *args)&lt;/code&gt;로 호출되는 과정에는 function 오브젝트의 &lt;code class=&quot;language-text&quot;&gt;__get__()&lt;/code&gt; 구현체가 쓰인다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이는 non-data descriptor 라고 부른다(후에 다시 설명될 것임).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;구체적으로 보면, &lt;code class=&quot;language-text&quot;&gt;function&lt;/code&gt; 오브젝트는 &lt;code class=&quot;language-text&quot;&gt;__get__()&lt;/code&gt; 오브젝트를 구현한다. 이는 &lt;code class=&quot;language-text&quot;&gt;.&lt;/code&gt; notation으로 호출할 때 bound method를 리턴한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;다른 전체 아규먼트 호출을 하기위해 함수 호출에 따라오는 (*args) 가 필요하다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;CPython&lt;/code&gt; 구현체를 python 형태로 풀어내면 다음과 같다:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# 참고링크&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# https://docs.python.org/3/howto/descriptor.html#functions-and-methods&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;#&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; types

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;__get__&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; obj&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; objtype&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token string&quot;&gt;&quot;Simulate func_descr_get() in Objects/funcobject.c&quot;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; obj &lt;span class=&quot;token keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; self
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; types&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;MethodType&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; obj&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;함수가 &lt;code class=&quot;language-text&quot;&gt;.&lt;/code&gt; notation 으로 호출되면 &lt;code class=&quot;language-text&quot;&gt;__get__()&lt;/code&gt; 함수가 호출되고 bound method 가 리턴된다.&lt;/p&gt;
&lt;p&gt;이는 일반 인스턴스 메소드 호출에 대해 작동한다. class method나 static method 에 대해서도 마찬가지다.&lt;/p&gt;
&lt;p&gt;static method 를 &lt;code class=&quot;language-text&quot;&gt;obj.method(*args)&lt;/code&gt; 형태로 호출할 때, 이는 자동으로 &lt;code class=&quot;language-text&quot;&gt;method(*args)&lt;/code&gt; 형태로 바뀐다. 비슷하게, class method를 &lt;code class=&quot;language-text&quot;&gt;obj.method(type(obj), *args)&lt;/code&gt; 형태로 호출할 때, 이는 자동으로 &lt;code class=&quot;language-text&quot;&gt;method(type(obj), *args)&lt;/code&gt; 형식으로 변경된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;@classmethod&lt;/code&gt; 와 &lt;code class=&quot;language-text&quot;&gt;@staticmethod&lt;/code&gt; 간의 차이를 알기 위해서는 아래 페이지를 참고한다
&lt;a href=&quot;https://blog.s3ich4n.me/devlog/python/2022-06-09---python-classmethod-and-staticmethod/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Python의 @classmethod&lt;/code&gt; 와 &lt;code class=&quot;language-text&quot;&gt;@&lt;/code&gt;staticmethod 에 대하여&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;static method의 cpython 형태를 python 형식으로 바꿔보면 다음과 같다:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;StaticMethod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;Emulate PyStaticMethod_Type() in Objects/funcobject.c&quot;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; f&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;f &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; f

    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;__get__&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; obj&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; objtype&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;f&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;class method 구현체도 마찬가지:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ClassMethod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;Emulate PyClassMethod_Type() in Objects/funcobject.c&quot;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; f&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;f &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; f

    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;__get__&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; obj&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; klass&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; klass &lt;span class=&quot;token keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            klass &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;newfunc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;f&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;klass&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; newfunc&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;파이썬에서는 class method 는 단순히 class reference를 argument list 의 첫번째 argument로 받는 static method 일 뿐이다.&lt;/p&gt;
&lt;h2 id=&quot;attribute이-lookup-chain을-통해-access-되는-방식&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#attribute%EC%9D%B4-lookup-chain%EC%9D%84-%ED%86%B5%ED%95%B4-access-%EB%90%98%EB%8A%94-%EB%B0%A9%EC%8B%9D&quot; aria-label=&quot;attribute이 lookup chain을 통해 access 되는 방식 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Attribute이 lookup chain을 통해 access 되는 방식&lt;/h2&gt;
&lt;p&gt;파이썬의 descriptor와 내부 방식을 알기위해선 attribute에 access할 때 일어나는 일을 알아야 한다.&lt;/p&gt;
&lt;p&gt;파이썬에서 모든 객체는 build-in &lt;code class=&quot;language-text&quot;&gt;__dict__&lt;/code&gt; 객체 안에 담겨있다. 이는 객체 자체가 선언한 모든 객체를 담는 딕셔너리다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Vehicle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    can_fly &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;False&lt;/span&gt;
    number_of_weels &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Vehicle&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    number_of_weels &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; color&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;color &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; color

my_car &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Car&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;red&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;my_car&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;__dict__&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;token comment&quot;&gt;# 해당 클래스 인스턴스의 __dict__ 값&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;my_car&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;__dict__&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;token comment&quot;&gt;# Car 클래스의 __dict__ 값&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;파이썬에서 모든 값은 ‘객체’ 다. 클래스도 마찬가지로 객체이며, &lt;code class=&quot;language-text&quot;&gt;__dict__&lt;/code&gt; attribute을 가지고있다. 그 값은 모든 attribute과 method 를 가지고 있다.&lt;/p&gt;
&lt;p&gt;내부 객체에 실제로 접근할때는 어떤식으로 접근하는걸까? 아래 코드를 예시로 들어보자&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# lookup.py&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Vehicle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    can_fly &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;False&lt;/span&gt;
    number_of_wheels &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Vehicle&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    number_of_wheels &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; color&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;color &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; color

my_car &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Car&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;red&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;my_car&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;color&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;my_car&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;number_of_wheels&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;my_car&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;can_fly&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;결과야 쉽게 알 수 있을 것이다.&lt;/p&gt;
&lt;p&gt;내부적으로는 &lt;code class=&quot;language-text&quot;&gt;my_car&lt;/code&gt; 변수의 &lt;code class=&quot;language-text&quot;&gt;color&lt;/code&gt; 를 찾을 때, &lt;code class=&quot;language-text&quot;&gt;my_car&lt;/code&gt; 의 &lt;code class=&quot;language-text&quot;&gt;__dict__&lt;/code&gt; 객체 내부에서 ‘하나의’ 값을 찾는다. &lt;code class=&quot;language-text&quot;&gt;number_of_wheels&lt;/code&gt; 에 접근할 떄는 &lt;code class=&quot;language-text&quot;&gt;Car&lt;/code&gt; 객체의 &lt;code class=&quot;language-text&quot;&gt;__dict__&lt;/code&gt; 에서 찾는 것이다. &lt;code class=&quot;language-text&quot;&gt;can_fly&lt;/code&gt; 값은 &lt;code class=&quot;language-text&quot;&gt;Vehicle&lt;/code&gt; 객체의 &lt;code class=&quot;language-text&quot;&gt;__dict__&lt;/code&gt; 를 찾는 것이다.&lt;/p&gt;
&lt;p&gt;그러니까 실제로는 이렇다 이말임&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# lookup2.py&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Vehicle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    can_fly &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;False&lt;/span&gt;
    number_of_weels &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Vehicle&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    number_of_weels &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; color&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;color &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; color

my_car &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Car&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;red&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;my_car&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;__dict__&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;color&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;my_car&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;__dict__&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;number_of_weels&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;my_car&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;__base__&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;__dict__&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;can_fly&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;lookup chain 이 작동하는 방식을 풀면 다음과 같다:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;찾는 이름의 attribute가 가진 &lt;strong&gt;data descriptor&lt;/strong&gt;의 &lt;code class=&quot;language-text&quot;&gt;__get__&lt;/code&gt; 메소드로 결과를 얻는다.&lt;/li&gt;
&lt;li&gt;그게 잘 안되면, 찾는 이름의 attribute가 가진 object의 &lt;code class=&quot;language-text&quot;&gt;__dict__&lt;/code&gt; 키값으로 값을 구한다.&lt;/li&gt;
&lt;li&gt;그게 잘 안되면, 찾는 이름의 attribute가 가진 &lt;strong&gt;non data descriptor&lt;/strong&gt;의 &lt;code class=&quot;language-text&quot;&gt;__get__&lt;/code&gt; 메소드로 결과를 얻는다.&lt;/li&gt;
&lt;li&gt;그게 잘 안되면, 찾는 이름의 attribute가 가진 object type의 &lt;code class=&quot;language-text&quot;&gt;__dict__&lt;/code&gt; 키값으로 값을 구한다.&lt;/li&gt;
&lt;li&gt;그게 잘 안되면, 찾는 이름의 attribute가 가진 object 부모 type의 &lt;code class=&quot;language-text&quot;&gt;__dict__&lt;/code&gt; 키값으로 값을 구한다.&lt;/li&gt;
&lt;li&gt;그게 잘 안되면, 위의 과정을 모든 부모의 type 에 대해 객체의 &lt;a href=&quot;https://data-flair.training/blogs/python-multiple-inheritance/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;MRO&lt;/a&gt; 대로 반복한다.&lt;/li&gt;
&lt;li&gt;그러고도 안되면 &lt;code class=&quot;language-text&quot;&gt;AttributeError&lt;/code&gt; Exception이 발생한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;파이썬의-디스크립터를-제대로-쓰려면&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%98-%EB%94%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%84%B0%EB%A5%BC-%EC%A0%9C%EB%8C%80%EB%A1%9C-%EC%93%B0%EB%A0%A4%EB%A9%B4&quot; aria-label=&quot;파이썬의 디스크립터를 제대로 쓰려면 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;파이썬의 디스크립터를 제대로 쓰려면?&lt;/h2&gt;
&lt;p&gt;descriptor 프로토콜(비-데이터 디스크립터)은, 객체 안에 다음 함수를 구현하면 된다:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;def __get__(self, obj, type=None) -&gt; object&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;def __set__(self, obj, value) -&gt; None&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;디스크립터를 구현할 때, 다음 요소를 잘 기억해두어야 한다:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;self&lt;/code&gt; 값은 디스크립터 인스턴스이다&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;obj&lt;/code&gt; 값은 디스크립터가 attach 하는 인스턴스이다&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;type&lt;/code&gt; 값은 디스크립터가 atttach 하는 타입이다&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;__set__()&lt;/code&gt; 에는 &lt;code class=&quot;language-text&quot;&gt;type&lt;/code&gt; &lt;a href=&quot;https://realpython.com/python-variables/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;변수&lt;/a&gt;를 가지고 있지 않아도 된다. 왜냐면 객체에서만 &lt;code class=&quot;language-text&quot;&gt;__set__()&lt;/code&gt; 함수를 호출할 수 있기 때문이다. 반면, &lt;code class=&quot;language-text&quot;&gt;__get__()&lt;/code&gt; 함수는 객체와 클래스 모두 호출할 수 있다.&lt;/p&gt;
&lt;p&gt;다른 중요한점. 파이썬의 디스크립터는 클래스별로 ‘딱 한번’ 초기화된다는 점이다. 이는, 디스크립터를 포함하는 모든 클래스 인스턴스는 디스크립터 인스턴스를 공유한다는 것이다. 이점은 자칫 잘못하면 아래의 실수를 할 수 있다는 점이다:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# descriptors2.py&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OneDigitNumericValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;__get__&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; obj&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;__set__&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; obj&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; value &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;or&lt;/span&gt; value &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;raise&lt;/span&gt; AttributeError&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;The value is invalid&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; value

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    number &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; OneDigitNumericValue&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

my_foo_object &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Foo&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
my_second_foo_object &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Foo&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

my_foo_object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;number &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;my_foo_object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;number&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;my_second_foo_object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;number&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

my_third_foo_object &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Foo&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;my_third_foo_object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;number&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Foo&lt;/code&gt; 클래스는 number attribute를 가지고있고 이는 디스크립터다. 이 디스크립터는 정수값을 받고, 디스크립터의 속성으로 저장한다.&lt;/p&gt;
&lt;p&gt;그런데 뜻대로 되지않을텐데, 이유는 모든 &lt;code class=&quot;language-text&quot;&gt;Foo&lt;/code&gt; 인스턴스가 디스크립터 인스턴스를 공유하기 때문이다.&lt;/p&gt;
&lt;p&gt;결국 만든 것은 새로운 클래스 수준의 attribute 일 뿐이다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;my_foo_object.number&lt;/code&gt; 속성이 설정된 후 마지막 인스턴스가 생성 되었음에도 불구하고 Foo의 모든 인스턴스가 속성 번호에 대해 동일한 값을 가지고 있음을 알 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;my_foo_object.number&lt;/code&gt; attribute이 설정된 후 마지막 인스턴스가 생성 되었음에도 불구하고 모든 &lt;code class=&quot;language-text&quot;&gt;Foo&lt;/code&gt; 인스턴스가 동일한 &lt;code class=&quot;language-text&quot;&gt;number&lt;/code&gt; 값이 있음을 볼 수 있다.&lt;/p&gt;
&lt;p&gt;연결된 모든 객체에 대한 디스크립터의 모든 값을 저장하기 위해 딕셔너리를 쓰는게 낫겠다 싶다. 거기에다가 &lt;code class=&quot;language-text&quot;&gt;__get__&lt;/code&gt; 해서 값 두고 &lt;code class=&quot;language-text&quot;&gt;__set__&lt;/code&gt; 하면 되겠다 싶은데, 치명적인 단점이 있다.&lt;/p&gt;
&lt;p&gt;아래는 그 예시:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# descriptors3.py&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OneDigitNumericValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;__get__&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; obj&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;except&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;__set__&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; obj&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; value &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;or&lt;/span&gt; value &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;raise&lt;/span&gt; AttributeError&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;The value is invalid&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; value

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    number &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; OneDigitNumericValue&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

my_foo_object &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Foo&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
my_second_foo_object &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Foo&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

my_foo_object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;number &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;my_foo_object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;number&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;my_second_foo_object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;number&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

my_third_foo_object &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Foo&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;my_third_foo_object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;number&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;값은 원하는대로 갖고있는데 단점이 있다. 이는, 디스크립터가 오너 오브젝트에 대한 strong reference를 갖고있다는 점이다.&lt;/p&gt;
&lt;p&gt;객체를 destroy해도 메모리가 release되지 않는다. 이는 &lt;a href=&quot;https://realpython.com/python-memory-management/#garbage-collection&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;gc&lt;/a&gt;가 객체안의 디스크립터에 대한 객체를 계속 찾기 때문이다.&lt;/p&gt;
&lt;p&gt;이러면… weak reference를 하면 되겠다 싶다. 그럴 수도 있지만 모든 값이 weak reference로 참조될 수 있는 것은 아니며, 객체가 (gc에 의해) 수집되면 딕셔너리에서 사라진다는 사실을 처리해야 한다.&lt;/p&gt;
&lt;p&gt;괜찮은 해결책은, 디스크립터 자체에 값을 두는게 아니라, 디스크립터가 붙는 &lt;strong&gt;객체&lt;/strong&gt;에 저장하면 될 것이다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# descriptors4.py&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OneDigitNumericValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name

    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;__get__&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; obj&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; obj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;__dict__&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;get&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;__set__&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; obj&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        obj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;__dict__&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; value

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    number &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; OneDigitNumericValue&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;number&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

my_foo_object &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Foo&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
my_second_foo_object &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Foo&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

my_foo_object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;number &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;my_foo_object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;number&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;my_second_foo_object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;number&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

my_third_foo_object &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Foo&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;my_third_foo_object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;number&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;다 잘되는데 단점이 있다. 초기화를 할 때 항상 이런식으로 선언을 해줘야 한다는 점이다:&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;number = OneDigitNumericValue(&quot;number&quot;)&lt;/code&gt; ← “number” 라는 값을 기입해줘야 함&lt;/p&gt;
&lt;p&gt;파이썬 3.6부터는 &lt;code class=&quot;language-text&quot;&gt;.__set_name__()&lt;/code&gt; 이라는 걸출한게 &lt;a href=&quot;https://www.python.org/dev/peps/pep-0487/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;PEP 487&lt;/a&gt;에 제안되었고, 정식 기능으로 생겼다.&lt;/p&gt;
&lt;p&gt;그 아래에는 메타클래스와 데코레이터로 할 수 있다. (사실 메타클래스는 제대로 쓰기에 너무 복잡해서, 필요하면 다시 공부하도록 하자…)&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;__set_name__(self, owner, name)&lt;/code&gt; 을 사용한 예시코드는 아래와 같다:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# descriptors5.py&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OneDigitNumericValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;__set_name__&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; owner&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name

    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;__get__&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; obj&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; obj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;__dict__&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;get&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;__set__&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; obj&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        obj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;__dict__&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; value

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    number &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; OneDigitNumericValue&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

my_foo_object &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Foo&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
my_second_foo_object &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Foo&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

my_foo_object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;number &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;my_foo_object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;number&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;my_second_foo_object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;number&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

my_third_foo_object &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Foo&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;my_third_foo_object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;number&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;예상한대로 잘 됐고, &lt;code class=&quot;language-text&quot;&gt;__init__()&lt;/code&gt; 도 없다.&lt;/p&gt;
&lt;h2 id=&quot;디스크립터를-쓰는-이유&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%94%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%84%B0%EB%A5%BC-%EC%93%B0%EB%8A%94-%EC%9D%B4%EC%9C%A0&quot; aria-label=&quot;디스크립터를 쓰는 이유 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;디스크립터를 쓰는 이유?&lt;/h2&gt;
&lt;p&gt;API 작성같이 고수준의 로직을 풀거나 하는 케이스에서는 디스크립터를 쓸 일이 없다. 일반적인 유스케이스 보다 아래 케이스에서 사용을 고려할 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lazy properties (for &lt;strong&gt;non-data descriptor&lt;/strong&gt;)
&lt;ul&gt;
&lt;li&gt;이것은 최초로 액세스 하기 전까지에는 initial value가 로드되지 않는다는 것&lt;/li&gt;
&lt;li&gt;그 후에는 initial value를 로드하고 나중의 사용을 위해 값이 캐시된다는 것&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;DeepThought&lt;/code&gt; 라는 클래스가 &lt;code class=&quot;language-text&quot;&gt;meaning_of_life()&lt;/code&gt; 라는 함수를 갖고있다고 치자. 이 함수는 3초쯤 쉬고 해답을 주는 함수다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# slow_properties.py&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; time

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;DeepThought&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;meaning_of_life&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        time&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sleep&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt;

my_deep_thought_instance &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; DeepThought&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;my_deep_thought_instance&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;meaning_of_life&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;my_deep_thought_instance&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;meaning_of_life&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;my_deep_thought_instance&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;meaning_of_life&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;셋다 구동하려고 3초씩 매번 쉰다. 해답은 똑같은데 말이지. lazy property는 그 대신 이 메소드의 최초 실행시 연산 후 결과값을 캐싱한다. 디스크립터를 쓰면 이런 해답이 나온다:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# lazy_properties.py&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; time

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;LazyProperty&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; function&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;function &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; function
        self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; function&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;__name__

    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;__get__&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; obj&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        obj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;__dict__&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;function&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; obj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;__dict__&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;DeepThought&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token decorator annotation punctuation&quot;&gt;@LazyProperty&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;meaning_of_life&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        time&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sleep&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt;

my_deep_thought_instance &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; DeepThought&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;my_deep_thought_instance&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;meaning_of_life&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;my_deep_thought_instance&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;meaning_of_life&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;my_deep_thought_instance&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;meaning_of_life&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;DeepThought&lt;/code&gt; 를 선언하면서 &lt;code class=&quot;language-text&quot;&gt;@LazyProperty&lt;/code&gt; 를 타고간다.
&lt;ol&gt;
&lt;li&gt;&lt;del&gt;데코레이터니까&lt;/del&gt; non-data 디스크립터를 먼저 선언한다. &lt;code class=&quot;language-text&quot;&gt;__init__&lt;/code&gt; 하면서 function 값을 읽어와서 넣고, name도 마찬가지로 넣는다
&lt;ol&gt;
&lt;li&gt;function에는 함수의 주소값이 담긴다&lt;/li&gt;
&lt;li&gt;name에는 함수의 이름이 담긴다&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;DeepThought&lt;/code&gt; 를 초기화한다&lt;/li&gt;
&lt;li&gt;meaning_of_life를 호출하면 &lt;code class=&quot;language-text&quot;&gt;LazyProperty&lt;/code&gt;의 &lt;code class=&quot;language-text&quot;&gt;__get__&lt;/code&gt; 이 실행된다. 디스크립터가 붙는 객체에 함수 이름을 넣는다.
&lt;ol&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;self.function(obj)&lt;/code&gt; 를 실행하면서 &lt;code class=&quot;language-text&quot;&gt;meaning_of_life&lt;/code&gt; 함수를 구동한다.
&lt;code class=&quot;language-text&quot;&gt;obj&lt;/code&gt; 값은 &lt;code class=&quot;language-text&quot;&gt;DeepThought&lt;/code&gt; 값이다
그 결과는 &lt;code class=&quot;language-text&quot;&gt;obj.__dict__[self.name]&lt;/code&gt; 에 담긴다.&lt;/li&gt;
&lt;li&gt;그 결과를 &lt;code class=&quot;language-text&quot;&gt;self.__name__&lt;/code&gt; 에 저장한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;나머지는 실행할 때마다 동일한 값을 공유한다.
&lt;ol&gt;
&lt;li&gt;이 때 파이썬은 &lt;code class=&quot;language-text&quot;&gt;lookup chain&lt;/code&gt; 을 사용하여, &lt;code class=&quot;language-text&quot;&gt;__dict__&lt;/code&gt; 내의 attribute 값을 찾는다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# wrong_lazy_properties.py&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; time

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;LazyProperty&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; function&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;function &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; function
        self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; function&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;__name__

    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;__get__&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; obj&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        obj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;__dict__&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;function&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; obj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;__dict__&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;__set__&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; obj&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;pass&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;DeepThought&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token decorator annotation punctuation&quot;&gt;@LazyProperty&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;meaning_of_life&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        time&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sleep&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt;

my_deep_thought_instance &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; DeepThought&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;my_deep_thought_instance&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;meaning_of_life&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;my_deep_thought_instance&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;meaning_of_life&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;my_deep_thought_instance&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;meaning_of_life&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;다만 &lt;strong&gt;data descriptor&lt;/strong&gt; 에선 작동하지 않는다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DRY 한 코드&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이런류의 코드에 대해서는 DRY 해진다. 아래는 data descriptor를 안 쓴 예시&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# properties.py&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Values&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_value1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
        self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_value2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
        self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_value3 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
        self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_value4 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
        self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_value5 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;

    &lt;span class=&quot;token decorator annotation punctuation&quot;&gt;@property&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;value1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_value1

    &lt;span class=&quot;token decorator annotation punctuation&quot;&gt;@value1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;setter&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;value1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_value1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; value &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; value &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;

    &lt;span class=&quot;token decorator annotation punctuation&quot;&gt;@property&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;value2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_value2

    &lt;span class=&quot;token decorator annotation punctuation&quot;&gt;@value2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;setter&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;value2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_value2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; value &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; value &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;

    &lt;span class=&quot;token decorator annotation punctuation&quot;&gt;@property&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;value3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_value3

    &lt;span class=&quot;token decorator annotation punctuation&quot;&gt;@value3&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;setter&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;value3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_value3 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; value &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; value &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;

    &lt;span class=&quot;token decorator annotation punctuation&quot;&gt;@property&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;value4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_value4

    &lt;span class=&quot;token decorator annotation punctuation&quot;&gt;@value4&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;setter&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;value4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_value4 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; value &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; value &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;

    &lt;span class=&quot;token decorator annotation punctuation&quot;&gt;@property&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;value5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_value5

    &lt;span class=&quot;token decorator annotation punctuation&quot;&gt;@value5&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;setter&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;value5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_value5 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; value &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; value &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;

my_values &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Values&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
my_values&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
my_values&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;my_values&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;my_values&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이걸 디스크립터로는 다음과 같이 줄일 수 있다:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# properties2.py&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;EvenNumber&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;__set_name__&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; owner&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name

    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;__get__&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; obj&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; obj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;__dict__&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;get&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;__set__&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; obj&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        obj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;__dict__&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; value &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Values&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    value1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; EvenNumber&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    value2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; EvenNumber&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    value3 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; EvenNumber&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    value4 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; EvenNumber&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    value5 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; EvenNumber&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

my_values &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Values&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
my_values&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
my_values&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;my_values&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;my_values&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;내-나름의-결론&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%82%B4-%EB%82%98%EB%A6%84%EC%9D%98-%EA%B2%B0%EB%A1%A0&quot; aria-label=&quot;내 나름의 결론 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;내 나름의 결론&lt;/h2&gt;
&lt;p&gt;이거… 제대로 쓰려면 상위 클래스에서 쓰고, 하위 클래스에서는 상속을 받고 써먹어야 하는 것 같다..&lt;/p&gt;
&lt;p&gt;코드가 dry 해지고, lazy properties 의 특징을 가지기야 한다만… 필요할 때 제대로 쓰자. 왜냐하면 평소엔 필요없을 것이기 때문이다.&lt;/p&gt;
&lt;p&gt;따라서, 좋은 라이브러리의 코드를 이해하고 타고들어갈 때, 혹은 저수준의 라이브러리/파이썬 스러운 인터페이스 설계 시에는 쓸 수 있으니 얼마든지 이런 방향을 알고는 있어야할 것이다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA["@classmethod" 와 "@staticmethod"에 대해]]></title><description><![CDATA[Python의 "@classmethod" 와 "@staticmethod"에 대해]]></description><link>https://blog.s3ich4n.me/devlog/python/2022-06-09-python-classmethod-and-staticmethod</link><guid isPermaLink="false">https://blog.s3ich4n.me/devlog/python/2022-06-09-python-classmethod-and-staticmethod</guid><pubDate>Thu, 09 Jun 2022 10:30:00 GMT</pubDate><content:encoded>&lt;p&gt;본 페이지에서는 Python의 &lt;code class=&quot;language-text&quot;&gt;@classmethod&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;@staticmethod&lt;/code&gt; 에 대한 차이와 실제 예시를 통해 어떤식의 차이가 있는지 기술한다.&lt;/p&gt;
&lt;h2 id=&quot;classmethod-란&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#classmethod-%EB%9E%80&quot; aria-label=&quot;classmethod 란 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code class=&quot;language-text&quot;&gt;@classmethod&lt;/code&gt; 란?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;클래스에 바인딩된 메소드를 의미한다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;self&lt;/code&gt; 대신, &lt;code class=&quot;language-text&quot;&gt;cls&lt;/code&gt; 변수를 메소드 앞에 추가한다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;@classmethod&lt;/code&gt; 를 상속받은 자식 클래스에서는, 자식 클래스의 property 를 가리킨다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;staticmethod-란&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#staticmethod-%EB%9E%80&quot; aria-label=&quot;staticmethod 란 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code class=&quot;language-text&quot;&gt;@staticmethod&lt;/code&gt; 란?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;정적 메소드 개체는 일반적으로 사용자 정의 메소드 개체와 같은 다른 개체를 감싸는 래퍼다.&lt;/li&gt;
&lt;li&gt;정적 메소드 개체가 클래스 또는 클래스 인스턴스에서 검색될 때 실제로 반환된 개체는 더 이상 변형되지 않는 래핑된 개체이다.&lt;/li&gt;
&lt;li&gt;정적 메소드 개체는 일반적으로 래핑하는 개체가 있지만 자체적으로 호출할 수 없다.&lt;/li&gt;
&lt;li&gt;특정 객체 내에서, 로직으로 연결된 처리를 위해 작성하는 메소드를 의미한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;실제-예시&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8B%A4%EC%A0%9C-%EC%98%88%EC%8B%9C&quot; aria-label=&quot;실제 예시 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;실제 예시&lt;/h2&gt;
&lt;h3 id=&quot;classmethod-예시&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#classmethod-%EC%98%88%EC%8B%9C&quot; aria-label=&quot;classmethod 예시 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code class=&quot;language-text&quot;&gt;@classmethod&lt;/code&gt; 예시&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;공통적으로 상속받은 클래스들이 자신의 객체정보를 연산하기 위하여 처리한 예시값이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TypeBase&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;BaseModel&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token triple-quoted-string string&quot;&gt;&quot;&quot;&quot; TypeBase는 모든 이벤트 클래스가 상속하는 클래스
    Pydantic을 통해, 필요 기능들을 사용할 수 있도록 작업하였다.
    &quot;&quot;&quot;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token builtin&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;__init__&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;# (중략)&lt;/span&gt;

    &lt;span class=&quot;token decorator annotation punctuation&quot;&gt;@classmethod&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;get_types&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cls&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token triple-quoted-string string&quot;&gt;&quot;&quot;&quot; 이벤트 클래스의 모든 필드에 대해 {변수명: 타입} 으로 리턴한다.
        &quot;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            field&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; field&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type_ &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; field &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; cls&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;__fields__&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;values&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token decorator annotation punctuation&quot;&gt;@classmethod&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;get_searchables&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cls&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token triple-quoted-string string&quot;&gt;&quot;&quot;&quot; 검색 가능한 필드에 대해 {변수명: 타입} 으로 리턴한다.
        &quot;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            idx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; idx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type_ &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; idx &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;field &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; field &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; cls&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;__fields__&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;values&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;
              field&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; cls&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;searchables&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token decorator annotation punctuation&quot;&gt;@classmethod&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;get_result_fields&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cls&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token triple-quoted-string string&quot;&gt;&quot;&quot;&quot; 리턴값으로 제공가능한 필드에 대해 {변수명: 타입} 으로 리턴한다.
        &quot;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            idx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; idx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type_ &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; idx &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;field &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; field &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; cls&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;__fields__&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;values&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;
              field&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; cls&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;results&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;이런 식으로, &lt;code class=&quot;language-text&quot;&gt;TypeBase&lt;/code&gt; 클래스를 상속받는 하위 객체에서 다음과 같이 사용할 수 있다.
&lt;ol&gt;
&lt;li&gt;상속받는 하위 객체에서, 메타클래스로 &lt;code class=&quot;language-text&quot;&gt;searchables&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;results&lt;/code&gt; 라는 필드값을 지정한다.&lt;/li&gt;
&lt;li&gt;해당 값에 대한 dictionary comprehension을 사용하여, &lt;code class=&quot;language-text&quot;&gt;{변수명:타입}&lt;/code&gt; 형식을 제공할 수 있게 된다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;staticmethod-예시&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#staticmethod-%EC%98%88%EC%8B%9C&quot; aria-label=&quot;staticmethod 예시 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;code class=&quot;language-text&quot;&gt;@staticmethod&lt;/code&gt; 예시&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;특정 메소드의 연산 등, 필요한 값들에 대해 바로 연산하는 용도로 사용할 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;    &lt;span class=&quot;token decorator annotation punctuation&quot;&gt;@staticmethod&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;parse_bool_envbars&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; value &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;true&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;True&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;1&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;True&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;False&lt;/span&gt;

    &lt;span class=&quot;token decorator annotation punctuation&quot;&gt;@staticmethod&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;parse_list_envbars&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; value
        &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;split&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;,&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이런 식으로, 특정 메소드 내의 일부 값을 받은 후 즉시 필요한 값을 전달하는 용도로 사용한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[시작부터 배포까지: 도커 패키징의 베스트케이스]]></title><description><![CDATA[PyCon US 2021 발표영상 중, 파이썬 도커 이미지를 만드는 좋은 방법에 대한 동영상을 번역해봤습니다.]]></description><link>https://blog.s3ich4n.me/devlog/docker/2021-09-18-how-to-make-docker-image-securely</link><guid isPermaLink="false">https://blog.s3ich4n.me/devlog/docker/2021-09-18-how-to-make-docker-image-securely</guid><pubDate>Sat, 18 Sep 2021 19:00:00 GMT</pubDate><content:encoded>&lt;p&gt;이 글은 &lt;a href=&quot;https://www.youtube.com/watch?v=EC0CSevbt9k&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;0 to production-ready: a best-practices process for Docker packaging&lt;/a&gt; 을 읽고 제 나름 번역해본 글입니다. 도움이 되길 바랍니다.&lt;/p&gt;
&lt;h1 id=&quot;목차&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%AA%A9%EC%B0%A8&quot; aria-label=&quot;목차 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;목차&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-%EC%9D%BC%EB%8B%A8-%EB%8F%8C%EB%A6%AC%EC%9E%90&quot;&gt;일단 돌도록 만든다&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-%EB%B3%B4%EC%95%88%EC%9D%84-%EA%B3%A0%EB%A0%A4%ED%95%98%EC%9E%90&quot;&gt;보안적 측면을 고려한다&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-%EC%9E%90%EB%8F%99%ED%99%94%EB%90%9C-%EB%B9%8C%EB%93%9Cci&quot;&gt;CI를 돌린다&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4-%EC%A0%95%EC%83%81%EC%9E%91%EB%8F%99-%EB%B0%8F-%EB%94%94%EB%B2%84%EA%B9%85-%EA%B0%80%EB%8A%A5%ED%95%98%EB%8F%84%EB%A1%9D&quot;&gt;정상작동 및 디버깅가능하게 만든다&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#5-%EC%9E%AC%EC%83%9D%EC%82%B0%EC%84%B1&quot;&gt;재생산가능한 빌드를 한다&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#6-%EB%B9%8C%EB%93%9C%EB%A5%BC-%EB%8D%94-%EB%B9%A0%EB%A5%B4%EA%B2%8C-%EC%82%AC%EC%9D%B4%EC%A6%88%EB%8A%94-%EB%8D%94-%EC%9E%91%EA%B2%8C&quot;&gt;빌드를 더 빠르게 하고 이미지를 작게 만든다&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%81%9D%EC%9C%BC%EB%A1%9C&quot;&gt;끝으로…&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%82%AC%EC%A1%B1-%EC%B6%94%EA%B0%80%EB%A1%9C&quot;&gt;(사족) 추가로…&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;1-일단-돌리자&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EC%9D%BC%EB%8B%A8-%EB%8F%8C%EB%A6%AC%EC%9E%90&quot; aria-label=&quot;1 일단 돌리자 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 일단 돌리자&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;docker&quot;&gt;&lt;pre class=&quot;language-docker&quot;&gt;&lt;code class=&quot;language-docker&quot;&gt;&lt;span class=&quot;token instruction&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; python:3.9-slim-buster&lt;/span&gt;
&lt;span class=&quot;token instruction&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;COPY&lt;/span&gt; . .&lt;/span&gt;
&lt;span class=&quot;token instruction&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;RUN&lt;/span&gt; pip install .&lt;/span&gt;
&lt;span class=&quot;token instruction&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;ENTRYPOINT&lt;/span&gt; [&lt;span class=&quot;token string&quot;&gt;&quot;./run-server.sh&quot;&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이러면 일단 돌아는 감&lt;/p&gt;
&lt;h2 id=&quot;2-보안을-고려하자&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%EB%B3%B4%EC%95%88%EC%9D%84-%EA%B3%A0%EB%A0%A4%ED%95%98%EC%9E%90&quot; aria-label=&quot;2 보안을 고려하자 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 보안을 고려하자&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;root&lt;/code&gt; 로 구동하지 말자!&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;public에 배포하기 전엔 보안을 항시 신경쓰자&lt;/li&gt;
&lt;li&gt;컨테이너가 해야 할 범위를 명확히 정하자
&lt;ul&gt;
&lt;li&gt;자기 실햄범위를 넘기지 않도록 권한을 주자&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;보안 업데이트를 하자!&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;도커 이미지는 이뮤터블 아티팩트다. 보안 업데이트는 곧 신규 이미지 배포를 의미한다.
&lt;ol&gt;
&lt;li&gt;보안 업데이트와 관련된 디펜던시를 이해한다
&lt;ol&gt;
&lt;li&gt;정확히 뭐가 문제인가?
&lt;ol&gt;
&lt;li&gt;환경변수 수정같은걸로도 안되는 심각한 사안인가?&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;이미지 업데이트&lt;/li&gt;
&lt;li&gt;이미지 리빌드&lt;/li&gt;
&lt;li&gt;앱 재배포&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;docker&quot;&gt;&lt;pre class=&quot;language-docker&quot;&gt;&lt;code class=&quot;language-docker&quot;&gt;&lt;span class=&quot;token instruction&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; python:3.8-slim-buster&lt;/span&gt;
&lt;span class=&quot;token instruction&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;RUN&lt;/span&gt; useradd --create-home appuser&lt;/span&gt;
&lt;span class=&quot;token instruction&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;USER&lt;/span&gt; appuser&lt;/span&gt;

&lt;span class=&quot;token instruction&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;WORKDIR&lt;/span&gt; /home/appuser&lt;/span&gt;
&lt;span class=&quot;token instruction&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;COPY&lt;/span&gt; . .&lt;/span&gt;
&lt;span class=&quot;token instruction&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;RUN&lt;/span&gt; pip install --user .&lt;/span&gt;
&lt;span class=&quot;token instruction&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;ENTRYPOINT&lt;/span&gt; [&lt;span class=&quot;token string&quot;&gt;&quot;./run-server.sh&quot;&lt;/span&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;3-자동화된-빌드ci&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%EC%9E%90%EB%8F%99%ED%99%94%EB%90%9C-%EB%B9%8C%EB%93%9Cci&quot; aria-label=&quot;3 자동화된 빌드ci permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. 자동화된 빌드/CI&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;이미지를 &lt;strong&gt;매번, 손으로&lt;/strong&gt; 빌드하고 싶지 않을거다.&lt;/li&gt;
&lt;li&gt;다른 팀원들도 이미지를 빌드하기 쉽도록 하고싶을거다.
&lt;ul&gt;
&lt;li&gt;빌드, CI 시스템과 통합하여 배포하라!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token shebang important&quot;&gt;#!/usr/bin/env bash&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# Ver 1.&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;#   브랜치 안 가리고 작업&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;#&lt;/span&gt;

&lt;span class=&quot;token builtin class-name&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-euxo&lt;/span&gt; pipefail

test.py
&lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; build &lt;span class=&quot;token parameter variable&quot;&gt;-t&lt;/span&gt; my_image:latest &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;# 혹은 이 과정조차 스크립트로&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; push my_image:latest        &lt;span class=&quot;token comment&quot;&gt;# 이것도 마찬가지&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;참고)
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;[set -euxo pipefail&lt;/code&gt; 이 뭔데?](&lt;a href=&quot;https://zetawiki.com/wiki/%EB%A6%AC%EB%88%85%EC%8A%A4_set_-euxo_pipefail&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://zetawiki.com/wiki/%EB%A6%AC%EB%88%85%EC%8A%A4_set_-euxo_pipefail&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;개발 프로세스에 접목시킨다
&lt;ul&gt;
&lt;li&gt;회사 내 프로세스와 잘 맞아 떨어지는지 알아봐야함&lt;/li&gt;
&lt;li&gt;질문사항
&lt;ul&gt;
&lt;li&gt;패키징 전에 테스트하나? 후에 하나? 둘 다 하나?&lt;/li&gt;
&lt;li&gt;브랜치는 어떻게 관리하나?&lt;/li&gt;
&lt;li&gt;패키징이 개발자에게 있어 &lt;em&gt;병목(bottleneck)&lt;/em&gt; 인가?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token shebang important&quot;&gt;#!/usr/bin/env bash&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# Ver 2.&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;#   브랜치 이름을 기반으로, 태그를 붙여 배포하는 스크립트&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;#&lt;/span&gt;

&lt;span class=&quot;token builtin class-name&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-euxo&lt;/span&gt; pipefail

&lt;span class=&quot;token assign-left variable&quot;&gt;GIT_BRANCH&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; rev-parse --abbrev-ref HEAD&lt;span class=&quot;token variable&quot;&gt;)&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; build &lt;span class=&quot;token parameter variable&quot;&gt;-t&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;my_image:&lt;span class=&quot;token variable&quot;&gt;$GIT_BRANCH&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; push &lt;span class=&quot;token string&quot;&gt;&quot;my_image:&lt;span class=&quot;token variable&quot;&gt;$GIT_BRANCH&lt;/span&gt;&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;4-정상작동-및-디버깅-가능하도록&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-%EC%A0%95%EC%83%81%EC%9E%91%EB%8F%99-%EB%B0%8F-%EB%94%94%EB%B2%84%EA%B9%85-%EA%B0%80%EB%8A%A5%ED%95%98%EB%8F%84%EB%A1%9D&quot; aria-label=&quot;4 정상작동 및 디버깅 가능하도록 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. 정상작동 및 디버깅 가능하도록…&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;이런 식의 작업은 (당연히)실환경에서 잘 도는걸 기대함… 그리고 에러를 잘 볼 수 있게끔 되기를 바람&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;PYTHONFAULTHANDLER=1&lt;/code&gt; 이라는 옵션을 주면, C 코드내에서의 트레이스백까지 같이 받아볼 수 있게 된다:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;ENV &lt;span class=&quot;token assign-left variable&quot;&gt;PYTHONFAULTHANDLER&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
ENTRYPOINT &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;python&quot;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&quot;program.py&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;참고) &lt;a href=&quot;https://docs.python.org/ko/3/library/faulthandler.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://docs.python.org/ko/3/library/faulthandler.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;조용히&lt;/strong&gt; 죽는 원인파악에 좋다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;matplotlib&lt;/code&gt;의 문제, DB연결 등…&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;예시&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pre-compile bytecode&lt;/li&gt;
&lt;li&gt;파이썬은 빠른 구동을 위해 &lt;code class=&quot;language-text&quot;&gt;pyc&lt;/code&gt; 확장자로 컴파일을 한다.&lt;/li&gt;
&lt;li&gt;이미지에 &lt;code class=&quot;language-text&quot;&gt;.pyc&lt;/code&gt; 파일이 없다면 초기구동이 느려질 수도 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;docker&quot;&gt;&lt;pre class=&quot;language-docker&quot;&gt;&lt;code class=&quot;language-docker&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# (보통은 pip에서 한다) 설치한 코드를 컴파일함&lt;/span&gt;
&lt;span class=&quot;token instruction&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;RUN&lt;/span&gt; python -c &lt;span class=&quot;token string&quot;&gt;&quot;import compileall; \
    compileall.compile_path(maxlevels=10)&quot;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# my_package 디렉토리에 코드를 컴파일한다&lt;/span&gt;
&lt;span class=&quot;token instruction&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;RUN&lt;/span&gt; python -m compileall my_package/&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;이런 기능이 있으니, 필요한지 파악한 후 추가하는 것이 좋다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;5-재생산성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#5-%EC%9E%AC%EC%83%9D%EC%82%B0%EC%84%B1&quot; aria-label=&quot;5 재생산성 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5. 재생산성&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;메이저 디펜던시는 쉽게 바뀌지 않는다. 그런데, 시간이 지나면 지날 수록 업데이트가 필요해진다&lt;/li&gt;
&lt;li&gt;따라서, 재생산가능한 빌드를 하고싶어질 것이다. 이를 통해 통제된 방법으로 업데이트가 가능하다.
&lt;ul&gt;
&lt;li&gt;좋은 베이스 이미지를 선택하자!&lt;/li&gt;
&lt;li&gt;보안업데이트도 해주고 하위호환도 좋은 OS를 고르고 싶을 것임…&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;python:3.9-slim-buster&lt;/code&gt; 는 Debian Buster 슬림버전을 사용함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;매 빌드마다 디펜던시를 업데이트하면 재생산성이 떨어진다.
&lt;ul&gt;
&lt;li&gt;→ 따라서, 디펜던시를 고정시키는 것도 방법.&lt;/li&gt;
&lt;li&gt;아래 도구들 고려하는 것을 추천
&lt;ul&gt;
&lt;li&gt;pip-tools&lt;/li&gt;
&lt;li&gt;pipenv&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/conda-incubator/conda-lock&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;conda-lock&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;poetry (배워두면 아주 요긴할 듯 함. 주요 오픈소스 프로젝트들도 다 사용하고…)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;업데이트를 하지 않는다면? 오래된 디펜던시가 생기고 위험한 업그레이드를 하게된다.
&lt;ul&gt;
&lt;li&gt;→정기적으로(on a regular basis)파이썬 디펜던시 업데이트를 위한 조직적 프로세스가 필요하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;6-빌드를-더-빠르게-사이즈는-더-작게&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#6-%EB%B9%8C%EB%93%9C%EB%A5%BC-%EB%8D%94-%EB%B9%A0%EB%A5%B4%EA%B2%8C-%EC%82%AC%EC%9D%B4%EC%A6%88%EB%8A%94-%EB%8D%94-%EC%9E%91%EA%B2%8C&quot; aria-label=&quot;6 빌드를 더 빠르게 사이즈는 더 작게 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;6. 빌드를 더 빠르게, 사이즈는 더 작게&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;위의 과정을 따르면, 비로소 &lt;em&gt;제대로&lt;/em&gt; 패키지화 한다고 할 수 있다. 그러면 최적화도 고려해야 한다.&lt;/li&gt;
&lt;li&gt;시간은 소중하므로, 빌드에 많은 시간을 버리고 싶지 않을 것이다&lt;/li&gt;
&lt;li&gt;더 작은 이미지일 수록 테스트 구동, 프로덕션 구동을 더 빨리할 수 있다&lt;/li&gt;
&lt;li&gt;Alpine 이미지는 쓰지 말자!
&lt;ul&gt;
&lt;li&gt;현재(2021년 5월 14일, PyCon US 2021 발표시점) 알파인 리눅스는 PyPI의 precompiled wheel을 사용하지 못한다&lt;/li&gt;
&lt;li&gt;그 결과, 모든 라이브러리를 다운받고 직접 컴파일하여 구동해야한다.
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;pandas&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;matplotlib&lt;/code&gt; 을 포함하고 빌드하면 훨씬 오래걸린다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://peps.python.org/pep-0656/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;PEP 656&lt;/a&gt;이 이를 해결할 지도…&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;끝으로&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%81%9D%EC%9C%BC%EB%A1%9C&quot; aria-label=&quot;끝으로 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;끝으로…&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Dockerizing은 단순한 아티팩트 생성만을 말하는건 아니다
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Dockerfile&lt;/code&gt; 자체도 필요하고 빌드 스크립트, 환경 등이 필요하다&lt;/li&gt;
&lt;li&gt;그렇지만 &lt;em&gt;“프로세스”&lt;/em&gt; 또한 필요하다
&lt;ul&gt;
&lt;li&gt;개발환경과의 상호작용
&lt;ul&gt;
&lt;li&gt;버전관리, 테스팅, CI 등..&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;보안 업데이트 프로세스&lt;/li&gt;
&lt;li&gt;디펜던시 업데이트 프로세스&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;사족-추가로&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%82%AC%EC%A1%B1-%EC%B6%94%EA%B0%80%EB%A1%9C&quot; aria-label=&quot;사족 추가로 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;(사족) 추가로?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.docker.com/develop/develop-images/multistage-build/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Docker의 멀티-스테이지 빌드&lt;/a&gt;를 추가해서, 파이썬 빌드같은 스테이지는 따로 빼는게 좋다.
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/cookiecutter/cookiecutter-django&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;django-cookiecutter&lt;/a&gt; 로 만들어진 도커 이미지에 그런 스테이지가 있으므로, 참고하면 어떤 식으로 스테이지를 둘지에 대한 도움을 얻을 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;references&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#references&quot; aria-label=&quot;references permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pythonspeed.com/docker&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://pythonspeed.com/docker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[PyCharm에서 파일 맨 위에 작성하는 주석을 작성하는 매크로 만들기]]></title><description><![CDATA[매일 입력하는 파일 설명(시그니처)을 귀찮지 않게 커맨드 하나로 자동입력되게 하는 방안을 찾았습니다. 회사 팀원들과 주변사람들에게만 공유하기는 아까워서 짧은 글을 써봤습니다.]]></description><link>https://blog.s3ich4n.me/tips/how-to-use-file-signature-in-pycharm</link><guid isPermaLink="false">https://blog.s3ich4n.me/tips/how-to-use-file-signature-in-pycharm</guid><pubDate>Thu, 03 Jun 2021 09:00:00 GMT</pubDate><content:encoded>&lt;p&gt;PyCharm에서 파일 시그니처를 바로 입력하려면?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Live Templates&lt;/code&gt; 기능을 사용하면 보다 손쉽게 사용할 수 있다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;shift 두번 눌러서 액션을 열고 &lt;code class=&quot;language-text&quot;&gt;Live Templates&lt;/code&gt; 를 연다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;add를 하되, 파이썬 파일에서만 쓸거니까 파이썬에서 기능을 혀용하도록 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이런 식으로 시그니처를 작성한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;#
# (코드의 전반적인 내용을 설명해 주세요)
#
# @author      Seongeun Yu (seongeun.yu@somma.kr)
# @date        $DATE$ $TIME$ created.
# @modified    $DATE$ $TIME$ modified.
# @copyright   MIT License
#&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;변수를 저렇게 두면 원하는 함수를 써서 매핑할 수 있다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;$DATE$&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;$TIME$&lt;/code&gt; 값은 함수를 쓰면 된다. 관련 참고링크는 &lt;a href=&quot;https://www.jetbrains.com/help/pycharm/template-variables.html#predefined_functions&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;여기&lt;/a&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;date()&lt;/code&gt; 함수의 파라미터 규격은 자바의 (&lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;SimpleDateFormat&lt;/a&gt;)을 따라간다.&lt;/li&gt;
&lt;li&gt;date, time의 규격은 이렇게 하면 된다.
&lt;ol&gt;
&lt;li&gt;date는? &lt;code class=&quot;language-text&quot;&gt;date(&quot;yyyy/MM/dd&quot;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;time은? &lt;code class=&quot;language-text&quot;&gt;date(&quot;HH:mm&quot;)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;파일을 열 때마다 &lt;code class=&quot;language-text&quot;&gt;sign_s3ich4n&lt;/code&gt; 를 한두글자만 치면 자동완성으로 알아서 완성된다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[pre-commit hook, 나도 한번 써보자 (1)]]></title><description><![CDATA[pre-commit hook 말만 들었지 실제로 써보지 못했는데, 이참에 써보고 팀원들에게 공유하기 위해 글을 씁니다. 제 1탄입니다.]]></description><link>https://blog.s3ich4n.me/tips/2021-07-11-how-to-use-pre-commit-hook-vol1</link><guid isPermaLink="false">https://blog.s3ich4n.me/tips/2021-07-11-how-to-use-pre-commit-hook-vol1</guid><pubDate>Thu, 03 Jun 2021 09:00:00 GMT</pubDate><content:encoded>&lt;p&gt;이 글은 pre-commit hook 을 사용하고 전파하기 위해 작성한 시리즈 글입니다.&lt;/p&gt;
&lt;h2 id=&quot;설치-및-설정하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%84%A4%EC%B9%98-%EB%B0%8F-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0&quot; aria-label=&quot;설치 및 설정하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;설치 및 설정하기&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;작업 환경에 맞게 &lt;a href=&quot;https://pre-commit.com/#installation&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;pre-commit hook을 설치한다&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;pre-commit 환경을 추가한다. 우선은 제대로 따라해보기 위해 예시만 간략히 써보자.&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;추가할 수 있는 훅의 종류는 &lt;a href=&quot;https://pre-commit.com/hooks.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;여기&lt;/a&gt;를 참조한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;yaml&quot;&gt;&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;repos&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;repo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; https&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;//github.com/pre&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;commit/pre&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;commit&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;hooks
    &lt;span class=&quot;token key atrule&quot;&gt;rev&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; v2.3.0
    &lt;span class=&quot;token key atrule&quot;&gt;hooks&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; check&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;yaml
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; end&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;of&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;file&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;fixer
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; trailing&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;whitespace
  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;repo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; https&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;//github.com/psf/black
    &lt;span class=&quot;token key atrule&quot;&gt;rev&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 19.3b0
    &lt;span class=&quot;token key atrule&quot;&gt;hooks&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; black&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;브랜치에 깃 훅 스크립트를 설치한다
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;pre-commit install&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;수동으로 돌려본다
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;pre-commit run --all-files&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;앞으로 매 커밋마다 &lt;code class=&quot;language-text&quot;&gt;pre-commit&lt;/code&gt; 훅이 걸릴 것임. &lt;del&gt;똥같은&lt;/del&gt; 구린 코드를 커밋하면 아래와 같은 수정내역이 뜬다!&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;yaml&quot;&gt;&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;오후 1&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;54	Commit failed with error
        0 file committed&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;5 files failed to commit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;feat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; pre&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;commit hook 추가
        Check Yaml&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;.(no files to check)Skipped
        Fix End of Files&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;Passed
        Trim Trailing Whitespace&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;.Passed
        black&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;..Failed
        &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;hook id&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; black
        &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; files were modified by this hook

        reformatted /home/l4in/garage.object/01_객체&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;설계/01_대충설계한코드/audience.py
        reformatted /home/l4in/garage.object/01_객체&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;설계/01_대충설계한코드/bag.py
        All done&lt;span class=&quot;token tag&quot;&gt;!&lt;/span&gt; ✨ 🍰 ✨
        2 files reformatted&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 3 files left unchanged.

        mypy&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;Failed
        &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;hook id&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; mypy
        &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;exit code&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;

        01_대충설계한코드 is not a valid Python package name&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;제거하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A0%9C%EA%B1%B0%ED%95%98%EA%B8%B0&quot; aria-label=&quot;제거하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;제거하기&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;pre-commit 훅 삭제는 &lt;a href=&quot;https://pre-commit.com/#pre-commit-uninstall&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;다음 링크를 참고&lt;/a&gt;한다&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;차후-해볼것&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%B0%A8%ED%9B%84-%ED%95%B4%EB%B3%BC%EA%B2%83&quot; aria-label=&quot;차후 해볼것 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;차후 해볼것&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pre-commit.com/#usage-in-continuous-integration&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;CI 연동&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;더 없나 찾아보자&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[1년차 회고]]></title><description><![CDATA[2019년 입사부터 약 1년간 어떻게 살아왔는지에 대한 이야기입니다. (노잼)]]></description><link>https://blog.s3ich4n.me/retrospect/2020-05-22-s3ich4n-1-year-retrospect</link><guid isPermaLink="false">https://blog.s3ich4n.me/retrospect/2020-05-22-s3ich4n-1-year-retrospect</guid><pubDate>Fri, 22 May 2020 19:30:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;1년을-돌아보며&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1%EB%85%84%EC%9D%84-%EB%8F%8C%EC%95%84%EB%B3%B4%EB%A9%B0&quot; aria-label=&quot;1년을 돌아보며 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1년을 돌아보며&lt;/h1&gt;
&lt;p&gt;지난 1년간 회사생활을 하며 제가 겪었던 (거의) 모든 일들을 요약하여 회고합니다.&lt;/p&gt;
&lt;h2 id=&quot;목차&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%AA%A9%EC%B0%A8&quot; aria-label=&quot;목차 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;목차&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%88%98%EC%8A%B5%EA%B8%B0%EA%B0%84%EA%B3%BC-3%EA%B0%9C%EC%9B%94-%EA%B0%84&quot;&gt;수습기간과 3개월간&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%B0%B1%EC%97%94%EB%93%9C-%EC%9E%91%EC%97%85%EC%9D%84-%EB%A7%A1%EC%9C%BC%EB%A9%B0&quot;&gt;백엔드 작업을 맡으며&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%96%B4%EB%96%A4-%EC%B1%85%EC%9D%84-%EB%B4%A4%EC%97%88%EB%82%98?&quot;&gt;어떤 책을 봤었나?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EA%B3%BC%EC%97%B0-%EB%82%98%EB%8A%94-%EB%82%98%EC%95%84%EC%A1%8C%EB%82%98&quot;&gt;과연 나는 나아졌나?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%A7%88%EC%B9%98%EB%A9%B0&quot;&gt;마치며&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;수습기간과-3개월-간&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%88%98%EC%8A%B5%EA%B8%B0%EA%B0%84%EA%B3%BC-3%EA%B0%9C%EC%9B%94-%EA%B0%84&quot; aria-label=&quot;수습기간과 3개월 간 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;수습기간과 3개월 간&lt;/h2&gt;
&lt;h3 id=&quot;첫번째-오더와-드러난-큰-단점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%B2%AB%EB%B2%88%EC%A7%B8-%EC%98%A4%EB%8D%94%EC%99%80-%EB%93%9C%EB%9F%AC%EB%82%9C-%ED%81%B0-%EB%8B%A8%EC%A0%90&quot; aria-label=&quot;첫번째 오더와 드러난 큰 단점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;첫번째 오더와 드러난 큰 단점&lt;/h3&gt;
&lt;p&gt;처음 입사를 하고 회사에서 개발중인 에이전트와 백엔드 시스템에 대한 큰 그림을 전달받았습니다. 특히 백엔드 시스템은 크게 어떤 방식으로 관리되며, 필요한 지시사항과 향후 발전과정에 대한 이야기를 들었습니다. 이 때부터 였을까요, 저의 단점이 드러나기 시작했습니다.&lt;/p&gt;
&lt;p&gt;회사에 처음 왔으니 회사에서 사용하는 기술과 처음보는 소스코드 등 모르는 것들이 많았고, 백엔드 시스템이 어떻게 구성되는지를 먼저 파악하기 위해 기술문서들을 계속 읽었습니다. 그러면 자연스럽게 모르는 것이 많이 생기고, 질문하지 않으면 오랜 시간이 걸릴 작업일게 뻔한 것들이 많이 생깁니다. 하지만 &lt;strong&gt;질문 없이&lt;/strong&gt; 스스로 풀려고 했던 실수를 했었지요.&lt;/p&gt;
&lt;h3 id=&quot;lessons-learned&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#lessons-learned&quot; aria-label=&quot;lessons learned permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Lessons learned&lt;/h3&gt;
&lt;p&gt;이를 위해 저는 아래의 것들을 생각하게 되었습니다:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;일의 전체 흐름을 파악합시다.&lt;/li&gt;
&lt;li&gt;이를 통해 해야할 일을 파악해나가며, 스케줄링을 진행합니다(이에 대해선, 대표님께 GTD를 추천받았던 게시글로 후술하려 합니다).&lt;/li&gt;
&lt;li&gt;위의 일을 하면서 모르면 주저하지 말고 정제된 질문을 만든 후 물어봅시다.&lt;/li&gt;
&lt;li&gt;두괄식으로 말합시다. 뉴스에서 아나운서, 리포터들이 말하는 스타일을 생각하면 됩니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;위의 것이 “생산성을 내는 기본기” 로 마음가짐을 두게 되었습니다.&lt;/p&gt;
&lt;p&gt;모르는 것을 정제하지 않고 물어보면 팀원 및 팀장의 귀중한 시간을 뺏는 셈이 됩니다. 하지만, 그것을 두려워하여 필요한 질문을 하지 않는 것 또한 분명 나중의 귀중한 시간을 뺏는 행동입니다. 아울러 질문에 대해 원하는 대답을 주지 않는 것도 마찬가지입니다. 답변을 줄 때도 심사숙고할 필요가 있지요.&lt;/p&gt;
&lt;h2 id=&quot;백엔드-작업을-맡으며&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B0%B1%EC%97%94%EB%93%9C-%EC%9E%91%EC%97%85%EC%9D%84-%EB%A7%A1%EC%9C%BC%EB%A9%B0&quot; aria-label=&quot;백엔드 작업을 맡으며 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;백엔드 작업을 맡으며&lt;/h2&gt;
&lt;p&gt;1년이면 많은 일이 일어날 수 있지요. 제겐 프로그래머라는 직업을 달고 처음 일하는 때였기 때문에 누구보다 많이 긴장했었던 기억이 다시 떠오릅니다.&lt;/p&gt;
&lt;p&gt;그 때는 자사 백엔드가 어떻게 구성되어있고, 앞으로 어떻게 구상해야 할 지를 구상하던 시기였습니다. 기존에 있던 기능을 Django로 이전하거나, KSQL(현재는 &lt;code class=&quot;language-text&quot;&gt;ksqlDB&lt;/code&gt;이죠) 이나 Schema Registry 에 대해 공부하고 세미나를 했던 기억이 납니다. 객관화할 수 있는 데이터나 근거가 있다면 신기술 도입에 망설임이 없었던 덕분이었습니다. 그렇기 때문에, 기술의 선택폭에 대해선 괜찮다 싶으면 바로 도입할 수 있었습니다.&lt;/p&gt;
&lt;p&gt;아래에서, 크게 떠오르는 몇몇 케이스를 작성해보고자 합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;“좋아보인다”로 짐작하지 말고, 좋은 코드를 먼저 이해하자 (ft. 테스트코드)&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;1년차 기간동안에는, Flask로 된 API 서비스를 Django 로 고치는 작업을 진행했습니다. 기존에 있던 기능을 하나씩 캐치하고, 이를 고치기는 작업을 진행했었고, 그 때 처음 TDD 를 알게되었습니다.
이건 좋아보인다! 하는 마음에 테스트코드를 비즈니스 로직에 끼워맞추는(!) 짓을 했었고, 그 시기 코드리뷰 시절에 크게 혼났던 기억이 나네요.
내가 검증해야할 로직이 뭔지 파악하고, 이를 테스트케이스를 짜서 로직을 방어하는 코드를 만들었어야 했는데 말이죠. &lt;a href=&quot;https://meetup.toast.com/posts/174&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;이 링크&lt;/a&gt; 를 봤음에도 전혀 엉뚱한 코드가 나왔던 기억이 납니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;디테일에 신경을 쓰자.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;단순 CRUD 는 누구나 만들 수 있습니다. 그러나 &lt;a href=&quot;https://itsnothingg.medium.com/%EC%98%A4-%EC%9D%B4%EB%9F%B0-%EB%8B%B9%EC%8B%A0%EC%9D%B4-%EB%A7%8C%EB%93%A0-api-%EC%A2%80-%EB%B3%B4%EC%84%B8%EC%9A%94-98877936b10c&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;이런&lt;/a&gt; &lt;a href=&quot;https://engineering.linecorp.com/ko/blog/document-engineering-api-documentation/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;아티클을&lt;/a&gt; 보며, 하나하나 살펴보며 좀 더 좋게 만들어야 하지 않나 하고 생각하게 되었습니다. 누구나 할 수 있는 것에선, 디테일을 더 따져야죠.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;어떤 원칙이 맞는거야?&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;때로는 API를 오픈하며, GET을 쓸지, POST를 쓸지 하는 고민을 할 때도 있었습니다. 때에 따라 다른 법이지요. &lt;a href=&quot;https://homoefficio.github.io/2019/12/25/GET%EC%9D%B4%EB%83%90-POST%EB%83%90-%EA%B7%B8%EA%B2%83%EC%9D%B4-%EB%AC%B8%EC%A0%9C%EB%A1%9C%EB%8B%A4/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;이 글&lt;/a&gt;을 읽고 그 생각을 잡고, Elasticsearch의 API 호출을 보고 생각을 굳혔습니다. 회사에서 제공할 서비스의 설계방향에 맞게 바꾸는게 중요하겠죠.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;여긴 어디고 나는 누구지?&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;핵심을 파악하는 것은 중요합니다. 하고자 하는 일에 대한 원인 파악과 근거를 알면 실수가 크게 줄어들기 때문이지요. 이를 이해하지 않고서 일에 뛰어들면 잘못 이해하거나 하지 않아도 될 고려를 할 수도 있습니다. 제게도 그런 생각을 할 수 있게 많이 도와주셨습니다. 어떤 비즈니스 로직을 작성하기 위한 방향성을 인지하고, 이를 위해 어떤 일을 해야할지를 파악하고 그를 위한 배경지식 쌓기 및 관련 내용을 찾아보기 시작했던 기억이 납니다.&lt;/p&gt;
&lt;h2 id=&quot;어떤-책을-봤었나&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%96%B4%EB%96%A4-%EC%B1%85%EC%9D%84-%EB%B4%A4%EC%97%88%EB%82%98&quot; aria-label=&quot;어떤 책을 봤었나 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;어떤 책을 봤었나?&lt;/h2&gt;
&lt;p&gt;감사하게도, 아래 책들을 추천받아서 읽게 되었습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;실용주의 프로그래머&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;프로그래머의 삶을 살기 위해 어떤 식의 삶의 태도를 가지는게 좋을까? 하는 마음가짐을 잡게 해준 책이었습니다. 처음 봤을 때는 이해 안되고 넘어간 것들도 많았는데, 되돌아보니 이해되는 부분들도 있더라구요.&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;파이썬 클린코드&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;정말 좋은책인데, 아직은 많이 어려운 것 같습니다. 주로 기억나는 부분은 이정도네요.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;주요 매직 메소드 쓰는 법&lt;/li&gt;
&lt;li&gt;객체를 깔끔하게 만들고 쓰기 위한 방안(디스크립터)&lt;/li&gt;
&lt;li&gt;SOLID principles in Python (하나같이 어려워서 나중에 볼까해요…)&lt;/li&gt;
&lt;li&gt;파이썬스러운 코드를 짜기위한 방안(제너레이터, 데코레이터)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이 책은 다시 읽어봐야겠습니다.&lt;/p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;쏟아지는 일 완벽하게 해내는 법 (Getting Things Done)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;일을 어떻게 처리할 것인가? 에 대한 주요 방향성을 알 수 있었습니다. 정신없이 치고오는 일에 대해, 빠르게 쳐낼지/플랜을 세울지/타인에게 부탁할지/미룰지 를 판단하게 두어서, 빠르게 쳐내도록 하는 방법론이지요. 제게는 개인적으로 상당히 도움이 되어서, 제 습관으로 체득화하기 위해 노력중입니다.&lt;/p&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;TDD 실천법과 도구&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&quot;https://repo.yona.io/doortts/blog/issue/1&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;이 책&lt;/a&gt;입니다. 온라인으로 나온 책이고, Java였어서, 개념을 잡는데 보다 더 큰 주안점을 두고 읽었던 기억이 납니다. 제가 먼저 읽고, 나중에 동료분들이나 혹은 아는 동생들에게 가르쳐주고 싶네요.&lt;/p&gt;
&lt;h2 id=&quot;과연-나는-나아졌나&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B3%BC%EC%97%B0-%EB%82%98%EB%8A%94-%EB%82%98%EC%95%84%EC%A1%8C%EB%82%98&quot; aria-label=&quot;과연 나는 나아졌나 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;과연 나는 나아졌나?&lt;/h2&gt;
&lt;p&gt;적어도, 어제보다 나아지기 위해 생각은 하고있습니다. 한 발짝 걸었다 하고 생각되던 날은 좀 드물었던 것 같아 아쉽습니다.&lt;/p&gt;
&lt;p&gt;참 많은 용어들을 접하고, 메모하고, 다시 읽으며 역량을 키우려고 부던히 애썼습니다. 지식을 일단 쌓아야 지혜가 생길테니까요.&lt;/p&gt;
&lt;p&gt;그런 의미로, &lt;a href=&quot;https://www.popit.kr/%ED%8F%89%EB%B2%94%ED%95%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90-%EA%B7%B8-%EC%9D%B4%EC%83%81%EC%9D%B4-%EB%90%98%EA%B8%B0-%EC%9C%84%ED%95%9C-%EC%95%BC%EC%83%9D-%ED%95%99%EC%8A%B5-%EB%B9%84%EA%B2%B0&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;야생학습&lt;/a&gt; 이란 말에 상당부분 동의합니다. 몸이 배워서, 효율적인 행동으로 체화되고 이를 써먹는다고나 할까요.&lt;/p&gt;
&lt;h2 id=&quot;마치며&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A7%88%EC%B9%98%EB%A9%B0&quot; aria-label=&quot;마치며 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;마치며&lt;/h2&gt;
&lt;p&gt;한마디로, 지난 1년은 엄청(!) 깨졌습니다. &lt;strong&gt;같이&lt;/strong&gt; 일할 준비가 안되었다 라고 하면 좋을까요. 저는 실수와 실패로부터 배웠습니다. 그 때의 저는 두려워하고 소통하지 않았습니다. 하지만 나아지기 위해 좌절하지 않고 나아갔습니다. 그땐 그랬습니다.&lt;/p&gt;
&lt;p&gt;사실 개발자로써 이렇게 하면 좋을 것이다 하는 글은 정말 많습니다. 누구나 성공을 뽐내고 싶어하며 실패를 말하기를 두려워합니다. 저의 1년간의 경험이 여러분들에게 좋은 반면교사가 되었으면 하는 바람입니다.&lt;/p&gt;
&lt;p&gt;이건 뭐 회고가 아니라 고해성사가 되어버렸군요. 재밌는 인생입니다.&lt;/p&gt;
&lt;p&gt;읽어주셔서 감사합니다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Django 코드를 Jekyll에 작성할 때 Liquid syntax error가 뜬다면?]]></title><description><![CDATA[Python 코드를 Jekyll에 작성 시, Liquid syntax error가 뜬다면?]]></description><link>https://blog.s3ich4n.me/tips/2019-04-19-jekyll-liquid-issue</link><guid isPermaLink="false">https://blog.s3ich4n.me/tips/2019-04-19-jekyll-liquid-issue</guid><pubDate>Fri, 19 Apr 2019 12:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Django 코드를 Jekyll에 작성할 때 아래 에러메시지가 떴었다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;Liquid syntax error &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;line &lt;span class=&quot;token number&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;: Unknown tag &lt;span class=&quot;token string&quot;&gt;&apos;url&apos;&lt;/span&gt; ?

&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;생략&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Django의 템플릿 문법이 Jekyll의 &lt;a href=&quot;https://jekyllrb.com/docs/liquid/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;liquid&lt;/a&gt;와 같아서 루비 문법으로 해석하다보니 충돌이 발생한다. 해결책은 아래와 같다:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;{% raw %}{%{% endraw %} raw %}
{% raw %}
&amp;lt;a href=&quot;{% url &apos;social:begin&apos; &apos;oauth2-provider-name&apos; %}&quot;&gt;Login&amp;lt;/a&gt;

{%{% endraw %} endraw %}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;references&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#references&quot; aria-label=&quot;references permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;References:&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jekyll/jekyll/issues/4569&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;jekyll issue #4569&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[실용주의 프로그래머 pt. 4]]></title><description><![CDATA[실용주의 프로그래머 2nd edition을 읽은 후... pt. 4]]></description><link>https://blog.s3ich4n.me/books/2018-02-24-pragmatic-programmer-pt04</link><guid isPermaLink="false">https://blog.s3ich4n.me/books/2018-02-24-pragmatic-programmer-pt04</guid><pubDate>Sat, 24 Feb 2018 09:00:00 GMT</pubDate><content:encoded>&lt;h3 id=&quot;읽기에-앞서&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9D%BD%EA%B8%B0%EC%97%90-%EC%95%9E%EC%84%9C&quot; aria-label=&quot;읽기에 앞서 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;읽기에 앞서…&lt;/h3&gt;
&lt;p&gt;실용주의 프로그래머를 읽고 느낀점을 써보려고 합니다. 제가 느낀바로는 이러한 내용이다 하는 방향으로 기술할 것 같습니다.&lt;/p&gt;
&lt;p&gt;craftsman 이라면 연장 정도는 손에 익혀둬야하는게 맞다. 프로그래머도 자신의 툴을 손에 익혀야하는 것이 당연하다.&lt;/p&gt;
&lt;p&gt;도구는 재능을 증폭시켜준다. 도구가 좋다는 가정하에 쓰는법만 알면 반드시 최고의 결과를 보장해준다. 생산성을 높히려면 경험을 통해 툴쓰는 법을 자꾸만 많이 익혀둬야 한다. 내 툴박스에는 자꾸만 뭔가 추가될거고 언젠간 빼게될 것들이 막 생길 것이다. 필요에 따라 어떤툴을 써야할지도 알게 될 것이다.&lt;/p&gt;
&lt;p&gt;모양을 만들 재료는 어떤 것인가? (일반 텍스트의 힘)&lt;/p&gt;
&lt;p&gt;IDE에만 익숙해지지 말고 간단한 쉘 프로그라밍 정도는 할 줄 알아야한다! (shell games)&lt;/p&gt;
&lt;p&gt;(파워 에디팅) 장에서는 툴 어케쓰면 좋은지 알려준다.&lt;/p&gt;
&lt;p&gt;(소스코드 관리) git 써라&lt;/p&gt;
&lt;p&gt;(디버깅) 디버깅은 완벽한 프로그램을 만들기 위한 필수다. 디버깅을 못한다 = 좋은 프로그래머가 되긴 힘들지 않을까&lt;/p&gt;
&lt;p&gt;(텍스트 처리) awk, perl, python을 소개&lt;/p&gt;
&lt;p&gt;(코드 생성기)는 봐야 알듯.&lt;/p&gt;
&lt;h2 id=&quot;14-일반-텍스트의-힘&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#14-%EC%9D%BC%EB%B0%98-%ED%85%8D%EC%8A%A4%ED%8A%B8%EC%9D%98-%ED%9E%98&quot; aria-label=&quot;14 일반 텍스트의 힘 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;14. 일반 텍스트의 힘&lt;/h2&gt;
&lt;p&gt;일반 텍스트(plain text)를 의미.&lt;/p&gt;
&lt;p&gt;사람이 이해할 수 있는 텍스트를 쓰는게 좋다. 그냥 플레인텍스트 뿐 아니라 XML이나 HTML처럼 잘 정의된 구조를 가진거면 일반 텍스트 정도로 이해된다.&lt;/p&gt;
&lt;p&gt;일반 텍스트를 쓰면 데이터가 어떻게 흘러가는지 보다 빠르게 이해할 수 있다.&lt;/p&gt;
&lt;p&gt;단점)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;이진포맷보다 데이터 크기가 더 클 수 있다&lt;/li&gt;
&lt;li&gt;플레인 텍스트 처리엔 더 많은 시간이 들 수 있다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;그런데도 불구하고 쓸 필요가 있는 이유는?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;구식이 되는 것에 대한 보험
&lt;ul&gt;
&lt;li&gt;끊임없이 변하는 애플리케이션의 내용에 대해 사람이 이해하기 편해진다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;호환성
&lt;ul&gt;
&lt;li&gt;거의 어지간한 컴퓨터 세계의 도구들은 일반 텍스트를 다룰 수 있다.
e.g. 설정파일 관련 데이터라 해도 git에 넣어서 변화를 감지하거나, 그게 아니면 diff나 fc같은거로 변화를 감지할 수 있다. sum으로 첵섬 만들어서 변화감지를 할 수도 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;더 쉬운 테스트
&lt;ul&gt;
&lt;li&gt;테스트 시에 써먹을 값으로 테스트 데이터를 쉽게 업뎃,추가,수정이 가능하다.&lt;/li&gt;
&lt;li&gt;스크립트로 더 빨리도 가능하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;알아보기: &lt;a href=&quot;https://learnxinyminutes.com/docs/yaml/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;yaml은 뭐임?&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;15-조개-놀이shell-games&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#15-%EC%A1%B0%EA%B0%9C-%EB%86%80%EC%9D%B4shell-games&quot; aria-label=&quot;15 조개 놀이shell games permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;15. 조개 놀이(shell games)&lt;/h2&gt;
&lt;p&gt;텍스트를 다루는 프로그래머라면 쉘에서 주로 놀게될 것이다. 파이프, 매크로 등…&lt;/p&gt;
&lt;p&gt;GUI도 존나 좋은거다. 대놓고 직관적이니까. 근데 텍스트에서의 장점은 따로 있다. 그것은 ‘자동화’, ‘매크로’가 그것이다. 이건 미쳤다. 파일 이름 일일이 변경이나 필요한 작업들은 쉘이 더 빠를 때가 있다.&lt;/p&gt;
&lt;p&gt;e.g.
Makefile보다 더 최근에 바뀐 모든 c 파일을 찾아라&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-name&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;*.c&apos;&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-newer&lt;/span&gt; Makefile &lt;span class=&quot;token parameter variable&quot;&gt;-print&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;소스의 zip/tar 아카이브를 떠라&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;zip&lt;/span&gt; archive.zip *.h *.c
$ &lt;span class=&quot;token function&quot;&gt;tar&lt;/span&gt; cvf archive.tar *.h *.c&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;지난주에 바뀌지 않은 자바파일은 무엇인가?&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-name&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;*.java&apos;&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-mtime&lt;/span&gt; +7 &lt;span class=&quot;token parameter variable&quot;&gt;-print&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그 중에 어느 파일이 awt 라이브러리를 쓰고있나?&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-name&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;*.java&apos;&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-mtime&lt;/span&gt; +7 &lt;span class=&quot;token parameter variable&quot;&gt;-print&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;xargs&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;java.awt&apos;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(args는 -exec같은 식으로 쓰이는데 더 효과적인듯 보인다. &lt;a href=&quot;https://ko.wikipedia.org/wiki/Xargs&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;xargs란?&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;쉘은 잘 드는 칼 같은거라서 겉보기엔 무서워보이는데 매우 좋다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h2 id=&quot;tip-21-명령어-쉘의-힘을-사용하라&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tip-21-%EB%AA%85%EB%A0%B9%EC%96%B4-%EC%89%98%EC%9D%98-%ED%9E%98%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC&quot; aria-label=&quot;tip 21 명령어 쉘의 힘을 사용하라 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tip 21. 명령어 쉘의 힘을 사용하라.&lt;/h2&gt;
&lt;/blockquote&gt;
&lt;p&gt;자바에서 명시적으로 import하는 패키지 이름의 합집합 목록을 만들어서 list란 파일에 저장하기&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;^import &apos;&lt;/span&gt; *.java &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;
	&lt;span class=&quot;token function&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;s/.*import *//&apos;&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;s/;.*$//&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;
	&lt;span class=&quot;token function&quot;&gt;sort&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-u&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; list&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이런식으로 매우 좋다!&lt;/p&gt;
&lt;h2 id=&quot;16-파워-에디팅&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#16-%ED%8C%8C%EC%9B%8C-%EC%97%90%EB%94%94%ED%8C%85&quot; aria-label=&quot;16 파워 에디팅 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;16. 파워 에디팅&lt;/h2&gt;
&lt;p&gt;세상에 에디터는 널렸다. 근데 내가 쓰는거에 대해선 좀 능숙해질 필요가 있다. 정말 남이봐도 잘쓴다 싶을정도로… 하나를 쓴다해도 무슨 기능이 있는지 통달할 필요가 있다!&lt;/p&gt;
&lt;blockquote&gt;
&lt;h2 id=&quot;tip-22-하나의-에디터를-잘-사용하라&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tip-22-%ED%95%98%EB%82%98%EC%9D%98-%EC%97%90%EB%94%94%ED%84%B0%EB%A5%BC-%EC%9E%98-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC&quot; aria-label=&quot;tip 22 하나의 에디터를 잘 사용하라 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tip 22. 하나의 에디터를 잘 사용하라.&lt;/h2&gt;
&lt;/blockquote&gt;
&lt;p&gt;에디터 하나를 잘 골라서 잘 쓸 수 있도록 만들고 모든 편집작업에 그걸 사용하도록 하라! 무엇을 쓰든간에 정말 효율적으로 바로바로 필요한 기능이 나오도록 하게 하는 것이 베스트다. 또한 그 에디터가 어지간한 플랫폼에서 다 쓸 수 있는지도 파악하면 도움이 된다. (무슨 작업환경에서든 다 쓸 수 있도록 해두라는 말)&lt;/p&gt;
&lt;p&gt;책에서 추천하는 에디터의 기능:
그럴싸한 에디터라면 갖추고있는 몇가지 기능은 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;설정변경 가능&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;폰트, 색깔, 윈도우 크기, 키 입력 바인딩 등을 바꿀 수 있는가?는 다시말해 내가 필요한 기능을 모두 키보드로 조질 수 있는가? 의 의미가 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;확장 가능:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;새 프로그래밍 언어를 즉각 대응할 수 있는가? 새 컴파일러에 대응할 수 있는가? 또한 고려요소중의 하나다. 혹은 이런것들을 ‘가르칠’ 수 있어야 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;프로그램 가능:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;복잡하고 다단계의 작업을 수행할 수 있도록 에디터를 ‘프로그래밍’ 할 수 있어야 한다. 매크로나 내장 스트립트가 있는가?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;많은 에디터들은 다음과 같은 특정 고유기능들이 있다:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;• 구문 강조(syntax highlighting)
• 자동 완성
• 자동 들여쓰기
• 코드나 문서 상용어구 지원
• 관련 도움말 시스템
• IDE 기능(컴파일, 디버그 등)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;메모장으로 잘라붙이기 할 수도 있다. 그런데 예를들어 소스코드를 내가 원하는 내용으로 정렬할 필요가 있을 때는 어떻게 하면 좋을까?&lt;/p&gt;
&lt;p&gt;vi기준 &lt;code class=&quot;language-text&quot;&gt;:.,+3!sort&lt;/code&gt; 하면 알파벳 순으로 라인 정렬이 된다.&lt;/p&gt;
&lt;p&gt;또는 프로그래밍할 때 처음 내가 입력할 필요가 없는 것들을 파일 생성과 동시에 대신 입력해주기도 한다. 예를 들어 이런것들…&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;• 클래스와 모듈 이름(파일 이름에서 도출된것)을 자동입력
• 소스코드 작성자 이름, 저작권 선언
• 특정 언어의 스켈레톤 코드(생성자, 소멸자 같은것들 자동작성)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;책에서는 내가 쓰는 에디터가 무엇인지, 어느정도 쓸 수 있는지에 따라 다음 행동을 제시한다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;나의 실력&lt;/th&gt;
&lt;th&gt;앞으로 어떻게 하면 좋을까요?&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;나는 여러 에디터 중 기본 기능만 쓴다&lt;/td&gt;
&lt;td&gt;강력한 에디터 하나를 골라잡아서 제대로 익혀보세요&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;선호하는 에디터가 있긴 한데, 기능을 다 쓰지는 않는다&lt;/td&gt;
&lt;td&gt;그걸 제대로 배워서 입력하는 키 갯수를 최대한으로 줄여보세요&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;선호하는 에디터가 있고 가능하면 그걸 쓴다&lt;/td&gt;
&lt;td&gt;지금 하는 작업 이외에 다 많은 작업에 쓰도록 확장해보세요&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;17-소스코드-관리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#17-%EC%86%8C%EC%8A%A4%EC%BD%94%EB%93%9C-%EA%B4%80%EB%A6%AC&quot; aria-label=&quot;17 소스코드 관리 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;17. 소스코드 관리&lt;/h2&gt;
&lt;p&gt;Git 씁시다! 형상관리를 SE시간에 배웠고 그 예시로 Git이 당당히 나왔다. 필요하다면 SVN도 알아둬야할 것 같다.&lt;/p&gt;
&lt;p&gt;소스코드 관리 시스템(SCCS: Source Code Control System) 은 누가 소스를 바꿨고 주간 소스코드 버전차이, 어느 릴리즈에 몇줄 바뀌었는지? 어느 파일이 자주 바뀌었는지? 등을 다 파악할 수 있다. 이는 추후에 버그트래킹, 퍼포먼스/품질 관리 등에 쓰이기 좋은 정보들이다.&lt;/p&gt;
&lt;p&gt;브랜치를 나누어서 특점 시점에서 개발 로그를 다르게 남길 수도 있다.&lt;/p&gt;
&lt;p&gt;여러사람이 동시에 작업할 수도 있다.&lt;/p&gt;
&lt;p&gt;이는 작은 프로젝트든 큰 프로젝트든 어디든 다 쓰일 수 있다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h2 id=&quot;tip-23-언제나-소스코드-관리-시스템을-사용하라&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tip-23-%EC%96%B8%EC%A0%9C%EB%82%98-%EC%86%8C%EC%8A%A4%EC%BD%94%EB%93%9C-%EA%B4%80%EB%A6%AC-%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC&quot; aria-label=&quot;tip 23 언제나 소스코드 관리 시스템을 사용하라 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tip 23. 언제나 소스코드 관리 시스템을 사용하라!&lt;/h2&gt;
&lt;/blockquote&gt;
&lt;p&gt;전체 프로젝트를 제품 빌드를 자동화하고 반복작업을 가능하게 한다.&lt;/p&gt;
&lt;p&gt;갓-깃 씁시다.&lt;/p&gt;
&lt;h2 id=&quot;18-디버깅&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#18-%EB%94%94%EB%B2%84%EA%B9%85&quot; aria-label=&quot;18 디버깅 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;18. 디버깅&lt;/h2&gt;
&lt;p&gt;프로그램은 &lt;em&gt;완벽하게&lt;/em&gt; 짤 수 없다. 그렇다면 디버깅에 관련한 문제를 알아보고 찾기 힘든 버그를 찾아내는 일반적인 전략 몇가지를 알아보자. 피할 수 없으면 효율적으로 격파해야지!&lt;/p&gt;
&lt;p&gt;안되는 코드는 풀어내면 된다. 그 방법중에 하나가 디버깅이다. 못짠 코드는 누구나 만들어낼 수 있다. 절대로 다른 팀원을 비난하면 안 된다!&lt;/p&gt;
&lt;blockquote&gt;
&lt;h2 id=&quot;tip-24-비난-대신-문제를-해결하라&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tip-24-%EB%B9%84%EB%82%9C-%EB%8C%80%EC%8B%A0-%EB%AC%B8%EC%A0%9C%EB%A5%BC-%ED%95%B4%EA%B2%B0%ED%95%98%EB%9D%BC&quot; aria-label=&quot;tip 24 비난 대신 문제를 해결하라 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tip 24. 비난 대신 문제를 해결하라.&lt;/h2&gt;
&lt;/blockquote&gt;
&lt;p&gt;디버깅하면 &lt;strong&gt;내 코드가 틀릴 수 있다&lt;/strong&gt;는 걸 염두에 두고 해야한다. 디버깅 때는 프로젝트의 압박이 있다하더라도 다음 철칙을 항상 염두에 두자!&lt;/p&gt;
&lt;blockquote&gt;
&lt;h2 id=&quot;tip-25-디버깅을-할-때-당황하지-마라&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tip-25-%EB%94%94%EB%B2%84%EA%B9%85%EC%9D%84-%ED%95%A0-%EB%95%8C-%EB%8B%B9%ED%99%A9%ED%95%98%EC%A7%80-%EB%A7%88%EB%9D%BC&quot; aria-label=&quot;tip 25 디버깅을 할 때 당황하지 마라 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tip 25. 디버깅을 할 때 당황하지 마라.&lt;/h2&gt;
&lt;/blockquote&gt;
&lt;p&gt;뭐 때문에 버그가 생겼는지, 인과관계가 어떻게 되어있는지 생각해보는게 정말 중요하다. 버그가 터져도 ‘와 말도 안돼’, ‘버그 터질리가 없는데’ 같은 소리는 의미가 없다. 왜냐고? 진짜 터졌으니까.&lt;/p&gt;
&lt;p&gt;디버깅할 때는 ‘근시’를 조심해야 한다. 바로 눈에 터지는 것만 없애려 하지말고 문제의 &lt;code class=&quot;language-text&quot;&gt;근본적인 원인&lt;/code&gt;을 분석해서 어떻게 터지는지 분석해야 한다. 특정 증상만 고치지 마라!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;어디에서부터 디버깅해야되나?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;사실 버그 리포트는 정확한 과학이 못 된다… 우연히 어떻게 터졌는지 모르는 것들이기 때문이다. 자세한 사항을 보기 위해 실제 버그가 어떤 상황에 정확히 어떻게하면 터지는지를 알아야한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;가능하다면 처음 받은 자료 이상을 얻기 위해서 버그 리포트한 사용자를 인터뷰할 필요가 있다.&lt;/li&gt;
&lt;li&gt;경계 조건, 실제 최종 사용자 패턴 모두를 철저히 테스트해야한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;디버깅 전략&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;데이터를 가시화하라!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;프로그램이 다루는 데이터가 어떤거인지 살펴보자. GUI라면 대화상자 필드, 변수이름 = 자료값 이정도일 것.&lt;/li&gt;
&lt;li&gt;데이터와 데이터가 어떻게 데이터를 주고받는지 시각적으로 보여주는 디버거를 쓰면 보다 쉽게 오류를 찾아낼 수 있다!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;트레이싱(tracing)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;트레이싱 구문은 디버거를 쓸 때 ‘여기까지 도달’, ‘x값 = 2’등 파일에 뿌려주는 진단용 메시지를 말한다. call tree를 타고 내려갈 때도 쓴다. 이런 구문은 규칙적이고 일관적이어야 분석하기 편하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;고무오리&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;문제를 그냥 쭉 설명해보다보면 ‘아차’하고 실수한 부분을 체크할 수 있다. 그런 통찰을 가끔씩 할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;제거 과정: 내 코드가 문제냐, OS가 문제냐?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OS의 코드가 고장날 확률이 높을까, 내 코드가 고장날 확률이 높을까? 아래의 팁은 이런 문제와 관련해서 관련 일화를 하나 소개한다.&lt;/li&gt;
&lt;li&gt;해당 일화를 요약하자면 코드의 어디가 망가졌는지 문서를 정독해서 원인을 찾았다는 말. 문제는 바로 본인의 &lt;code class=&quot;language-text&quot;&gt;select&lt;/code&gt; 관련 코드였던 것이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;h2 id=&quot;tip-26-select는-망가지지-않았다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tip-26-select%EB%8A%94-%EB%A7%9D%EA%B0%80%EC%A7%80%EC%A7%80-%EC%95%8A%EC%95%98%EB%8B%A4&quot; aria-label=&quot;tip 26 select는 망가지지 않았다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tip 26. ‘select’는 망가지지 않았다.&lt;/h2&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;놀람의 요소
&lt;ul&gt;
&lt;li&gt;버그가 터지면 내가 제대로 짰다 하는걸 처음부터 다시 생각하라. 버그가 안터지겠다 싶은 곳에서부터 경계조건을 테스트하고 몇번 돌려써도 안터질 코드인가 다시 생각해야한다. 납득하기 싫지만 내 가정이 잘못되었을 수 있다. 뭘 어떻게 가정하고 돌렸을지를 파악하고 데이터로 경계조건으로 코드가 옳음을 ‘증명’하라!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;h2 id=&quot;tip-27-가정하지-마라-증명하라&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tip-27-%EA%B0%80%EC%A0%95%ED%95%98%EC%A7%80-%EB%A7%88%EB%9D%BC-%EC%A6%9D%EB%AA%85%ED%95%98%EB%9D%BC&quot; aria-label=&quot;tip 27 가정하지 마라 증명하라 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tip 27. 가정하지 마라. 증명하라.&lt;/h2&gt;
&lt;/blockquote&gt;
&lt;p&gt;버그를 고쳤다면, 이 버그가 왜 일찍 보이지 않았을까? 생각할 필요가 있다. 이 버그를 일찍 잡을 수 있도록 단위 테스트나 다른 테스트를 수정할 필요가 있는지도 고려하는 것이 좋다. 이거 비슷한 오류가 터질 코드가 있을 것 같으면 지금 같이 수정하면 된다.&lt;/p&gt;
&lt;p&gt;위 글을 통해 디버깅 체크리스트를 책에서는 제시한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;보고된 문제가 내재하는 버그의 직접적인 결과인가, 아니면 단순히 증상인가?&lt;/li&gt;
&lt;li&gt;버그가 정말로 컴파일러, OS코드에 있나? 아니면 내 코드에 있나?&lt;/li&gt;
&lt;li&gt;이 버그를 팀원에게 설명한다 하면 어떻게 말할 것인가?&lt;/li&gt;
&lt;li&gt;의심되는 코드가 단위 테스트를 통과한다면, 테스트는 충분히 완전한 것인가? 이 데이터로 단위 테스트를 돌린다면 무슨일이 일어나는가?&lt;/li&gt;
&lt;li&gt;이 버그를 일으킨 조건이 다른 곳에도 존재하는가?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;19-텍스트-처리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#19-%ED%85%8D%EC%8A%A4%ED%8A%B8-%EC%B2%98%EB%A6%AC&quot; aria-label=&quot;19 텍스트 처리 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;19. 텍스트 처리&lt;/h2&gt;
&lt;p&gt;텍스트 처리를 위해 awk, sed같은툴이나 쉘 뿐 아니라 파이썬이나 펄도 배울 필요가 있다!&lt;/p&gt;
&lt;p&gt;어떤걸 처리하는데는 다른 특정 언어가 더 나을 수도 있다. 다른언어들로 구현해봤을 때 얼마나 짧고 빠르게 구현할 수 있는가를 논했을 때 C가 150줄일 때 펄은 17줄이면 끝일 정도니까(책피셜)&lt;/p&gt;
&lt;blockquote&gt;
&lt;h2 id=&quot;tip-28-텍스트-처리-언어를-하나-익혀라&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tip-28-%ED%85%8D%EC%8A%A4%ED%8A%B8-%EC%B2%98%EB%A6%AC-%EC%96%B8%EC%96%B4%EB%A5%BC-%ED%95%98%EB%82%98-%EC%9D%B5%ED%98%80%EB%9D%BC&quot; aria-label=&quot;tip 28 텍스트 처리 언어를 하나 익혀라 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tip 28. 텍스트 처리 언어를 하나 익혀라.&lt;/h2&gt;
&lt;/blockquote&gt;
&lt;p&gt;텍스트 처리 언어의 적용범위는 상당히 넓다:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DB스키마 관리: 스크립트로 스키마 정의 파일을 읽고 다음의 요소들을 생성해낼 수 있다.&lt;/li&gt;
&lt;li&gt;자바 속성 액세스: 파일 내 각 &lt;code class=&quot;language-text&quot;&gt;property&lt;/code&gt;를 파악하고 &lt;code class=&quot;language-text&quot;&gt;getter/setter&lt;/code&gt;를 만들어낼 수 있다.&lt;/li&gt;
&lt;li&gt;테스트 데이터 생성: 파일에 다른 포맷으로 분리된 데이터를 재조립해서 DB에 넣기 편하게 개조가능하다.&lt;/li&gt;
&lt;li&gt;C에서 Object Pascal 인터페이스로: C헤더파일을 해석해서 모든 함수와 그것들이 사용하는 데이터 구조의 정의를 추출시켜주는 툴 제작 가능. 이게 빌드의 일부분이 되면 바뀔 때마다 자동적용…&lt;/li&gt;
&lt;li&gt;웹문서 생성: 각종 DB스키마, 소스파일, makefile, 등 기타 프로젝트 소스들을 읽어서 자동으로 HTML문서화 가능. &lt;a href=&quot;http://woowabros.github.io/experience/2018/12/28/spring-rest-docs.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;이런 것을&lt;/a&gt; 말하는 것 같음.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;20-코드-생성기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#20-%EC%BD%94%EB%93%9C-%EC%83%9D%EC%84%B1%EA%B8%B0&quot; aria-label=&quot;20 코드 생성기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;20. 코드 생성기&lt;/h2&gt;
&lt;p&gt;똑같은걸 만들 때는 템플릿을 써먹으면 된다. 잘만든 템플릿은 두고두고 써먹는다. 반복되는 작업을 통한 실수를 대폭 줄여주고 실제로 해야할 구현에만 집중할 수 있게 해준다.&lt;/p&gt;
&lt;p&gt;코드 생성기는 그래서 중요하다. 잘 만든 코드 생성기는 프로젝트 전 기간에 그냥 거저로 써먹을 수 있다!&lt;/p&gt;
&lt;blockquote&gt;
&lt;h2 id=&quot;tip-29-코드를-작성하는-코드를-작성하라&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tip-29-%EC%BD%94%EB%93%9C%EB%A5%BC-%EC%9E%91%EC%84%B1%ED%95%98%EB%8A%94-%EC%BD%94%EB%93%9C%EB%A5%BC-%EC%9E%91%EC%84%B1%ED%95%98%EB%9D%BC&quot; aria-label=&quot;tip 29 코드를 작성하는 코드를 작성하라 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tip 29. 코드를 작성하는 코드를 작성하라.&lt;/h2&gt;
&lt;/blockquote&gt;
&lt;p&gt;코드 생성기는 다음 두가지로 분류된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;수동적 코드 생성기&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;결과수행을 위해 한번만 실행됨; 그 다음부터의 결과물은 독립적인 것&lt;/li&gt;
&lt;li&gt;타이핑을 줄여줌
&lt;ul&gt;
&lt;li&gt;새 소스파일 생성(스켈레톤 코드)&lt;/li&gt;
&lt;li&gt;프로그래밍 언어간 일회용 변환 수행&lt;/li&gt;
&lt;li&gt;런타임이 계산하기엔 비용이 많이 드는 참조 테이블과 여타 자원 생성&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;능동적 코드 생성기:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;코드 생성이 필요할 때마다 작동됨&lt;/li&gt;
&lt;li&gt;DRY 원칙을 따르는 요소.
&lt;ul&gt;
&lt;li&gt;어떤 형태의 스크립트나 컨트롤 파일을 읽어서 자동으로 변경을 감지하는 것을 의미&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[실용주의 프로그래머 pt. 3]]></title><description><![CDATA[실용주의 프로그래머 2nd edition을 읽은 후... pt. 3]]></description><link>https://blog.s3ich4n.me/books/2018-02-23-pragmatic-programmer-pt03</link><guid isPermaLink="false">https://blog.s3ich4n.me/books/2018-02-23-pragmatic-programmer-pt03</guid><pubDate>Fri, 23 Feb 2018 09:00:00 GMT</pubDate><content:encoded>&lt;h3 id=&quot;읽기에-앞서&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9D%BD%EA%B8%B0%EC%97%90-%EC%95%9E%EC%84%9C&quot; aria-label=&quot;읽기에 앞서 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;읽기에 앞서…&lt;/h3&gt;
&lt;p&gt;실용주의 프로그래머를 읽고 느낀점을 써보려고 합니다. 제가 느낀바로는 이러한 내용이다 하는 방향으로 기술할 것 같습니다.&lt;/p&gt;
&lt;h1 id=&quot;제-2장-실용주의-접근법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A0%9C-2%EC%9E%A5-%EC%8B%A4%EC%9A%A9%EC%A3%BC%EC%9D%98-%EC%A0%91%EA%B7%BC%EB%B2%95&quot; aria-label=&quot;제 2장 실용주의 접근법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;제 2장. 실용주의 접근법&lt;/h1&gt;
&lt;p&gt;이 장에서는 소프트웨어 개발에 있어 반드시 적용되는 아이디어나 보편화된 프로세스에 대해 소개한다.&lt;/p&gt;
&lt;p&gt;중복의 해악과 직교성(Orthogonality):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;전자? 시스템을 통틀어 어떤 지식을 중복하지 마라.&lt;/li&gt;
&lt;li&gt;후자? 하나의 지식을 여러 개의 컴포넌트에 걸쳐 쪼개어놓지 마라.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;가역성(Reversibility):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;변화하는 환경에서 프로젝트를 분리하는 방법&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;예광탄(Tracer bullets):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;요구사항을 모음, 설계를 테스트, 코드를 구현함… 이런류의 개발 스타일을 소개함.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;프로토타입과 포스트잇:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;아키텍처, 알고리즘, 인터페이스, 아이디어를 구현하기 위해 프로토타입을 어떻게 쓰는가에 대한 이야기를 함.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;도메인 언어(Domain Language):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;???&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;추정(Estimating):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;이정도 개발이면 이정도 쯤 걸리겠는데? 하고 감잡는 방법을 소개&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;7-중복의-해악&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#7-%EC%A4%91%EB%B3%B5%EC%9D%98-%ED%95%B4%EC%95%85&quot; aria-label=&quot;7 중복의 해악 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;7. 중복의 해악&lt;/h2&gt;
&lt;p&gt;지식은 변화한다. 요구사항이 바뀔 수도 있고 알고리즘이 안돌아가서 변경될 수 있고 그에 맞게 기능도 바뀐다. 한마디로 하자면 유지보수는 개발과 이어지는 부분이다 라고할 수 있다.
유지보수를 하려면 사물의 표현방식을 바꿔야함. 객체화한 것들, 캡슐화한 부분들 등… 그렇지만 개발할 때 명세와 프로세스에 지식을 중복해서 넣기 쉽다는 점이다. 이것을 방지하기 위한 원칙은 DRY 원칙이다. 정의는 다음과 같다.&lt;/p&gt;
&lt;p&gt;모든 지식은 시스템 내에서 단일하고, 애매하지 않고, 믿을만한 표현양식을 가져야 한다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h2 id=&quot;tip-11-dry---dont-repeat-yourself&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tip-11-dry---dont-repeat-yourself&quot; aria-label=&quot;tip 11 dry   dont repeat yourself permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tip 11. DRY - Don’t Repeat Yourself&lt;/h2&gt;
&lt;/blockquote&gt;
&lt;p&gt;DRY를 따르지 않는다: 똑같은 것이 여러곳에 반복된다는 것이다. -&gt; 지옥의 유지보수&lt;/p&gt;
&lt;p&gt;중복이 어떻게 생기는가?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;강요된(impose) 중복: 환경이 중복을 요구한다&lt;/li&gt;
&lt;li&gt;부주의한 중복: 개발자들이 중복하고 있다는 것을 인지하지 못함&lt;/li&gt;
&lt;li&gt;참을성 없는 중복: 중복이 쉬워보이기 때문에 개발자들이 게을러져서&lt;/li&gt;
&lt;li&gt;개발자 간의 중복: 한팀에 있는(다른팀에 있는) 여러 사람이 동일한 정보를 중복&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;강요된 중복:
필요한 지식을 한곳에 두도록 하는 기법들&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;정보의 다양한 표현방식: 코딩할 때 동일한 정보가 다른 형태로 표현될 때가 있다.
&lt;ul&gt;
&lt;li&gt;공통된 구조를 다른 요소에서 서로 표현해야할 때&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;코드 생성기를 통해 두 요소의 표현을 자동화한다.
&lt;ul&gt;
&lt;li&gt;코드 내의 문서화&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[실용주의 프로그래머 pt. 2]]></title><description><![CDATA[실용주의 프로그래머 2nd edition을 읽은 후... pt. 2]]></description><link>https://blog.s3ich4n.me/books/2018-02-21-pragmatic-programmer-pt02</link><guid isPermaLink="false">https://blog.s3ich4n.me/books/2018-02-21-pragmatic-programmer-pt02</guid><pubDate>Wed, 21 Feb 2018 09:00:00 GMT</pubDate><content:encoded>&lt;h3 id=&quot;읽기에-앞서&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9D%BD%EA%B8%B0%EC%97%90-%EC%95%9E%EC%84%9C&quot; aria-label=&quot;읽기에 앞서 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;읽기에 앞서…&lt;/h3&gt;
&lt;p&gt;실용주의 프로그래머를 읽고 느낀점을 써보려고 합니다. 제가 느낀바로는 이러한 내용이다 하는 방향으로 기술할 것 같습니다.&lt;/p&gt;
&lt;h1 id=&quot;제-1장-실용주의-철학&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A0%9C-1%EC%9E%A5-%EC%8B%A4%EC%9A%A9%EC%A3%BC%EC%9D%98-%EC%B2%A0%ED%95%99&quot; aria-label=&quot;제 1장 실용주의 철학 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;제 1장. 실용주의 철학&lt;/h1&gt;
&lt;p&gt;이 장에서는 문제에 어떻게 접근해야 하는지에 대한 철학을 알려준다.&lt;/p&gt;
&lt;h2 id=&quot;1-고양이가-내-소스코드를-삼켰어요&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EA%B3%A0%EC%96%91%EC%9D%B4%EA%B0%80-%EB%82%B4-%EC%86%8C%EC%8A%A4%EC%BD%94%EB%93%9C%EB%A5%BC-%EC%82%BC%EC%BC%B0%EC%96%B4%EC%9A%94&quot; aria-label=&quot;1 고양이가 내 소스코드를 삼켰어요 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 고양이가 내 소스코드를 삼켰어요:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;내가 한 일에 대해선 책임을 져라. 안돌아가면 변명하지 말고 대안을 찾아야 한다.&lt;/li&gt;
&lt;li&gt;본인의 실력에 대해 자부심을 가질 필요가 있다. 그런만큼 실수를 인정할 필요도 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;h2 id=&quot;tip-3-어설픈-변명은-하지-말고-대안을-제시해라&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tip-3-%EC%96%B4%EC%84%A4%ED%94%88-%EB%B3%80%EB%AA%85%EC%9D%80-%ED%95%98%EC%A7%80-%EB%A7%90%EA%B3%A0-%EB%8C%80%EC%95%88%EC%9D%84-%EC%A0%9C%EC%8B%9C%ED%95%B4%EB%9D%BC&quot; aria-label=&quot;tip 3 어설픈 변명은 하지 말고 대안을 제시해라 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tip 3. 어설픈 변명은 하지 말고 대안을 제시해라.&lt;/h2&gt;
&lt;/blockquote&gt;
&lt;p&gt;코드를 버려야하나? 리팩토링 가능
뭘 구현해야하지? 프로토타입 구현으로 먼저 보여줌
테스팅, 자동화도 도입해야할 요소&lt;/p&gt;
&lt;p&gt;SE시간에 빤히 배웠던 것들을 다시금 강조한다.&lt;/p&gt;
&lt;p&gt;부탁하고 묻고 하는 것에 두려움이 없어야 한다. 혼자 끙끙 앓으면 나만 아프다.&lt;/p&gt;
&lt;h2 id=&quot;2-소프트웨어-엔트로피&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%EC%97%94%ED%8A%B8%EB%A1%9C%ED%94%BC&quot; aria-label=&quot;2 소프트웨어 엔트로피 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 소프트웨어 엔트로피&lt;/h2&gt;
&lt;p&gt;프로그램을 짜면 필연적으로 누더기 코드가 생긴다.
‘깨진창문 이론’을 생각하자! 작살났거나 쪼대로 짠 코드는 다른 코드도 대충짜게 만든다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h2 id=&quot;tip-4-깨진창문을-내버려두지-마라&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tip-4-%EA%B9%A8%EC%A7%84%EC%B0%BD%EB%AC%B8%EC%9D%84-%EB%82%B4%EB%B2%84%EB%A0%A4%EB%91%90%EC%A7%80-%EB%A7%88%EB%9D%BC&quot; aria-label=&quot;tip 4 깨진창문을 내버려두지 마라 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tip 4. 깨진창문을 내버려두지 마라.&lt;/h2&gt;
&lt;/blockquote&gt;
&lt;p&gt;영 좋지않은 코드는 주석처리를 하든, 더미 데이터를 넣어놓든 해야한다.&lt;/p&gt;
&lt;p&gt;시간이 촉박하거나 데모를 보여줘야할 땐 물론 급하게 돌아가게는 만들어야한다. 하지만 이는 반드시 수정되어야한다. 이러한 행동을 하지도 않는게 좋겠지.&lt;/p&gt;
&lt;p&gt;멍청한 코드는 프로젝트를 망가뜨리는 지름길이기 때문이다.&lt;/p&gt;
&lt;h2 id=&quot;3-돌멩이-수프와-삶은-개구리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%EB%8F%8C%EB%A9%A9%EC%9D%B4-%EC%88%98%ED%94%84%EC%99%80-%EC%82%B6%EC%9D%80-%EA%B0%9C%EA%B5%AC%EB%A6%AC&quot; aria-label=&quot;3 돌멩이 수프와 삶은 개구리 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. 돌멩이 수프와 삶은 개구리&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Stone_Soup&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;돌죽&lt;/a&gt; 일화를 말한다.&lt;/p&gt;
&lt;p&gt;킥스타팅은 별게 아니라 걍 &lt;code class=&quot;language-text&quot;&gt;쉬운걸 구현&lt;/code&gt;하는데서 시작한다는 말이다.&lt;/p&gt;
&lt;p&gt;작년에 프로젝트를 해보면서 틀만 짜놓고 퍼졌던 적이 있다. 그래 뭐 이정도는 했지 ㅋㅋㅋ 하고 자만하고 끝이었는데, 다시보니 그때부터 시작이었던 것이다. 나부터 &lt;code class=&quot;language-text&quot;&gt;변화의 촉매&lt;/code&gt;가 되어야 한다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h2 id=&quot;tip-5-변화의-촉매가-되어라&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tip-5-%EB%B3%80%ED%99%94%EC%9D%98-%EC%B4%89%EB%A7%A4%EA%B0%80-%EB%90%98%EC%96%B4%EB%9D%BC&quot; aria-label=&quot;tip 5 변화의 촉매가 되어라 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tip 5. 변화의 촉매가 되어라!&lt;/h2&gt;
&lt;/blockquote&gt;
&lt;p&gt;그렇지만, 기능을 잡아넣기만 하면 프로젝트가 뒤틀린다. 세세한거에 집중하다보니 원했던 구현이 되지 않는다. 책의 내용을 그대로 인용하자면 다음과 같다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(중략) 프로젝트 폭주는 대부분 어느날 갑자기 일어난다. 코드에 패치가 하나 둘 적용되다가 원본이 하나도 남지 않을 때 까지, 시스템은 명세에서부터 기능 하나하나씩 정처 없이 떠다닌다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;그러니까 항상 ‘큰 그림을 기억해야’ 한다. 프로젝트가 어떻게 만들어질지 생각했으면 그거대로 만들어야한다 이말이다. 요구사항과 설계가 이래서 중요하나 싶다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h2 id=&quot;tip-6-큰-그림을-기억하라&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tip-6-%ED%81%B0-%EA%B7%B8%EB%A6%BC%EC%9D%84-%EA%B8%B0%EC%96%B5%ED%95%98%EB%9D%BC&quot; aria-label=&quot;tip 6 큰 그림을 기억하라 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tip 6. 큰 그림을 기억하라!&lt;/h2&gt;
&lt;/blockquote&gt;
&lt;p&gt;개구리는 서서히 끓는 냄비속에서 ‘어 따뜻해지네?’ 하다가 죽는다. 변화를 감지하지 못한 채로 있다가 방황할지도 모른다.&lt;/p&gt;
&lt;p&gt;이 주제는 정말 중요한 질문을 던지며 마무리한다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;stone soup story에서의 변화와 개구리를 점진적으로 속이는 변화의 차이는 뭘까?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;내가 일으킨 변화는 팀에있어 스톤수프 변화일까, 개구리수프 변화일까?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이 판단은 주관적일까, 객관적일까?&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;4-적당히-괜찮은-소프트웨어&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-%EC%A0%81%EB%8B%B9%ED%9E%88-%EA%B4%9C%EC%B0%AE%EC%9D%80-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4&quot; aria-label=&quot;4 적당히 괜찮은 소프트웨어 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. 적당히 괜찮은 소프트웨어&lt;/h2&gt;
&lt;p&gt;‘적당히 괜찮은’ 이란 말은 영 좋지않은 코드를 말하는게 아니다. 이건 책을 그대로 인용해서 이해하는 것이 좋겠다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(중략) 시스템이 성공하려면 사용자의 요구사항을 충족해야 한다. 단지 우리는 여러분이 생산해낸 것이 어느 정도면 적당히 괜찮은지를 결정하는 과정에 사용자가 참가할 기회를 가져야 한다는 걸 말하고 있는 것이다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;피드백&lt;/code&gt;을 얻을 필요가 있다 이말. ‘얼마나 좋아야’되는가? 에 대한 질문은 유저들이 대답해줄 것이다. 프로토타입을 내어주고 그에 대한 피드백으로 개발할 수도 있는 부분이다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h2 id=&quot;tip-7-품질을-요구사항으로-만들어라&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tip-7-%ED%92%88%EC%A7%88%EC%9D%84-%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD%EC%9C%BC%EB%A1%9C-%EB%A7%8C%EB%93%A4%EC%96%B4%EB%9D%BC&quot; aria-label=&quot;tip 7 품질을 요구사항으로 만들어라 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tip 7. 품질을 요구사항으로 만들어라.&lt;/h2&gt;
&lt;/blockquote&gt;
&lt;p&gt;프로그래밍은 애초부터 완벽하게 할 수가 없다. 불-완벽한(완벽에 최대한 수렴하는) 프로그램을 짤 생각을 해야한다.&lt;/p&gt;
&lt;p&gt;내가 사용자라면?
버그가 단 하나도 없는 프로그램을 기다릴거냐?
복잡한 SW를 쓰면서 어느정도까지 버그는 감내할 수 있냐?
아니면, 결함이 더 적은 간단한 SW를 쓸거냐?&lt;/p&gt;
&lt;h2 id=&quot;5-지식-포트폴리오&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#5-%EC%A7%80%EC%8B%9D-%ED%8F%AC%ED%8A%B8%ED%8F%B4%EB%A6%AC%EC%98%A4&quot; aria-label=&quot;5 지식 포트폴리오 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5. 지식 포트폴리오&lt;/h2&gt;
&lt;p&gt;내가 가지고 있는 지식은 결국 ‘소진하는 자산(expiring assets)’ 이다. 내 지식은 옛날의 것이 되고, 그 변하는 속도는 말 그래도 &lt;code class=&quot;language-text&quot;&gt;미쳤다&lt;/code&gt; 웹은 더 미친듯이 바뀐다. 오늘 다르고 내일 다르다.&lt;/p&gt;
&lt;p&gt;그래서 책은 내가 알고있는 사실, 경험을 ‘지식 포트폴리오’로 생각하기를 권장한다. 실제 투자하고 밀접한 연관이 있는데 이는 다음과 같다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;진지한 투자자들은 주기적으로 투자하는 습관을 가지고 있다.&lt;/li&gt;
&lt;li&gt;장투로 성공하기 위한 답은 다각화다.&lt;/li&gt;
&lt;li&gt;똑똑한 투자자들은 자신의 포트폴리오를 보수적인 투자, 위험성이 큰 투자, 보상이 높은 투자 사이에서 균형을 잘 맞춘다.&lt;/li&gt;
&lt;li&gt;최대 수익을 위해 싸게 사서 비싸게 판다.&lt;/li&gt;
&lt;li&gt;포트폴리오는 주기적으로 재검토, 재조정 해야한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;프로그래머는 위의 수칙을 이렇게 응용할 수도 있다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;주기적인 투자: 꾸준히 신기술을 배워야함.&lt;/li&gt;
&lt;li&gt;다각화: 어느 분야의 특정 기술이 언제 생기고 언제 사라지는지 파악해야함. 많은 기술에 익숙하면 변화에 잘 적응할 수 있을 것이다.&lt;/li&gt;
&lt;li&gt;리스크 관리: 어느 기술이 어떻게 흥하고 망할지는 아무도 모른다. 그러니까 한기술에 몰빵하지 마라.&lt;/li&gt;
&lt;li&gt;싸게 사서 비싸게 팔기: 신기술이 생기면 적극적으로 들이대보라. 분명 리스크가 있는데, 빵 뜬 언어같으면 내가 그 언어를 ‘잘 안다’ 할 수 있다. 그건 분명 좋은 점이다.&lt;/li&gt;
&lt;li&gt;검토 및 재조정: 작년까지 잘쓰던 기술이 올해는 쌉퇴물이 될 수도 있다. 한동안 안쓰던 기술을 이제와서보니 다시 쓰더라 하기 쉽다. 그래서 많이 다뤄봐야 한다는 말.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;h2 id=&quot;tip-8-지식-포트폴리오에-주기적으로-투자하라&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tip-8-%EC%A7%80%EC%8B%9D-%ED%8F%AC%ED%8A%B8%ED%8F%B4%EB%A6%AC%EC%98%A4%EC%97%90-%EC%A3%BC%EA%B8%B0%EC%A0%81%EC%9C%BC%EB%A1%9C-%ED%88%AC%EC%9E%90%ED%95%98%EB%9D%BC&quot; aria-label=&quot;tip 8 지식 포트폴리오에 주기적으로 투자하라 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tip 8. 지식 포트폴리오에 주기적으로 투자하라.&lt;/h2&gt;
&lt;/blockquote&gt;
&lt;p&gt;본 책에서는 다음과 같은 방법을 제안함.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;매년 새 언어를 하나씩 배워라.&lt;/li&gt;
&lt;li&gt;기술 서적을 분기마다 하나씩 읽어라.&lt;/li&gt;
&lt;li&gt;비기술 서적을 읽어라. 심리학, 문화인류학, 건축학, 경영학 이런 것들 조차도..&lt;/li&gt;
&lt;li&gt;수업을 들어라. 각종 세미나, 컨퍼런스에 가보라는 말.&lt;/li&gt;
&lt;li&gt;지역 사용자 모임에 참여하라. 고립되면 안된다. 개발자 모임에 가서 새로운 피를 계속 수혈받아야한다.&lt;/li&gt;
&lt;li&gt;다른 환경에서 실험해보라. 윈도우도 써보고 맥도 써보고 유닉스도 써보고 하여튼 다 써봐야함. ./configure, makefile, make도 해봐야되고 IDE도 써봐야되고 하여튼 다 써봐야한다.&lt;/li&gt;
&lt;li&gt;트렌드를 계속 파악하고 있어야한다. subscribe! 이메일 노트도 계속 봐야한다. 맨날 쓰레기통에 주떤지지 말고&lt;/li&gt;
&lt;li&gt;인터넷을 이용하라. 구글께서는 답을 알고계신다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;http://wiki.kldp.org/wiki.php/DocbookSgml/Beginner_QA-KLDP&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;질문하는 방법&lt;/a&gt;은 kldp에도 있다. 그런 구루들에게 많이 물어서 답을 내꺼로 하자!&lt;/p&gt;
&lt;p&gt;비판적인 사고는 중요하다. ‘내 말이 옳다!’ 하는 미치광이를 멀리해야한다. 어떤 문제에 대해 무조건 풀 수 있는 답 같은건 없다. 주어진 문제를 풀 수 있는 방법은 다양하기 때문이다. 하지만 때로는 아름다운 단 하나의 답만이 존재할 수도 있다.&lt;/p&gt;
&lt;p&gt;kldp의 어느 사람의 말을 기억하자.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;프로그래밍 언어는 목적이 아니라 수단일 뿐입니다.
Buzz와 Fanboyism에 휘둘리기 보다는
하고 있는 일이 잘되게 하는 Getting Things Done에 집중하시길 추천드립니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;h2 id=&quot;tip-9-읽고-듣는-것을-비판적으로-분석하라&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tip-9-%EC%9D%BD%EA%B3%A0-%EB%93%A3%EB%8A%94-%EA%B2%83%EC%9D%84-%EB%B9%84%ED%8C%90%EC%A0%81%EC%9C%BC%EB%A1%9C-%EB%B6%84%EC%84%9D%ED%95%98%EB%9D%BC&quot; aria-label=&quot;tip 9 읽고 듣는 것을 비판적으로 분석하라 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tip 9. 읽고 듣는 것을 비판적으로 분석하라.&lt;/h2&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;6-소통하라&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#6-%EC%86%8C%ED%86%B5%ED%95%98%EB%9D%BC&quot; aria-label=&quot;6 소통하라 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;6. 소통하라!&lt;/h2&gt;
&lt;p&gt;앞서 말한걸 다 할 수 있어도 다른사람과 함께 일할 수 없다면 아무 쓸모가 없다. 혼자 일하는 프로그래머는 거의 없고 있어도 다른 누군가하고 분명 소통하고 있을 것이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;내가 말하고 싶은게 뭔지 파악하자.
문서에 서론, 본론, 결론 나눠서 생각하는 만큼 말할때도 다듬어서 하면 서로 좋다. 나는 할말 바로하고, 상대방은 바로 알아먹으니까.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;청중을 파악하자.
쓸데없이 말 할 필요가 없다. WISDOM principle을 파악하고 써먹으면 그럴 필요가 없어진다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;WISDOM: 청중 이해하기(내 말을 듣는 사람이 어떤가?)&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;키워드&lt;/th&gt;
&lt;th&gt;내용&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;What&lt;/td&gt;
&lt;td&gt;듣는 사람이 무엇을 배우길 원하는가?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Interest&lt;/td&gt;
&lt;td&gt;듣는 사람이 관심있어 하는 것은 무엇인가?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sophisticated&lt;/td&gt;
&lt;td&gt;듣는 이들이 얼마나 소양이있나?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Detail&lt;/td&gt;
&lt;td&gt;듣는 이들이 어느정도의 구체적인 내용을 원하나?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Owe&lt;/td&gt;
&lt;td&gt;누가 정보를 소유하길 원하나?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Motive&lt;/td&gt;
&lt;td&gt;듣는 이가 경청하도록 동기를 주려면 어떻게 해야할까?&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;듣는사람을 &lt;code class=&quot;language-text&quot;&gt;여섯가지&lt;/code&gt;로 먼저 파악하고 말하면 이해도가 빠르다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;언제 내가 말하면 상대방이 잘 들을까?
상대방이 듣고싶어하는 때를 잘 캐치해서 말하는 것이 좋다. 듣는이의 우선순위를 고려하는 것이 좋은 방법이 될 것이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;말하는 스타일을 골라라.
말하는 스타일이 듣는 사람이 듣고싶어하는 대로 해줘야 좋아하게 된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;멋져보이게 하라.
아래아 한글을 써도 간지나게 쓰는 사람이 있는가하면 파워포인트를 써도 그놈의 보노보노를 쓰는 사람이 있다. 뭐가 나를 돋보이게 할까? 적어도 내가 쓰는 툴의 다양한 기능을 찾아서 간지나게 해야 보는 사람도 좋고 만든 사람도 뿌듯하지 않을까?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;청중을 참여시켜라
문서의 초고를 독자가 보고 맘에든다/이건 싫다 하는걸로 피드백을 받을 수 있으면 도움이 된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;청자(listener)가 되어라
내가 상대 말을 먼저 잘 들어야(경청해야) 남도 내 말을 들어준다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;응답하라
대답은 해줘야 핑퐁대화가 될 것 아니냐.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;cf) 이메일 의사소통:
구글 검색해라&lt;/p&gt;
&lt;blockquote&gt;
&lt;h2 id=&quot;tip-10-무엇을-말하는가와-어떻게-말하는가-모두-중요하다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tip-10-%EB%AC%B4%EC%97%87%EC%9D%84-%EB%A7%90%ED%95%98%EB%8A%94%EA%B0%80%EC%99%80-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%A7%90%ED%95%98%EB%8A%94%EA%B0%80-%EB%AA%A8%EB%91%90-%EC%A4%91%EC%9A%94%ED%95%98%EB%8B%A4&quot; aria-label=&quot;tip 10 무엇을 말하는가와 어떻게 말하는가 모두 중요하다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tip 10. &lt;code class=&quot;language-text&quot;&gt;무엇을&lt;/code&gt; 말하는가와 &lt;code class=&quot;language-text&quot;&gt;어떻게&lt;/code&gt; 말하는가 모두 중요하다&lt;/h2&gt;
&lt;/blockquote&gt;</content:encoded></item><item><title><![CDATA[실용주의 프로그래머 pt. 1]]></title><description><![CDATA[실용주의 프로그래머 2nd edition을 읽은 후... pt. 1]]></description><link>https://blog.s3ich4n.me/books/2018-02-21-pragmatic-programmer-pt01</link><guid isPermaLink="false">https://blog.s3ich4n.me/books/2018-02-21-pragmatic-programmer-pt01</guid><pubDate>Wed, 21 Feb 2018 00:00:00 GMT</pubDate><content:encoded>&lt;h3 id=&quot;읽기에-앞서&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9D%BD%EA%B8%B0%EC%97%90-%EC%95%9E%EC%84%9C&quot; aria-label=&quot;읽기에 앞서 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;읽기에 앞서…&lt;/h3&gt;
&lt;p&gt;실용주의 프로그래머를 읽고 느낀점을 써보려고 합니다. 제가 느낀바로는 이러한 내용이다 하는 방향으로 기술할 것 같습니다.&lt;/p&gt;
&lt;h1 id=&quot;preface&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#preface&quot; aria-label=&quot;preface permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Preface&lt;/h1&gt;
&lt;p&gt;이 책은 서장부터 바로 주요한 내용이 나오기 때문에 특별히 실었다.&lt;/p&gt;
&lt;p&gt;좋은 프로그래머가 되고싶으면 실용주의 프로그래머가 되도록 노력하면 된다.&lt;/p&gt;
&lt;p&gt;실용주의 프로그래머가 되려면?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;얼리어답터.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;신기술을 받아들이는데 적극적이어야 하는 성향을 지니면 좋다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;캐묻기 좋아한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;‘왜?‘의 중요함. 모르면 검색할 줄 아는 적극성.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;비판적인 사고의 소유자&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;인과관계를 확실히 짚을 줄 아는 사람이 되면 좋다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;현실적이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;내가 마주하는 문제가 어렵나/쉽나, 그로 인해 시간이 얼마나 걸리나를 바로 파악할 수 있는 사람을 말한다.설령 오래 걸린다 해도 얼마만큼 붙잡고 해결할 것인지까지 견적을 내보고 집요하게 달라든다고 할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;다방면의 기술에 익숙하다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;신기술을 계속 접할 필요가 있다! 후에 다시 나올 이야기이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;h2 id=&quot;tip-1-자신의-기술craft에-관심과-애정을-가져라&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tip-1-%EC%9E%90%EC%8B%A0%EC%9D%98-%EA%B8%B0%EC%88%A0craft%EC%97%90-%EA%B4%80%EC%8B%AC%EA%B3%BC-%EC%95%A0%EC%A0%95%EC%9D%84-%EA%B0%80%EC%A0%B8%EB%9D%BC&quot; aria-label=&quot;tip 1 자신의 기술craft에 관심과 애정을 가져라 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tip 1. 자신의 기술(craft)에 관심과 애정을 가져라!&lt;/h2&gt;
&lt;/blockquote&gt;
&lt;p&gt;내가 하는 일에 관심과 애정이 없으면 그건 차라리 고문이다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h2 id=&quot;tip-2-자신의-일에-생각하면서-일하라&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tip-2-%EC%9E%90%EC%8B%A0%EC%9D%98-%EC%9D%BC%EC%97%90-%EC%83%9D%EA%B0%81%ED%95%98%EB%A9%B4%EC%84%9C-%EC%9D%BC%ED%95%98%EB%9D%BC&quot; aria-label=&quot;tip 2 자신의 일에 생각하면서 일하라 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tip 2. 자신의 일에 생각하면서 일하라!&lt;/h2&gt;
&lt;p&gt;내가 하는 모든일에 있어 항상 지속적으로 비판적으로 쳐다볼 필요가 있다. 기계적으로 일하지 마라!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;이건 분명 귀찮고 힘들다. 이런 일을 계속 하면 효율적이고 유지보수 쉬운 코드를 짜게되고, 비로소 ‘실용적인 프로그래머’가 될 수 있다.&lt;/p&gt;
&lt;p&gt;장인정신은 이렇기 때문에 중요하다.&lt;/p&gt;</content:encoded></item></channel></rss>