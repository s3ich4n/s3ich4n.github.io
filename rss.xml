<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[팔공산 창고]]></title><description><![CDATA[Veritas vos liberabit.]]></description><link>https://blog.s3ich4n.me</link><generator>GatsbyJS</generator><lastBuildDate>Mon, 21 Feb 2022 13:02:55 GMT</lastBuildDate><item><title><![CDATA[Gatsby 로 갈아타다]]></title><description><![CDATA[주인장이 어쩌다가 Gatsby 로 가게되었는지 설명합니다.]]></description><link>https://blog.s3ich4n.me/posts/devlog/frontends/migrate-from-jekyll-to-gatsby</link><guid isPermaLink="false">https://blog.s3ich4n.me/posts/devlog/frontends/migrate-from-jekyll-to-gatsby</guid><pubDate>Sat, 19 Feb 2022 04:30:00 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;이 게시글은 주인장이 Jekyll을 잘 쓰다가 Gatsby로 넘어가게 된 썰입니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;tldr&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tldr&quot; aria-label=&quot;tldr permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TL;DR&lt;/h1&gt;
&lt;p&gt;제가 추구하는 기술스택과 유사하며, 풍부한 레퍼런스를 가지고, customizable이 쉽기 때문에 골랐습니다.&lt;/p&gt;
&lt;h2 id=&quot;이전은-왜-했나요&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9D%B4%EC%A0%84%EC%9D%80-%EC%99%9C-%ED%96%88%EB%82%98%EC%9A%94&quot; aria-label=&quot;이전은 왜 했나요 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;이전은 왜 했나요?&lt;/h2&gt;
&lt;p&gt;정리를 해봤습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;가져온 블로그 틀을 Ruby로 고칠 자신이 없었습니다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Gatsby는 React로 짜져있고, 내부적으로 GraphQL로 정적 정보를 가져오도록 되어 있습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;이래저래 기술적으로 가질 메리트가 많아보였습니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;추후 필요한 기능들을 이런저런 곳에서 갖다붙이기가 “비교적” 쉬워보였습니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;여담으로&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%97%AC%EB%8B%B4%EC%9C%BC%EB%A1%9C&quot; aria-label=&quot;여담으로 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;여담으로?&lt;/h2&gt;
&lt;p&gt;사실 글을 꾸준히 쓰는게 더 중요하지요. 블로그 게시글은 꾸준함이 필수니까요..&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Docker pt.02 도커를 자세히 알아보자]]></title><description><![CDATA[Docker를 알아봅시다. (2번째 글)]]></description><link>https://blog.s3ich4n.me/posts/devlog/devops/docker-explained-pt02</link><guid isPermaLink="false">https://blog.s3ich4n.me/posts/devlog/devops/docker-explained-pt02</guid><pubDate>Sat, 18 May 2019 12:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;도커의-개념에-대해-알아보자&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8F%84%EC%BB%A4%EC%9D%98-%EA%B0%9C%EB%85%90%EC%97%90-%EB%8C%80%ED%95%B4-%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90&quot; aria-label=&quot;도커의 개념에 대해 알아보자 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;도커의 개념에 대해 알아보자&lt;/h1&gt;
&lt;p&gt;도커의 방식에 따라 개발을 한다고 하면 아래와 같다:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;컨테이너 구축: 앱&lt;/li&gt;
&lt;li&gt;서비스를 구축: 컨테이너가 어떻게 프로덕션 환경에서 작동하는가를 정의&lt;/li&gt;
&lt;li&gt;스택을 구축: 모든 서비스 간 상호작용에 대해 정의&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;새로운-환경을-구축하는-방식&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%83%88%EB%A1%9C%EC%9A%B4-%ED%99%98%EA%B2%BD%EC%9D%84-%EA%B5%AC%EC%B6%95%ED%95%98%EB%8A%94-%EB%B0%A9%EC%8B%9D&quot; aria-label=&quot;새로운 환경을 구축하는 방식 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;새로운 환경을 구축하는 방식&lt;/h2&gt;
&lt;p&gt;원래는 가상환경을 설치하고 요구사항을 적어줘야했다면 이미지로 파이썬 런타임을 얻어둔다. 그 후 빌드는 기존의 파이썬 이미지를 코드에 추가하여 앱, 의존성, 런타임이 동시에 돌아가도록 한다. 이런류의 가상 이미지는 &lt;code class=&quot;language-text&quot;&gt;Dockerfile&lt;/code&gt;안에 정의된다.&lt;/p&gt;
&lt;h2 id=&quot;컨테이너를-dockerfile과-함께-정의&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88%EB%A5%BC-dockerfile%EA%B3%BC-%ED%95%A8%EA%BB%98-%EC%A0%95%EC%9D%98&quot; aria-label=&quot;컨테이너를 dockerfile과 함께 정의 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;컨테이너를 &lt;code class=&quot;language-text&quot;&gt;Dockerfile&lt;/code&gt;과 함께 정의&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Dockerfile&lt;/code&gt;은 컨테이너 안에 뭐가 들어갈지 에 대해 정의한 것이다. 네트워크 인터페이스, 디스크 드라이브처럼 리소스에 접근하는 것은 환경내에 가상화 되어있으며 이 것들은 시스템의 나머지와 격리되어있다. 그렇기 때문에 외부에 나가는 포트를 매핑해줘야하고, 어떤 파일이 환경설정에 복사되는지 구체화해야 한다. 이런식으로 정의 한 후에는 &lt;code class=&quot;language-text&quot;&gt;Dockerfile&lt;/code&gt;에 정의된 앱의 빌드가 어디서든 똑같이 작동한다고 할 수 있다.&lt;/p&gt;
&lt;h2 id=&quot;빌드까지-해보자&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B9%8C%EB%93%9C%EA%B9%8C%EC%A7%80-%ED%95%B4%EB%B3%B4%EC%9E%90&quot; aria-label=&quot;빌드까지 해보자 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;빌드까지 해보자&lt;/h2&gt;
&lt;p&gt;여기서부터는 Docker의 공식문서와 똑같다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;도커 &lt;strong&gt;이미지&lt;/strong&gt; 를 만든다(&lt;code class=&quot;language-text&quot;&gt;build&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;도커 이미지에 tag를 붙인다&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그 후?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;로컬에서 돌린다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;로컬에 도는 &lt;strong&gt;컨테이너&lt;/strong&gt; 를 &lt;code class=&quot;language-text&quot;&gt;docker container ls&lt;/code&gt; 로 확인한다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;배포한다 (이를테면 &lt;code class=&quot;language-text&quot;&gt;push&lt;/code&gt;로)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;registry&lt;/code&gt;에 배포한다; 이는 리포지토리의 컬렉션&lt;/li&gt;
&lt;li&gt;리포지토리는 이미지의 컬렉션; 코드가 이미 빌드되어있다는 점을 빼고는 github 리포랑 비슷한 느낌&lt;/li&gt;
&lt;li&gt;docker hub에 docker login을 하고 &lt;code class=&quot;language-text&quot;&gt;push&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;service는-무슨-개념인가&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#service%EB%8A%94-%EB%AC%B4%EC%8A%A8-%EA%B0%9C%EB%85%90%EC%9D%B8%EA%B0%80&quot; aria-label=&quot;service는 무슨 개념인가 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Service는 무슨 개념인가?&lt;/h1&gt;
&lt;p&gt;앱 로드밸런싱과 앱 스케일 조절도 가능해진다. 분산 앱에서는 여러 부분의 앱을 가지고 “services” 라고 부른다. 예를들어 동영상 공유 사이트가 있다고 하자. 거기엔 앱 데이터를 DB에 저장하는 서비스, 사용자가 업로드 후 비디오 인/디코딩을 수행하는 서비스, 프론트엔드 서비스, 등이 있을 것이다.&lt;/p&gt;
&lt;p&gt;“service”는 &quot;&quot; 이다. 서비스는 하나의 이미지에서만 돌아가지만, 이미지가 돌아가는 방식을 기술해둔다. 예를들면 몇번 포트가 써져야하는지, 몇가지 컨테이너 복제본이 돌아서 얼마나 버틸지 등이 대표적이다. 서비스를 “스케일링” 하는 것은 소프트웨어 조각을 돌리는 컨테이너 수를 변경하는 것이며, 이는 프로세스 내의 서비스에 많은 컴퓨팅 리소스를 할당하는 것이다.&lt;/p&gt;
&lt;p&gt;이런 것들은 도커에선 굉장히 간단하다. &lt;code class=&quot;language-text&quot;&gt;docker-compose.yml&lt;/code&gt; 파일을 만들고 수정하면 되기 때문이다. 도커 공식문서의 예시를 보고 파악해보자.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;yaml&quot;&gt;&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;3&quot;&lt;/span&gt;
&lt;span class=&quot;token key atrule&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;# web이라는 이름의 서비스를 돌림&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;web&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; s3ich4n/get&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;started&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;pt02
    &lt;span class=&quot;token key atrule&quot;&gt;deploy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;# 몇개의 동일한 컨테이너를 굴릴건지?&lt;/span&gt;
      &lt;span class=&quot;token key atrule&quot;&gt;replicas&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt; 
      &lt;span class=&quot;token key atrule&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token key atrule&quot;&gt;limits&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;token comment&quot;&gt;# 컨테이너당 10%의 CPU 싱글코어 시간만큼 돌고 메모리는 50M 쓴다&lt;/span&gt;
          &lt;span class=&quot;token key atrule&quot;&gt;cpus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;0.1&quot;&lt;/span&gt;
          &lt;span class=&quot;token key atrule&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 50M
        &lt;span class=&quot;token key atrule&quot;&gt;restart_policy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;token comment&quot;&gt;# 하나가 문제가 생기면 바로 재시작&lt;/span&gt;
          &lt;span class=&quot;token key atrule&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; on&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;failure
    &lt;span class=&quot;token key atrule&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;4000:80&quot;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# 4000번을 80번으로 매핑&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;# &apos;web&apos;의 컨테이너가 80번 포트를 webnet 이라하는&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;# 로드밸런스 네트워크에 공유하도록 세팅함&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; webnet 
&lt;span class=&quot;token key atrule&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;# webnet 네트워크를 기본값으로 둠&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;# 이는 로드밸런스 오버레이 네트워크다&lt;/span&gt;
  webnet&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;로드밸런스가-적용된-앱을-굴려보자&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A1%9C%EB%93%9C%EB%B0%B8%EB%9F%B0%EC%8A%A4%EA%B0%80-%EC%A0%81%EC%9A%A9%EB%90%9C-%EC%95%B1%EC%9D%84-%EA%B5%B4%EB%A0%A4%EB%B3%B4%EC%9E%90&quot; aria-label=&quot;로드밸런스가 적용된 앱을 굴려보자 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;로드밸런스가 적용된 앱을 굴려보자&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;docker stack deploy&lt;/code&gt;를 쓰기 전에 아래 명령어를 먼저 입력하자.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;docker swarm init&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;이걸 안치면 이런 에러가 난다: &lt;code class=&quot;language-text&quot;&gt;this node is not a swarm manager&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;그 후 앱 이름을 하나 만들어주면 된다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;docker stack deploy -c docker-compose.yml getstartedlab&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;이런 식으로 돌리면 5개의 컨테이너가 돌거다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;docker-compose.yml&lt;/code&gt;을 바꾸고 &lt;code class=&quot;language-text&quot;&gt;docker stack deploy&lt;/code&gt;를 다시 실행시키면 된다. 껐다가 재부팅할 필요는 없다.&lt;/p&gt;
&lt;p&gt;은근히 나오는 &lt;code class=&quot;language-text&quot;&gt;swarm&lt;/code&gt;의 개념은 아래에서 설명하도록 한다.&lt;/p&gt;
&lt;h1 id=&quot;swarm은-어떤-개념인가&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#swarm%EC%9D%80-%EC%96%B4%EB%96%A4-%EA%B0%9C%EB%85%90%EC%9D%B8%EA%B0%80&quot; aria-label=&quot;swarm은 어떤 개념인가 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Swarm은 어떤 개념인가?&lt;/h1&gt;
&lt;p&gt;앱을 클러스터에 올리고 여러 머신에서 구동하는 것도 가능하다. 멀티컨테이너, 멀티머신앱을 일종의 도커로 묶인(&lt;code class=&quot;language-text&quot;&gt;Dockerized&lt;/code&gt;) 클러스터로 쓸 수 있다. 이들은 &lt;code class=&quot;language-text&quot;&gt;Swarm&lt;/code&gt;(이하 스웜)이라고 부른다.&lt;/p&gt;
&lt;h2 id=&quot;swarm-클러스터에-대해&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#swarm-%ED%81%B4%EB%9F%AC%EC%8A%A4%ED%84%B0%EC%97%90-%EB%8C%80%ED%95%B4&quot; aria-label=&quot;swarm 클러스터에 대해 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Swarm 클러스터에 대해&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Swarm&lt;/code&gt;은 도커가 작동중이고, 클러스터로 묶인 머신의 그룹이다. 묶이고 난 후에도 도커 커맨드는 그대로 쓸 수 있다. 그렇지만 &lt;code class=&quot;language-text&quot;&gt;swarm manager&lt;/code&gt;에 의해 클러스터 상에서 수행된다. 스웜에 포함된 머신은 물리적일수도, 가상일 수도 있다. 스웜에 포함된 후에는 &lt;code class=&quot;language-text&quot;&gt;node&lt;/code&gt;라고 부른다.&lt;/p&gt;
&lt;p&gt;스웜 매니저는 여러 정책을 사용해서 컨테이너를 돌릴 수 있다. 크게 두가지 모드가 있는데, &lt;code class=&quot;language-text&quot;&gt;emptiest node&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;global&lt;/code&gt;이 그것이다. &lt;code class=&quot;language-text&quot;&gt;emptiest node&lt;/code&gt;는 가장 적게 쓰이는 머신과 컨테이너를 채우는 방식이다. &lt;code class=&quot;language-text&quot;&gt;global&lt;/code&gt;은 각각의 머신들이 정확히 특정한 컨테이너 하나를 가진다고 가정하는 방식이다. 운영시에는 스웜 매니저가 Compose 파일에 이런 정책을 사용하도록 지시한다. 하나의 컨테이너에 대해 하던 것과 비슷하다.&lt;/p&gt;
&lt;p&gt;스웜 매니저는 명령어를 수행하거나 다런 머신이 swarm에 &lt;code class=&quot;language-text&quot;&gt;worker&lt;/code&gt;로 들어갈 수 있는 권한을 주는 스웜의 유일한 머신이다. &lt;code class=&quot;language-text&quot;&gt;worker&lt;/code&gt;는 단순히 capacity만을 제공하고 다른기계에게 무엇은 할 수 있고, 무엇은 할 수 없고 를 말할 권한이 없다.&lt;/p&gt;
&lt;p&gt;지금까지의 예제는 로컬에서 single-host모드로 도커를 사용했지만, 도커는 swarm mode로 스왑할 수 있다. 이 모드가 스웜을 사용할 수 있게 해준다. 스웜모드를 바로 켜면 현재 머신을 스웜매니저로 만든다. 그 때부터 도커는 본인이 관리하는 스웜에 입력한 명령을 수행한다. 현재 머신이 일을 수행하지 않음에 유의하라.&lt;/p&gt;
&lt;h2 id=&quot;스웜-세팅하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8A%A4%EC%9B%9C-%EC%84%B8%ED%8C%85%ED%95%98%EA%B8%B0&quot; aria-label=&quot;스웜 세팅하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;스웜 세팅하기&lt;/h2&gt;
&lt;p&gt;스웜은 앞서 말했다시피 여러개의 물리/가상노드로 구성되어있다. 스웜을 세팅하는 기본 개념은 다음과 같다. &lt;code class=&quot;language-text&quot;&gt;docker swarm init&lt;/code&gt;을 수행해서 스웜 모드에 돌입해서 현재 머신을 스웜 매니저로 만든다. 그후 다른 머신이 &lt;code class=&quot;language-text&quot;&gt;docker swarm join&lt;/code&gt;을 입력하여 스웜에 worker로 들어오게 한다. 클러스터를 로컬 VM같은걸로 해서 실습하는 세션을 따라해보자.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;docker-machine&lt;/code&gt;을 통해 여러개의 가상머신을 구축&lt;/li&gt;
&lt;li&gt;VM리스트를 보고 IP 확인하기&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;swarm 초기화 및 node 추가&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;docker-machine ssh myvm1 &quot;docker swarm init --advertise-addr &amp;lt;myvm1 ip&gt;&quot;&lt;/code&gt; 을 수행하면 &lt;code class=&quot;language-text&quot;&gt;myvm1&lt;/code&gt; 노드는 스웜 매니저가 된다.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;$ docker-machine &lt;span class=&quot;token function&quot;&gt;ssh&lt;/span&gt; myvm1 &lt;span class=&quot;token string&quot;&gt;&quot;docker swarm init --advertise-addr &amp;lt;myvm1 ip&gt;&quot;&lt;/span&gt;
Swarm initialized: current &lt;span class=&quot;token function&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;node ID&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; is now a manager.

To &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; a worker to this swarm, run the following command:

  &lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; swarm &lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;
  --token &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;token&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;myvm ip&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;:&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;port&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;

To &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; a manager to this swarm, run &lt;span class=&quot;token string&quot;&gt;&apos;docker swarm join-token manager&apos;&lt;/span&gt; and follow the instructions.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Tip: 2377, 2376포트?&lt;/p&gt;
&lt;p&gt;해당 포트는 도커의 스웜 관리용 포트로 쓰인다. 가급적 해당 포트를 피해서 사용하기를 권장한다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;docker-machine ssh myvm2 &quot;docker swarm join --token &amp;lt;token&gt; &amp;lt;ip&gt;:2377&quot;&lt;/code&gt;를 수행하면 해당 노드는 worker가 된다.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;Tip: 스웜을 나가려면?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;docker swarm leave&lt;/code&gt;를 각 노드별로 실행하기.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;앱을 swarm cluster 상에서 구동하기:&lt;br&gt;
&lt;strong&gt;스웜 매니저&lt;/strong&gt;가 도커 명령을 수행할 수 있다는 점을 염두에 두고 작업하자!&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;스웜 매니저의 명령을 바로 수행하기 위해 옵션을 가져오자&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;$ docker-machine &lt;span class=&quot;token function&quot;&gt;env&lt;/span&gt; myvm1
&lt;span class=&quot;token builtin class-name&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;DOCKER_TLS_VERIFY&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;1&quot;&lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;DOCKER_HOST&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;tcp://192.168.99.100:2376&quot;&lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;DOCKER_CERT_PATH&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/Users/sam/.docker/machine/machines/myvm1&quot;&lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;DOCKER_MACHINE_NAME&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;myvm1&quot;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# Run this command to configure your shell:&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# eval $(docker-machine env myvm1)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;그 후 &lt;code class=&quot;language-text&quot;&gt;myvm1&lt;/code&gt;에서 해당 명령어를 실행시켜 앱을 배포하자!&lt;br&gt;
&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;docker stack deploy -c docker-compose.yml getstartedlab&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;Docker Hub의 private registry에 있다면 docker login을 먼저 하고&lt;br&gt;
스웜노드들이 그걸 알고있어야한다!&lt;/p&gt;
&lt;p&gt;따라서 먼저 로그인을 하고 &lt;code class=&quot;language-text&quot;&gt;--with-registry-auth -c&lt;/code&gt; 옵션을 함께 주면 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; login registry.example.com
&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.
$ &lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; stack deploy --with-registry-auth -c docker-compose.yml getstartedlab
&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이런식으로 로컬에서 스웜 노드들에게 토큰을 보내주어야 정상접근이 가능하다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;설정이 끝나고 &lt;code class=&quot;language-text&quot;&gt;192.168.99.100&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;192.168.99.101&lt;/code&gt; 둘다 접근하면 앱이 뜬다.&lt;br&gt;
로컬에서 연습할 때는 도커 켜고 실행하는거 까먹지 말고 돌리기!&lt;/p&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;stack 및 swarm을 끄려면?&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;docker stack rm getstartedlab&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Tip: &lt;code class=&quot;language-text&quot;&gt;docker swarm leave&lt;/code&gt;를 수행하면&lt;br&gt;
현재 속한 스웜에서 나간다. (매니저일 때는 &lt;code class=&quot;language-text&quot;&gt;--force&lt;/code&gt;옵션 필요!)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;6&quot;&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;docker-machine&lt;/code&gt;쉘 환경변수 해지하기&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;eval $(docker-machine env -u)&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;stack은-어떤-개념인가&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#stack%EC%9D%80-%EC%96%B4%EB%96%A4-%EA%B0%9C%EB%85%90%EC%9D%B8%EA%B0%80&quot; aria-label=&quot;stack은 어떤 개념인가 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Stack은 어떤 개념인가?&lt;/h1&gt;
&lt;p&gt;분산앱의 가장 끝자락에 있는 &lt;code class=&quot;language-text&quot;&gt;Stack&lt;/code&gt;이란 개념은, 의존성을 공유하는 상호연관된 서비스들의 그룹이다. 또한 함께 orchestrate되고 스케일을 조절받을 수 있다. 단일 스택은 전체 응용 프로그램의 기능을 정의하고 조정할 수 있다(매우 복잡한 응용 프로그램이 여러 스택을 사용할 수도 있음). 여러 서비스를 같이 한다고 했을 때를 생각해보자! &lt;code class=&quot;language-text&quot;&gt;docker-compose.yml&lt;/code&gt;을 수정하고 예제를 따라해보며 이해해보자. indent에 주의!&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;docker-compose.yml&lt;/code&gt; 수정하기 (1) &lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;visualiser&lt;/code&gt; 추가하기&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;yaml&quot;&gt;&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# yml은 indent에 굉장히 민감하기 때문에 더 꼼꼼하게 봐야함&lt;/span&gt;

&lt;span class=&quot;token key atrule&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;3&quot;&lt;/span&gt;

&lt;span class=&quot;token key atrule&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;# web이라는 이름의 서비스를 돌림&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;web&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; s3ich4n/get&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;started&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;pt2
    &lt;span class=&quot;token key atrule&quot;&gt;deploy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;# 몇개의 동일한 컨테이너를 굴릴건지?&lt;/span&gt;
      &lt;span class=&quot;token key atrule&quot;&gt;replicas&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; 
      &lt;span class=&quot;token key atrule&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token key atrule&quot;&gt;limits&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;token comment&quot;&gt;# 컨테이너당 10%의 CPU 싱글코어 시간만큼 돌고 메모리는 50M 쓴다&lt;/span&gt;
          &lt;span class=&quot;token key atrule&quot;&gt;cpus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;0.1&quot;&lt;/span&gt;
          &lt;span class=&quot;token key atrule&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;50M&quot;&lt;/span&gt;
      &lt;span class=&quot;token key atrule&quot;&gt;restart_policy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;token comment&quot;&gt;# 하나가 문제가 생기면 바로 재시작&lt;/span&gt;
        &lt;span class=&quot;token key atrule&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; on&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;failure
    &lt;span class=&quot;token key atrule&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;4000:80&quot;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# 4000번을 80번으로 매핑&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;# &apos;web&apos;의 컨테이너가 80번 포트를 webnet 이라하는&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;# 로드밸런스 네트워크에 공유하도록 세팅함&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; webnet
  &lt;span class=&quot;token key atrule&quot;&gt;visualizer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; dockersamples/visualizer&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;stable
    &lt;span class=&quot;token key atrule&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;8080:8080&quot;&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/var/run/docker.sock:/var/run/docker.sock&quot;&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;deploy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token key atrule&quot;&gt;placement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token key atrule&quot;&gt;constraints&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;node.role == manager&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; webnet
&lt;span class=&quot;token key atrule&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;# webnet 네트워크를 기본값으로 둠&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;# 이는 로드밸런스 오버레이 네트워크다&lt;/span&gt;
  webnet&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;  visualiser라는 서비스가 하나 더 추가됐고, 그 속에 &lt;code class=&quot;language-text&quot;&gt;volumes&lt;/code&gt;라는 키와 &lt;code class=&quot;language-text&quot;&gt;placement&lt;/code&gt;라는 키가 함께 추가되었다. &lt;code class=&quot;language-text&quot;&gt;volumes&lt;/code&gt;는 &lt;code class=&quot;language-text&quot;&gt;visualiser&lt;/code&gt;가 호스트의 도커를 위한 소켓파일에 접근권한을 주는 것이고, &lt;code class=&quot;language-text&quot;&gt;placement&lt;/code&gt;는 해당 서비스가 오직 스웜 매니저에서만 작동하도록 하는 것이다(워커는 안됨).
이 키를 준 이유는 &lt;a href=&quot;https://github.com/dockersamples/docker-swarm-visualizer&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;visualiser가 그렇게 만들어져셔&lt;/a&gt;다.&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;myvm1&lt;/code&gt; 환경변수를 로드 후 쉘 조작&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;  위 그림과 같이 &lt;code class=&quot;language-text&quot;&gt;visualiser&lt;/code&gt;는 하나의 단일 이미지를 갖고있고, &lt;code class=&quot;language-text&quot;&gt;web&lt;/code&gt; 인스턴스는 스웜에 나누어져있다. &lt;code class=&quot;language-text&quot;&gt;docker stack ps getstartedlab&lt;/code&gt;으로도 확인할 수 있다. &lt;code class=&quot;language-text&quot;&gt;visualiser&lt;/code&gt;는 스택이 포함된 모든 앱에서 실행할 수 있는 스탠드얼론 서비스다. 다른 것에 의존하지 않는다. 이번엔 &lt;strong&gt;의존&lt;/strong&gt;하는 서비스를 달아보자. &lt;code class=&quot;language-text&quot;&gt;Redis&lt;/code&gt;를 통해 방문자 카운트를 수행하는 서비스이다.&lt;/p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;docker-compose.yml&lt;/code&gt; 수정하기 (2)&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;redis&lt;/code&gt; 추가하기&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;yaml&quot;&gt;&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# yml은 indent에 굉장히 민감하기 때문에 더 꼼꼼하게 봐야함&lt;/span&gt;

&lt;span class=&quot;token key atrule&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;3&quot;&lt;/span&gt;

&lt;span class=&quot;token key atrule&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;# web이라는 이름의 서비스를 돌림&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;web&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; s3ich4n/get&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;started&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;pt2
    &lt;span class=&quot;token key atrule&quot;&gt;deploy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;# 몇개의 동일한 컨테이너를 굴릴건지?&lt;/span&gt;
      &lt;span class=&quot;token key atrule&quot;&gt;replicas&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;
      &lt;span class=&quot;token key atrule&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token key atrule&quot;&gt;limits&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;token comment&quot;&gt;# 컨테이너당 10%의 CPU 싱글코어 시간만큼 돌고 메모리는 50M 쓴다&lt;/span&gt;
          &lt;span class=&quot;token key atrule&quot;&gt;cpus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;0.1&quot;&lt;/span&gt;
          &lt;span class=&quot;token key atrule&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;50M&quot;&lt;/span&gt;
      &lt;span class=&quot;token key atrule&quot;&gt;restart_policy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;token comment&quot;&gt;# 하나가 문제가 생기면 바로 재시작&lt;/span&gt;
        &lt;span class=&quot;token key atrule&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; on&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;failure
    &lt;span class=&quot;token key atrule&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;4000:80&quot;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# 4000번을 80번으로 매핑&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;# &apos;web&apos;의 컨테이너가 80번 포트를 webnet 이라하는&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;# 로드밸런스 네트워크에 공유하도록 세팅함&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; webnet
  &lt;span class=&quot;token key atrule&quot;&gt;visualizer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; dockersamples/visualizer&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;stable
    &lt;span class=&quot;token key atrule&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;8080:8080&quot;&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/var/run/docker.sock:/var/run/docker.sock&quot;&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;deploy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token key atrule&quot;&gt;placement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token key atrule&quot;&gt;constraints&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;node.role == manager&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; webnet
  &lt;span class=&quot;token key atrule&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; redis
    &lt;span class=&quot;token key atrule&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;6379:6379&quot;&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/home/docker/data:/data&quot;&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;deploy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token key atrule&quot;&gt;placement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token key atrule&quot;&gt;constraints&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;node.role == manager&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; redis&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;server &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;appendonly yes
    &lt;span class=&quot;token key atrule&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; webnet
&lt;span class=&quot;token key atrule&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;# webnet 네트워크를 기본값으로 둠&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;# 이는 로드밸런스 오버레이 네트워크다&lt;/span&gt;
  webnet&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Redis&lt;/code&gt;는 도커 라이브러리의 공식이미지가 있고, 그렇기에 이름이 저렇게 짧아도 된다. Redis 포트 6379는 컨테이너에서 호스트로 노출되도록 Redis에 의해 사전 구성되어 있다. 여기에서 Compose 파일에는 호스트에서 리얼월드로 노출되므로 실제로 호스트의 IP 주소를 입력 할 수 있다. 필요에 따라 노드를 Redis Desktop Manager로 가져 와서 Redis 인스턴스를 관리할 수도 있다.&lt;/p&gt;
&lt;p&gt;또한 레디스 스펙상에는 몇가지 중요한 사항이 있다. 이것은 구현체들 사이에서 데이터가 변하지 않고 해준다. 다시말해 여러 구현체들이 값을 변경해도 일정하게 유지하도록 해준다는 말이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;redis&lt;/code&gt;는 항상 매니저상에서 돌아간다. 그러므로 동일한 파일 시스템을 사용한다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;redis&lt;/code&gt;는 컨테이너 속의 &lt;code class=&quot;language-text&quot;&gt;/data&lt;/code&gt;라는 호스트의 가상 디렉토리를 접근한다. 이는 &lt;code class=&quot;language-text&quot;&gt;Redis&lt;/code&gt;가 데이터를 저장하는 곳이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이들이 같이 있음으로서 Redis 데이터에 대한 호스트의 물리 파일시스템에 ‘단일정보(source of truth)‘를 만든다. 이 설정이 없다면, &lt;code class=&quot;language-text&quot;&gt;Redis&lt;/code&gt;는 컨테이너 파일 시스템 내의 /data에 그 값을 저장할 것이며, 컨테이너가 재배포되면 값이 사라질 것이다.&lt;/p&gt;
&lt;p&gt;이 ‘단일정보’는 두가지 구성요소를 가지고 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Redis 서비스에 둔 제약조건. 이는 항상 동일한 호스트를 가정한다.&lt;/li&gt;
&lt;li&gt;컨테이너가 호스트의 &lt;code class=&quot;language-text&quot;&gt;./data&lt;/code&gt;를 레디스 컨테이너의 &lt;code class=&quot;language-text&quot;&gt;/data&lt;/code&gt;처럼 접근하도록 한 볼륨. 컨테이너가 동작하는 동안, 특정 호스트의 &lt;code class=&quot;language-text&quot;&gt;./data&lt;/code&gt;에 저장된 파일들이 계속 유지되어 연속성을 유지한다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;./data&lt;/code&gt; 디렉토리를 스웜 매니저에 생성&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;docker-machine ssh myvm1 &quot;mkdir ./data&quot;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;docker stack deploy&lt;/code&gt;를 통해 서비스를 추가&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;$ docker stack deploy -c docker-compose.yml getstartedlab&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;나만의-앱을-deploy하려면&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%82%98%EB%A7%8C%EC%9D%98-%EC%95%B1%EC%9D%84-deploy%ED%95%98%EB%A0%A4%EB%A9%B4&quot; aria-label=&quot;나만의 앱을 deploy하려면 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;나만의 앱을 deploy하려면?&lt;/h1&gt;
&lt;p&gt;크게 두가지가 필요하다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Dockerfile&lt;/code&gt;로 앱 개발&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;docker-compose.yml&lt;/code&gt;로 &lt;code class=&quot;language-text&quot;&gt;Docker app&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;service&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;stack&lt;/code&gt; 환경설정&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 과정을 마치면 &lt;code class=&quot;language-text&quot;&gt;AWS&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;Azure&lt;/code&gt;, 등등 클라우드나 서버에 올리면 될 것이다. 앱이 필요한 프로토콜, 포트를 개방해주는 것도 필요할 것이니 개발시 스스로 알아보고 작업하면 될 것이다. Docker 이미지를 빌드하고 publish하면 어디서든 끌어쓸 수 있을 것이고… &lt;del&gt;나머지는 검색으로 다시 공부하면 될 것이다.&lt;/del&gt; &lt;a href=&quot;https://docs.docker.com/machine/overview/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;이 링크&lt;/a&gt;는 꼭 읽어보길 바란다. 문서를 따라읽으며 공부했다면 정말 크게 도움될 것..&lt;/p&gt;
&lt;h2 id=&quot;references&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#references&quot; aria-label=&quot;references permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.docker.com/get-started/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Get Started pt.02 ~ pt.06&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://subicura.com/2017/02/10/docker-guide-for-beginners-create-image-and-deploy.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;초보를 위한 도커 안내서&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Docker pt.01 도커란 무엇이며, 어떻게 쓰는가?]]></title><description><![CDATA[Docker를 알아봅시다. (1번째 글)]]></description><link>https://blog.s3ich4n.me/posts/devlog/devops/docker-explained-pt02</link><guid isPermaLink="false">https://blog.s3ich4n.me/posts/devlog/devops/docker-explained-pt02</guid><pubDate>Sat, 18 May 2019 12:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;도커가-당최-무어야&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8F%84%EC%BB%A4%EA%B0%80-%EB%8B%B9%EC%B5%9C-%EB%AC%B4%EC%96%B4%EC%95%BC&quot; aria-label=&quot;도커가 당최 무어야 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;도커가 당최 무어야?&lt;/h1&gt;
&lt;h2 id=&quot;what-is-docker&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#what-is-docker&quot; aria-label=&quot;what is docker permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What is Docker?&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Docker&lt;/code&gt; 란 개발자, 관리자가 앱에 대해 개발, 배포, 실행을 컨테이너와 함께 하기위한 플랫폼이다. 리눅스 컨테이너를 통해 앱을 배포하는 쓰임새를 &lt;em&gt;containerization&lt;/em&gt; 이라고 한다.&lt;/p&gt;
&lt;p&gt;containerization은 가면 갈 수록 널리 퍼지고있는데, 그 이유는 다음과 같다:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;flexible함&lt;/li&gt;
&lt;li&gt;경량화 되어있음&lt;/li&gt;
&lt;li&gt;교체가능함&lt;/li&gt;
&lt;li&gt;가벼움&lt;/li&gt;
&lt;li&gt;크기조절이 쉬움&lt;/li&gt;
&lt;li&gt;스택화 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;what-is-images-and-containers-in-docker&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#what-is-images-and-containers-in-docker&quot; aria-label=&quot;what is images and containers in docker permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What is Images and Containers in Docker?&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Container&lt;/code&gt;는 &lt;code class=&quot;language-text&quot;&gt;Image&lt;/code&gt;를 돌리는 것으로 작동된다. &lt;strong&gt;Image&lt;/strong&gt; (이하 이미지)는 실행가능한 패키지이다. 이는 애플리케이션을 돌리기 위해 필요한 모든 것 (코드, 런타임, 라이브러리, 환경설정, 설정파일)을 포함하고 있다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Container&lt;/strong&gt; (이하 컨테이너)는 이미지의 런타임 인스턴스이다. 이는 실행했을 때 이미지가 메모리에 상주하는 것을 의미한다(즉, 이미지가 상태와 유저 프로세스를 가지고있는 것). 리눅스 상에서는 &lt;code class=&quot;language-text&quot;&gt;docker ps&lt;/code&gt; 명령어를 통해 동작중인 컨테이너의 리스트를 볼 수 있다.&lt;/p&gt;
&lt;h2 id=&quot;containters-and-virtual-machines&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#containters-and-virtual-machines&quot; aria-label=&quot;containters and virtual machines permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Containters and Virtual machines&lt;/h2&gt;
&lt;p&gt;컨테이너는 리눅스 상에서 &lt;em&gt;네이티브&lt;/em&gt; 하게 돌아가며 다른 컨테이너들과 함께 호스트 컴퓨터의 커널을 공유한다. 각각 독립적이지만 구별되는 프로세스로 작동하며 다른 실행파일과 다르게 메모리를 더 점유하지 않는다. 이런 점이 도커를 &lt;em&gt;가볍게&lt;/em&gt; 한다.&lt;/p&gt;
&lt;p&gt;이와 대조되어 &lt;code class=&quot;language-text&quot;&gt;가상머신(VM)&lt;/code&gt;은 &lt;em&gt;가상의&lt;/em&gt; 접근을 가진 하나의 정교한 &lt;code class=&quot;language-text&quot;&gt;guest&lt;/code&gt; 운영체제로 돌아가며, &lt;code class=&quot;language-text&quot;&gt;hypervisor&lt;/code&gt;를 통하여 리소스를 제공한다. 일반적으로 VM은 대부분의 앱이 요구하는 것 보다 더 많은 리소스를 가진 환경을 제공한다.&lt;/p&gt;
&lt;h1 id=&quot;도커란-어떻게-쓰는-것인가&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8F%84%EC%BB%A4%EB%9E%80-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%93%B0%EB%8A%94-%EA%B2%83%EC%9D%B8%EA%B0%80&quot; aria-label=&quot;도커란 어떻게 쓰는 것인가 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;도커란 어떻게 쓰는 것인가?&lt;/h1&gt;
&lt;p&gt;도커 설치는 CE 혹은 EE를 알맞은 플랫폼에 맞게 사용한다.&lt;/p&gt;
&lt;p&gt;나는 맥을 사용하니 &lt;a href=&quot;https://docs.docker.com/docker-for-mac/install/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;이 링크&lt;/a&gt;를 타고 들어가서 Docker Desktop을 다운받았다.&lt;/p&gt;
&lt;p&gt;다운로드 받은 후 버전을 알아보려면 이런식으로 나온다 &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; ---version
Docker version &lt;span class=&quot;token number&quot;&gt;18.09&lt;/span&gt;.2, build &lt;span class=&quot;token number&quot;&gt;6247962&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;설치한 &lt;code class=&quot;language-text&quot;&gt;Docker&lt;/code&gt;의 상세정보를 알아보려면 아래와 같이 입력하자&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; info

Containers: &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
 Running: &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
 Paused: &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
 Stopped: &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
Images: &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
Server Version: &lt;span class=&quot;token number&quot;&gt;18.09&lt;/span&gt;.2
Storage Driver: overlay2
&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;docker run &amp;lt;image-name&gt;&lt;/code&gt;을 수행하면 docker hub에 등록된 컨테이너를 다운로드 받거나 실행시킨다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; run hello-world
Unable to &lt;span class=&quot;token function&quot;&gt;find&lt;/span&gt; image &lt;span class=&quot;token string&quot;&gt;&apos;hello-world:latest&apos;&lt;/span&gt; locally
latest: Pulling from library/hello-world
1b930d010525: Pull complete 
Digest: sha256:92695bc579f31df7a63da6922075d0666e565ceccad16b59c3374d2cf4e8e50e
Status: Downloaded newer image &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; hello-world:latest

Hello from Docker&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;
This message shows that your installation appears to be working correctly.

To generate this message, Docker took the following steps:
&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;필요한 명령어는 &lt;a href=&quot;https://docs.docker.com/engine/reference/commandline/cli/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;여기&lt;/a&gt;서 찾거나, 필요에 따라 검색하길 바란다. 나는 &lt;a href=&quot;https://daeson.tistory.com/290&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;여기&lt;/a&gt;가 도움이 되었다.&lt;/p&gt;
&lt;p&gt;containerization은 CI/CD를 별 차이없이 만들었다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;애플리케이션이 시스템 의존을 가지지 않음&lt;/li&gt;
&lt;li&gt;업데이트가 어떤 분산된 앱의 일부에도 추가될 수 있다.&lt;/li&gt;
&lt;li&gt;자원 밀도를 최적화 할 수 있다. (앱이 달라짐에 따른 자원의 변화를 의미하는 것 같다)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;도커를 쓰면 스케일 업은 새로운 걸 만드는 거지, 무거운 VM 호스트를 돌리는게 아니다.&lt;/p&gt;
&lt;h1 id=&quot;references&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#references&quot; aria-label=&quot;references permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;References&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.docker.com/get-started/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Get Started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.docker.com/docker-for-mac/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Get started with Docker Desktop for Mac&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://daeson.tistory.com/290&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;도커 명령어&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Django 코드를 Jekyll에 작성할 때 Liquid syntax error가 뜬다면?]]></title><description><![CDATA[Python 코드를 Jekyll에 작성 시, Liquid syntax error가 뜬다면?]]></description><link>https://blog.s3ich4n.me/posts/tips/docker-explained-pt02</link><guid isPermaLink="false">https://blog.s3ich4n.me/posts/tips/docker-explained-pt02</guid><pubDate>Fri, 19 Apr 2019 12:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;liquid-syntax-error-line-26-unknown-tag-url-&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#liquid-syntax-error-line-26-unknown-tag-url-&quot; aria-label=&quot;liquid syntax error line 26 unknown tag url  permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Liquid syntax error (line 26): Unknown tag ‘url’ ?&lt;/h1&gt;
&lt;p&gt;Django의 템플릿 문법이 Jekyll의 &lt;a href=&quot;https://jekyllrb.com/docs/liquid/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;liquid&lt;/a&gt;와 같아서 루비 문법으로 해석하다보니 충돌이 발생한다. 해결책은 아래와 같다:&lt;/p&gt;
&lt;p&gt;{% raw %}{%{% endraw %} raw %}
{% raw %}`&lt;code class=&quot;language-text&quot;&gt;&lt;/code&gt;
&lt;a href=&quot;{% url &apos;social:begin&apos; &apos;oauth2-provider-name&apos; %}&quot;&gt;Login&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;## References:

[jekyll issue #4569](https://github.com/jekyll/jekyll/issues/4569)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[OAuth2란 무엇인가?]]></title><description><![CDATA[OAuth2 는 무엇인지에 대해 설명합니다.]]></description><link>https://blog.s3ich4n.me/posts/devlog/backends/oauth2-explained</link><guid isPermaLink="false">https://blog.s3ich4n.me/posts/devlog/backends/oauth2-explained</guid><pubDate>Fri, 29 Mar 2019 12:10:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;oauth2란&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#oauth2%EB%9E%80&quot; aria-label=&quot;oauth2란 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;OAuth2란?&lt;/h1&gt;
&lt;p&gt;OAuth2는 애플리케이션이 페이스북, Github, 등과 같은 HTTP 서비스를 통해 인증으로 제한된 유저 계정을 얻어오는 인증 프레임워크다. 이는 유저정보를 호스트하는 서비스에게 받거나, 서드파티 앱이 유저 계정에 접근할 수 있도록 유저 인증을 위임 받아 작동한다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Autentication OAuth2 w/ django-social-auth pt. 1]]></title><description><![CDATA[Django에서 django-social-auth를 사용하여 OAuth2 인증을 사용하는 방법에 대해 이어서 설명합니다.]]></description><link>https://blog.s3ich4n.me/posts/devlog/backends/oauth2-with-django-social-auth-pt2</link><guid isPermaLink="false">https://blog.s3ich4n.me/posts/devlog/backends/oauth2-with-django-social-auth-pt2</guid><pubDate>Fri, 29 Mar 2019 12:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;pipeline-strategy-and-storage&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#pipeline-strategy-and-storage&quot; aria-label=&quot;pipeline strategy and storage permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Pipeline, Strategy and Storage&lt;/h1&gt;
&lt;h2 id=&quot;pipeline이란&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#pipeline%EC%9D%B4%EB%9E%80&quot; aria-label=&quot;pipeline이란 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Pipeline이란?&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;python-social-auth&lt;/code&gt;는 확장성있는 파이프라인 메커니즘을 쓴다. 이를 통해 authentication, association, disconnection 중 임의의 함수를 추가로 사용할 수 있다.&lt;/p&gt;
&lt;p&gt;함수는 현재 프로세스와 연관된 여러 변수들을 매개변수로 받는다. 이는 각각 &lt;code class=&quot;language-text&quot;&gt;strategy&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;user&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;request&lt;/code&gt;이다. &lt;code class=&quot;language-text&quot;&gt;**kwargs&lt;/code&gt;를 파라미터로 추가해두어 예상치못한 매개변수를 처리하도록 하는 것이 좋다.&lt;/p&gt;
&lt;h2 id=&quot;strategy란&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#strategy%EB%9E%80&quot; aria-label=&quot;strategy란 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Strategy란?&lt;/h2&gt;
&lt;p&gt;가능한 한 많은 코드를 재사용하여 공통 API 하에서 다른 프레임 워크 기능을 캡슐화하기 위해 여러 strategy들을 정의해 두었다.&lt;/p&gt;
&lt;p&gt;Strategy가 서비스하는 범위는 다음과 같다:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;데이터, 호스트의 정보를 받기, 주어진 경로에 대한 URI 빌딩&lt;/li&gt;
&lt;li&gt;세션 액세스&lt;/li&gt;
&lt;li&gt;프로젝트 세팅&lt;/li&gt;
&lt;li&gt;응답 타입 (HTML 혹은 리다이렉트)&lt;/li&gt;
&lt;li&gt;HTML 렌더링&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;서로 다른 프레임워크들이 다르게 구현되어있더라도 이런 인터페이스를 통해 해당 기능을 사용하는 것이 권장된다.&lt;/p&gt;
&lt;p&gt;새로운 Strategy를 구현하려면 아래 링크의 요소들이 구현되어 있어야 한다:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://python-social-auth-docs.readthedocs.io/en/latest/strategies.html#implementing-a-new-strategy&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;링크 참조&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;storage란&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#storage%EB%9E%80&quot; aria-label=&quot;storage란 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Storage란?&lt;/h2&gt;
&lt;p&gt;프레임워크들은 서로다른 ORM을 제공한다. Storage는 공통 인터페이스를 mixin 클래스로 API들을 모아두었다. 기본 파이프라인과 그에 대해 구현해야 할 부분은 &lt;a href=&quot;https://python-social-auth.readthedocs.io/en/latest/storage.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;해당 링크&lt;/a&gt;를 참조하길 바란다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;SQLAlcehmy ORM&lt;/code&gt;과 &lt;code class=&quot;language-text&quot;&gt;Django ORM&lt;/code&gt;의 일부 mixin은 구현되어있다.
&lt;a href=&quot;https://github.com/python-social-auth/social-app-django/blob/master/social_django/storage.py&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Django ORM 의 일부 구현체&lt;/a&gt;는 링크를 참조하길 바란다.&lt;/p&gt;
&lt;h2 id=&quot;authentication-pipeline&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#authentication-pipeline&quot; aria-label=&quot;authentication pipeline permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Authentication Pipeline?&lt;/h2&gt;
&lt;p&gt;인증 파이프라인에는 기존에 제공되는 파이프라인을 쓰거나 사용자 파이프라인을 추가해서 사용할 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;SOCIAL_AUTH_PIPELINE &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&apos;social_core.pipeline.social_auth.social_details&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&apos;social_core.pipeline.social_auth.social_uid&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&apos;social_core.pipeline.social_auth.auth_allowed&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&apos;social_core.pipeline.social_auth.social_user&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&apos;social_core.pipeline.user.get_username&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&apos;social_core.pipeline.mail.mail_validation&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&apos;social_core.pipeline.social_auth.associate_by_email&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&apos;social_core.pipeline.user.create_user&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&apos;social_core.pipeline.social_auth.associate_user&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&apos;social_core.pipeline.social_auth.load_extra_data&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&apos;social_core.pipeline.user.user_details&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;이름&lt;/th&gt;
&lt;th&gt;역할&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;social&lt;em&gt;auth.social&lt;/em&gt;details&lt;/td&gt;
&lt;td&gt;유저에 관련된 정보를 가지고와서 유저 인스턴스를 만들 수 있도록 리턴한다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;social&lt;em&gt;auth.social&lt;/em&gt;uid&lt;/td&gt;
&lt;td&gt;인증하는 서비스의 social uid를 받아온다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;social&lt;em&gt;auth.auth&lt;/em&gt;allowed&lt;/td&gt;
&lt;td&gt;현재 인증 프로세스가 현재 프로젝트에 유효한지 검증한다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;social&lt;em&gt;auth.social&lt;/em&gt;user&lt;/td&gt;
&lt;td&gt;소셜계정이 현재 사이트에 이미 associate 되어있는지 체크한다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;user.get_username&lt;/td&gt;
&lt;td&gt;해당 유저의 username을 세팅한다. 충돌이 있다면 끝에 random string을 추가한다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mail.mail_validation&lt;/td&gt;
&lt;td&gt;이메일 인증을 받아야 계정이 유효하도록 만든다. 기본적으로 &lt;code class=&quot;language-text&quot;&gt;disable&lt;/code&gt; 되어있다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;social&lt;em&gt;auth.associate&lt;/em&gt;by_email&lt;/td&gt;
&lt;td&gt;현재 소셜 세부 정보를 비슷한 이메일 주소를 가진 다른 사용자 계정과 연결한다. 기본적으로 &lt;code class=&quot;language-text&quot;&gt;disable&lt;/code&gt; 되어있다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;create_user&lt;/td&gt;
&lt;td&gt;user 계정이 없다면 만든다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;social&lt;em&gt;auth.associate&lt;/em&gt;user&lt;/td&gt;
&lt;td&gt;소셜계정이 유저와 associate한 레코드를 생성한다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;social&lt;em&gt;auth.load&lt;/em&gt;extra_data&lt;/td&gt;
&lt;td&gt;소셜 레코드의 extra&lt;em&gt;data 필드에 설정에 지정된 값(기본값은 access&lt;/em&gt;token 등)을 채운다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;user.user_details&lt;/td&gt;
&lt;td&gt;기존 인증 서비스로부터 변경된 유저 레코드 정보를 업데이트한다&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;각 파이프라인 함수는 아래 파라미터들을 받는다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;현재 strategy(이는 현재 storage, backend, request에 액세스할 수 있게 해준다)&lt;/li&gt;
&lt;li&gt;인증 제공자에게서 받은 유저ID, 유저 상세정보&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;is_new&lt;/code&gt; 플래그 (기본값은 &lt;code class=&quot;language-text&quot;&gt;false&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;auth_complete 백엔드 메소드로부터 받은 arguments. 기본적으로 이 arguments들이 온다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;현재 로그인한 유저. 아니라면 &lt;code class=&quot;language-text&quot;&gt;None&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;현재 request&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;파이프라인-확장&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%8C%8C%EC%9D%B4%ED%94%84%EB%9D%BC%EC%9D%B8-%ED%99%95%EC%9E%A5&quot; aria-label=&quot;파이프라인 확장 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;파이프라인 확장&lt;/h2&gt;
&lt;p&gt;파이프라인의 주요목적은 확장성에 있다. 함수 중간에서 데이터를 만들고, 모델 인스턴스를 만들고, 유저에게 다른 데이터를 요청하거나, 프로세스를 멈추게 할 수도 있다.&lt;/p&gt;
&lt;p&gt;파이프라인을 확장하는건 아래과정이 필요하다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;함수작성&lt;/li&gt;
&lt;li&gt;import할 수 있을 곳에 위치&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;새로 만든 함수를 포함시켜 파이프라인 정의에 오버라이딩. 단, 순서가 중요하다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;social_core.pipeline.user.create_user&lt;/code&gt;뒤에 사용자 정의 함수를 선언하면 이 함수는 user상태를 None값이 아니라 in-stance(만들어져있거나 이미 있는 상태)로 가져온다. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;파이프라인 함수는 사용중인 백엔드, 다른 모델 인스턴스, 서버 요청 및 공급자 응답에 이르기까지 상당히 많은 인수를 갖게된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;strategy&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;현재 strategy 인스턴스.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;backend&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;현재 백엔드 인스턴스.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;uid&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;서비스 제공자의 UID. 이 값으로 현재 서비스 제공자의 유저를 판별한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;response = {}&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;object()&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;서버의 유저 상세정보 응답이다. 이 값은 현재 사용중인 프로토콜에 의존적이다. 보통은 &lt;code class=&quot;language-text&quot;&gt;dict&lt;/code&gt; 타입으로 정보를 넣어둔다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;details = {}&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;백엔드에 의해 기본적으로 생성된 유저의 상세정보다. 유저 모델의 상세정보를 생성, 수정할 때 사용한다. 이 &lt;code class=&quot;language-text&quot;&gt;dict&lt;/code&gt;는 &lt;code class=&quot;language-text&quot;&gt;username&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;email&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;first_name&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;lastname&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;fullname&lt;/code&gt;을 담고있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;user = None&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DB 생성, 조회여부에 따라 유저 인스턴스, 혹은 &lt;code class=&quot;language-text&quot;&gt;None&lt;/code&gt;값.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;social = None&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DB 생성, 조회여부에 따라 주어진 유저에 대한 &lt;code class=&quot;language-text&quot;&gt;UserSocialAuth&lt;/code&gt; 인스턴스값, 혹은 &lt;code class=&quot;language-text&quot;&gt;None&lt;/code&gt;값.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;일반적으로 커스텀 파이프라인 함수를 작성할 때, &lt;code class=&quot;language-text&quot;&gt;response&lt;/code&gt; 파라미터로부터 값을 얻어온다. 그 외에도 더 할 수 있다. API 엔드포인트를 호출해서 더 많은 정보를 불러오거나 다른곳에 저장하거나 하는 것도 가능하다.&lt;/p&gt;
&lt;p&gt;예를들어 페이스북에서 가져온 response값을 보고, 유저의 프로필링크, 성별, Profile 모델의 타임존을 구하는 코드를 작성한다고 해보자:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &apos;username&apos;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &apos;foobar&apos;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &apos;access_token&apos;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &apos;CAAD...&apos;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &apos;first_name&apos;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &apos;Foo&apos;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &apos;last_name&apos;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &apos;Bar&apos;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &apos;verified&apos;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; True&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &apos;name&apos;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &apos;Foo Bar&apos;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &apos;locale&apos;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &apos;en_US&apos;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &apos;gender&apos;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &apos;male&apos;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &apos;expires&apos;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &apos;&lt;span class=&quot;token number&quot;&gt;5183999&lt;/span&gt;&apos;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &apos;email&apos;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &apos;foo@bar.com&apos;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &apos;updated_time&apos;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &apos;&lt;span class=&quot;token number&quot;&gt;2014&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;-01&lt;/span&gt;-14T15&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;58&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;35&lt;/span&gt;+&lt;span class=&quot;token number&quot;&gt;0000&lt;/span&gt;&apos;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &apos;link&apos;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &apos;https&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//www.facebook.com/foobar&apos;,&lt;/span&gt;
    &apos;timezone&apos;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;-3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &apos;id&apos;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &apos;&lt;span class=&quot;token number&quot;&gt;100000126636010&lt;/span&gt;&apos;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이런식의 값이 오면 다음과 같이 조립할 수 있다:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;save_profile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;backend&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; user&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;kwargs&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; backend&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;facebook&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        profile &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;get_profile&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; profile &lt;span class=&quot;token keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            profile &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Profile&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;user_id&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        profile&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;gender &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;get&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;gender&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        profile&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;link &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;get&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;link&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        profile&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;timezone &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;get&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;timezone&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        profile&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;save&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;다만 이 새로운 함수는 &lt;code class=&quot;language-text&quot;&gt;SOCIAL_AUTH_PIPELINE&lt;/code&gt;의 해당 라인에 위치해야한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;SOCIAL_AUTH_PIPELINE &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&apos;social_core.pipeline.social_auth.social_details&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&apos;social_core.pipeline.social_auth.social_uid&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&apos;social_core.pipeline.social_auth.auth_allowed&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&apos;social_core.pipeline.social_auth.social_user&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&apos;social_core.pipeline.user.get_username&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&apos;social_core.pipeline.user.create_user&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&apos;path.to.save_profile&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;# &amp;lt;--- 함수위치를 여기 세팅&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&apos;social_core.pipeline.social_auth.associate_user&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&apos;social_core.pipeline.social_auth.load_extra_data&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&apos;social_core.pipeline.user.user_details&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위의 함수는 {}가 리턴되듯 None이 리턴된다. 만일 해당변수를 다음 파이프라인에서도 쓰고싶다면 &lt;code class=&quot;language-text&quot;&gt;{&apos;profile&apos;:profile}&lt;/code&gt;을 리턴하면 된다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Autentication OAuth2 w/ django-social-auth pt. 1]]></title><description><![CDATA[Django에서 django-social-auth를 사용하여 OAuth2 인증을 사용하는 방법에 대해 설명합니다.]]></description><link>https://blog.s3ich4n.me/posts/devlog/backends/oauth2-with-django-social-auth-pt1</link><guid isPermaLink="false">https://blog.s3ich4n.me/posts/devlog/backends/oauth2-with-django-social-auth-pt1</guid><pubDate>Thu, 28 Mar 2019 12:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;django에서-oauth2를-통해-소셜로그인을-하는-법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#django%EC%97%90%EC%84%9C-oauth2%EB%A5%BC-%ED%86%B5%ED%95%B4-%EC%86%8C%EC%85%9C%EB%A1%9C%EA%B7%B8%EC%9D%B8%EC%9D%84-%ED%95%98%EB%8A%94-%EB%B2%95&quot; aria-label=&quot;django에서 oauth2를 통해 소셜로그인을 하는 법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Django에서 oauth2를 통해 소셜로그인을 하는 법&lt;/h1&gt;
&lt;p&gt;TBA&lt;/p&gt;
&lt;h1 id=&quot;python-social-auth-공식문서&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#python-social-auth-%EA%B3%B5%EC%8B%9D%EB%AC%B8%EC%84%9C&quot; aria-label=&quot;python social auth 공식문서 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;python-social-auth 공식문서&lt;/h1&gt;
&lt;p&gt;python-social-auth (psa)가 어떻게 쓰이는지 알아보도록 하자.&lt;/p&gt;
&lt;h2 id=&quot;1-psa의-url에-대하여&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-psa%EC%9D%98-url%EC%97%90-%EB%8C%80%ED%95%98%EC%97%AC&quot; aria-label=&quot;1 psa의 url에 대하여 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. PSA의 URL에 대하여&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;urls.py&lt;/code&gt; 안에서 어떻게 세팅해야하는가?&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; django&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;contrib&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;auth &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; views &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; auth

&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;중략&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
path&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;oauth/&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; include&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;social_django.urls&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;namespace=social&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
path&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;login/&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; auth&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;auth_login&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; name&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;login&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이런식으로 다른 서비스들과 OAuth2 정보를 주고받을 엔드포인트 주소를 설정한다.
로그인 링크는 본인이 사용할 템플릿 파일에 다음과같이 설정해주면 된다.&lt;/p&gt;
&lt;p&gt;{% raw %}&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;django&quot;&gt;&lt;pre class=&quot;language-django&quot;&gt;&lt;code class=&quot;language-django&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token django language-django&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token tag keyword&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;social:begin&apos;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;oauth2-provider-name&apos;&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Login&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;{% endraw %}&lt;/p&gt;
&lt;p&gt;예를들어..
Github라면: &lt;code class=&quot;language-text&quot;&gt;/auth/complete/github/&lt;/code&gt; 같은 엔드포인트를,
Google이라면: &lt;code class=&quot;language-text&quot;&gt;/auth/complete/google-oauth2/&lt;/code&gt; 같은 엔드포인트를 거친다.&lt;/p&gt;
&lt;h2 id=&quot;2-backends에-대하여&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-backends%EC%97%90-%EB%8C%80%ED%95%98%EC%97%AC&quot; aria-label=&quot;2 backends에 대하여 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. &lt;code class=&quot;language-text&quot;&gt;Backends&lt;/code&gt;에 대하여&lt;/h2&gt;
&lt;p&gt;Django의 경우에는 아래의 경우를 추가해주어야 한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;SOCIAL_AUTH_{backend}&lt;/code&gt;를 &lt;code class=&quot;language-text&quot;&gt;settings.py&lt;/code&gt;에 넣어준다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Google OAuth2의 경우?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;SOCIAL_AUTH_GOOGLE_OAUTH2_KEY&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;SOCIAL_AUTH_GOOGLE_OAUTH2_SECERT&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Github OAuth2의 경우?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;SOCIAL_AUTH_GITHUB_KEY&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;SOCIAL_AUTH_GITHUB_SECRET&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;그 외 사항은 구현하고자 하는 백엔드에 맞추어 검색하고 옵션을 추가한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;AUTHENTICATION_BACKENDS&lt;/code&gt;에 사용하려는 백엔드 값을 넣어준다.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;AUTHENTICATION_BACKENDS &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;# 지원하는 백엔드 인증방식들&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&apos;social_core.backends.open_id.OpenIdAuth&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&apos;social_core.backends.google.GoogleOpenId&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&apos;social_core.backends.google.GoogleOAuth2&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&apos;social_core.backends.github.GithubOAuth2&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&apos;social_core.backends.facebook.FacebookOAuth2&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;# django.contrib.auth 앱을 추가해야 기본 로그인기능 사용가능&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&apos;django.contrib.auth.backends.ModelBackend&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;3-pipeline에-대하여&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-pipeline%EC%97%90-%EB%8C%80%ED%95%98%EC%97%AC&quot; aria-label=&quot;3 pipeline에 대하여 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. Pipeline에 대하여&lt;/h2&gt;
&lt;p&gt;{% raw %}&lt;code class=&quot;language-text&quot;&gt;{% url &apos;social:begin&apos; &apos;github&apos; %}&lt;/code&gt;{% endraw %}같은 링크를 reverse하면 다음과 같다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;http://example.com/login/github&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;이 링크를 누르면 “파이프라인”이 시작된다. 파이프라인은 유저에 대한 정보를 모으는 함수들의 리스트다. 모은 정보를 통해 인증 프로세스를 진행한다.&lt;/p&gt;
&lt;p&gt;파이프라인을 거치는 일련의 과정은 이렇다.
&lt;code class=&quot;language-text&quot;&gt;social_core/backends/base.py&lt;/code&gt; 파일의 &lt;code class=&quot;language-text&quot;&gt;run_pipeline()&lt;/code&gt;을 보며 분석하면 더욱 좋다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;파이프라인은 4개의 딕셔너리를 가지고 시작한다. 이는 각각의 함수의 리턴값으로 업데이트된다. 최초 4가지 변수는 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;strategy&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;strategy&lt;/code&gt; 객체를 포함한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;backend&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;파이프라인이 작동할 동안 쓰일 백엔드를 포함한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;request&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;리쿼스트 키에 대한 딕셔너리를 포함한다. &lt;code class=&quot;language-text&quot;&gt;self.strategy.request_data()&lt;/code&gt;의 결과값을 말한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;details&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;빈 딕셔너리를 가진다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;함수가 딕셔너리 혹은 False스러운 값을 리턴하면 딕셔너리 속에 추가로 딕셔너리를 더한다. (&lt;code class=&quot;language-text&quot;&gt;run_pipeline&lt;/code&gt;의 &lt;code class=&quot;language-text&quot;&gt;out&lt;/code&gt;) 그 후 추가된 딕셔너리 값을 가지고 파이프라인의 다음 과정을 부른다.&lt;/li&gt;
&lt;li&gt;뭔가 리턴되면(&lt;code class=&quot;language-text&quot;&gt;HttpResponse의 서브클래스 같은것들&lt;/code&gt;), 브라우저로 리턴한다.&lt;/li&gt;
&lt;li&gt;파이프라인이 끝나고난 뒤, 유저가 인증된다. 즉 파이프라인이 돌고있을 때 인증된 유저객체를 찾으면, 파이프 라인이 시작될 때 사용자가 로그인되었음을 의미한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;백엔드 관련 로직이 있다면, 필요에 따라 따로 파이프라인을 거치지 않아도 되는 파이프 라인 단계를 만들어야한다.&lt;/p&gt;
&lt;h2 id=&quot;4-파이프라인-인터럽트뷰와의-통신&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-%ED%8C%8C%EC%9D%B4%ED%94%84%EB%9D%BC%EC%9D%B8-%EC%9D%B8%ED%84%B0%EB%9F%BD%ED%8A%B8%EB%B7%B0%EC%99%80%EC%9D%98-%ED%86%B5%EC%8B%A0&quot; aria-label=&quot;4 파이프라인 인터럽트뷰와의 통신 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. 파이프라인 인터럽트(뷰와의 통신)&lt;/h2&gt;
&lt;p&gt;파이프라인 사이에 추가과정을 넣고싶다면 &lt;code class=&quot;language-text&quot;&gt;@partial&lt;/code&gt; 데코레이터를 통해 진행할 수 있다. 이는 다시말해 파이프라인이 어딘지 쫓아올 수 있다는 말이고, 과정을 이어서 재시작할 수도 있다는 말이다.&lt;/p&gt;
&lt;p&gt;이를 위해 할 일은 뷰가 파이프라인과 통신하도록 세팅하는 것이다. &lt;code class=&quot;language-text&quot;&gt;settings.py&lt;/code&gt;에 어느 값이 세션과 파이프라인 사이에 왔다갔다할지 세팅해주면 된다.&lt;/p&gt;
&lt;p&gt;파이프 라인에 사용자 지정 단계를 추가하려는 경우, 나중에 사용자가 직접 사이트를 방문 할 수 있도록 암호를 설정해야한다고 해보자. 그렇다면 &lt;code class=&quot;language-text&quot;&gt;settings.py&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;pipeline.py&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;views.py&lt;/code&gt;에는 각각 이렇게 세팅해주면 될 것이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;settings.py&lt;/code&gt;의 경우&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;SOCIAL_AUTH_FIELDS_STORED_IN_SESSION = [&apos;local_password&apos;,]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;SOCIAL_AUTH_FIELDS_STORED_IN_SESSION&lt;/code&gt;은 &lt;a href=&quot;https://buildmedia.readthedocs.org/media/pdf/python-social-auth/stable/python-social-auth.pdf&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;해당 링크&lt;/a&gt;에서 검색하면 상세히 나오니 참조하길 바란다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;pipeline.py&lt;/code&gt;의 경우&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; django&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;shortcuts &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; redirect
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; django&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;contrib&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;auth&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;models &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; User
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; social_core&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pipeline&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;partial &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; partial

&lt;span class=&quot;token comment&quot;&gt;# partial은, &apos;인터럽트를 걸지만 다시 돌아오겠다&apos; 하는 의미&lt;/span&gt;
&lt;span class=&quot;token decorator annotation punctuation&quot;&gt;@partial&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;collect_password&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;strategy&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; backend&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; request&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; details&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;kwargs&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;# &apos;local_password&apos;세션은 파이프라인에 의해 오고가도록 세팅 되어있다.&lt;/span&gt;
    local_password &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; strategy&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;session_get&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;local_password&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;not&lt;/span&gt; local_password&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;# 만약 딕셔너리나 None이외의 것이 리턴되면 유저에게 리턴된다.&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;# 이 경우, 패스워드로 쓸 수 있는 뷰로 리디렉션 될 것이다.&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; redirect&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;myapp.views.collect_password&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;# email address was captured in an earlier step.)&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;# 유저 객체를 DB로부터 가져오고(아직 로그인 되어있지 않음), 비밀번호를 세팅한다(이메일정보는 이전에 가져왔다고 가정하자).&lt;/span&gt;
    user &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; User&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;objects&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;get&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;email&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;kwargs&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;email&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;set_password&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;local_password&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;save&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;# 파이프라인을 재개한다.&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;views.py&lt;/code&gt;의 경우&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PasswordForm&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;forms&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Form&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    secret_word &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; forms&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;CharField&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;max_length&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;get_user_password&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;method &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;POST&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        form &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; PasswordForm&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;POST&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; form&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;is_valid&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;token comment&quot;&gt;# FIELDS_STORED_IN_SESSION 때문에, 파이프라인이 재개되면&lt;/span&gt;
            &lt;span class=&quot;token comment&quot;&gt;# request dictionary로 복사될 것이다.&lt;/span&gt;
            request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;session&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;local_password&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; form&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cleaned_data&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;secret_word&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;

            &lt;span class=&quot;token comment&quot;&gt;# 일단 세션에 숨겨진 비밀번호를 얻을 수 있다면,&lt;/span&gt;
            &lt;span class=&quot;token comment&quot;&gt;# 파이프라인이 완성된 엔드포인트를 이용해 재개하도록 명령할 수 있다.&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; redirect&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;reverse&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;social:complete&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; args&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;backend_name,&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        form &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; PasswordForm&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; render&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;password_form.html&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;여기서 &lt;code class=&quot;language-text&quot;&gt;social:complete&lt;/code&gt;는 파이프라인에 인터럽트된 동일 함수에 다시 들어갈 것이다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[실용주의 프로그래머 pt. 4]]></title><description><![CDATA[실용주의 프로그래머 2nd edition을 읽은 후... pt. 4]]></description><link>https://blog.s3ich4n.me/posts/books/pragmatic-programmer-pt-4</link><guid isPermaLink="false">https://blog.s3ich4n.me/posts/books/pragmatic-programmer-pt-4</guid><pubDate>Sat, 24 Feb 2018 00:00:00 GMT</pubDate><content:encoded>&lt;h3 id=&quot;읽기에-앞서&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9D%BD%EA%B8%B0%EC%97%90-%EC%95%9E%EC%84%9C&quot; aria-label=&quot;읽기에 앞서 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;읽기에 앞서…&lt;/h3&gt;
&lt;p&gt;실용주의 프로그래머를 읽고 느낀점을 써보려고 합니다. 제가 느낀바로는 이러한 내용이다 하는 방향으로 기술할 것 같습니다.&lt;/p&gt;
&lt;p&gt;craftsman 이라면 연장 정도는 손에 익혀둬야하는게 맞다. 프로그래머도 자신의 툴을 손에 익혀야하는 것이 당연하다.&lt;/p&gt;
&lt;p&gt;도구는 재능을 증폭시켜준다. 도구가 좋다는 가정하에 쓰는법만 알면 반드시 최고의 결과를 보장해준다. 생산성을 높히려면 경험을 통해 툴쓰는 법을 자꾸만 많이 익혀둬야 한다. 내 툴박스에는 자꾸만 뭔가 추가될거고 언젠간 빼게될 것들이 막 생길 것이다. 필요에 따라 어떤툴을 써야할지도 알게 될 것이다. &lt;/p&gt;
&lt;p&gt;모양을 만들 재료는 어떤 것인가? (일반 텍스트의 힘)&lt;/p&gt;
&lt;p&gt;IDE에만 익숙해지지 말고 간단한 쉘 프로그라밍 정도는 할 줄 알아야한다! (shell games)&lt;/p&gt;
&lt;p&gt;(파워 에디팅) 장에서는 툴 어케쓰면 좋은지 알려준다.&lt;/p&gt;
&lt;p&gt;(소스코드 관리) git 써라&lt;/p&gt;
&lt;p&gt;(디버깅) 디버깅은 완벽한 프로그램을 만들기 위한 필수다. 디버깅을 못한다 = 좋은 프로그래머가 되긴 힘들지 않을까&lt;/p&gt;
&lt;p&gt;(텍스트 처리) awk, perl, python을 소개&lt;/p&gt;
&lt;p&gt;(코드 생성기)는 봐야 알듯.&lt;/p&gt;
&lt;h2 id=&quot;14-일반-텍스트의-힘&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#14-%EC%9D%BC%EB%B0%98-%ED%85%8D%EC%8A%A4%ED%8A%B8%EC%9D%98-%ED%9E%98&quot; aria-label=&quot;14 일반 텍스트의 힘 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;14. 일반 텍스트의 힘&lt;/h2&gt;
&lt;p&gt;일반 텍스트(plain text)를 의미.&lt;/p&gt;
&lt;p&gt;사람이 이해할 수 있는 텍스트를 쓰는게 좋다. 그냥 플레인텍스트 뿐 아니라 XML이나 HTML처럼 잘 정의된 구조를 가진거면 일반 텍스트 정도로 이해된다.&lt;/p&gt;
&lt;p&gt;일반 텍스트를 쓰면 데이터가 어떻게 흘러가는지 보다 빠르게 이해할 수 있다.&lt;/p&gt;
&lt;p&gt;단점)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;이진포맷보다 데이터 크기가 더 클 수 있다&lt;/li&gt;
&lt;li&gt;플레인 텍스트 처리엔 더 많은 시간이 들 수 있다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;그런데도 불구하고 쓸 필요가 있는 이유는?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;구식이 되는 것에 대한 보험&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;끊임없이 변하는 애플리케이션의 내용에 대해 사람이 이해하기 편해진다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;호환성&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;거의 어지간한 컴퓨터 세계의 도구들은 일반 텍스트를 다룰 수 있다.
e.g. 설정파일 관련 데이터라 해도 git에 넣어서 변화를 감지하거나, 그게 아니면 diff나 fc같은거로 변화를 감지할 수 있다. sum으로 첵섬 만들어서 변화감지를 할 수도 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;더 쉬운 테스트&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;테스트 시에 써먹을 값으로 테스트 데이터를 쉽게 업뎃,추가,수정이 가능하다.&lt;/li&gt;
&lt;li&gt;스크립트로 더 빨리도 가능하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;알아보기: &lt;a href=&quot;https://learnxinyminutes.com/docs/yaml/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;yaml은 뭐임?&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;15-조개-놀이shell-games&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#15-%EC%A1%B0%EA%B0%9C-%EB%86%80%EC%9D%B4shell-games&quot; aria-label=&quot;15 조개 놀이shell games permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;15. 조개 놀이(shell games)&lt;/h2&gt;
&lt;p&gt;텍스트를 다루는 프로그래머라면 쉘에서 주로 놀게될 것이다. 파이프, 매크로 등…&lt;/p&gt;
&lt;p&gt;GUI도 존나 좋은거다. 대놓고 직관적이니까. 근데 텍스트에서의 장점은 따로 있다. 그것은 ‘자동화’, ‘매크로’가 그것이다. 이건 미쳤다. 파일 이름 일일이 변경이나 필요한 작업들은 쉘이 더 빠를 때가 있다.&lt;/p&gt;
&lt;p&gt;e.g.
Makefile보다 더 최근에 바뀐 모든 c 파일을 찾아라&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt; -name &lt;span class=&quot;token string&quot;&gt;&apos;*.c&apos;&lt;/span&gt; -newer Makefile -print&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;소스의 zip/tar 아카이브를 떠라&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;zip&lt;/span&gt; archive.zip *.h *.c
$ &lt;span class=&quot;token function&quot;&gt;tar&lt;/span&gt; cvf archive.tar *.h *.c&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;지난주에 바뀌지 않은 자바파일은 무엇인가?&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt; -name &lt;span class=&quot;token string&quot;&gt;&apos;*.java&apos;&lt;/span&gt; -mtime +7 -print&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그 중에 어느 파일이 awt 라이브러리를 쓰고있나?&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt; -name &lt;span class=&quot;token string&quot;&gt;&apos;*.java&apos;&lt;/span&gt; -mtime +7 -print &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;xargs&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;java.awt&apos;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(args는 -exec같은 식으로 쓰이는데 더 효과적인듯 보인다. &lt;a href=&quot;https://ko.wikipedia.org/wiki/Xargs&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;xargs란?&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;쉘은 잘 드는 칼 같은거라서 겉보기엔 무서워보이는데 매우 좋다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h2 id=&quot;tip-21-명령어-쉘의-힘을-사용하라&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tip-21-%EB%AA%85%EB%A0%B9%EC%96%B4-%EC%89%98%EC%9D%98-%ED%9E%98%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC&quot; aria-label=&quot;tip 21 명령어 쉘의 힘을 사용하라 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tip 21. 명령어 쉘의 힘을 사용하라.&lt;/h2&gt;
&lt;/blockquote&gt;
&lt;p&gt;자바에서 명시적으로 import하는 패키지 이름의 합집합 목록을 만들어서 list란 파일에 저장하기&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;^import &apos;&lt;/span&gt; *.java &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;
	&lt;span class=&quot;token function&quot;&gt;sed&lt;/span&gt; -e &lt;span class=&quot;token string&quot;&gt;&apos;s/.*import *//&apos;&lt;/span&gt; -e &lt;span class=&quot;token string&quot;&gt;&apos;s/;.*$//&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;
	&lt;span class=&quot;token function&quot;&gt;sort&lt;/span&gt; -u &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; list&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이런식으로 매우 좋다!&lt;/p&gt;
&lt;h2 id=&quot;16-파워-에디팅&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#16-%ED%8C%8C%EC%9B%8C-%EC%97%90%EB%94%94%ED%8C%85&quot; aria-label=&quot;16 파워 에디팅 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;16. 파워 에디팅&lt;/h2&gt;
&lt;p&gt;세상에 에디터는 널렸다. 근데 내가 쓰는거에 대해선 좀 능숙해질 필요가 있다. 정말 남이봐도 잘쓴다 싶을정도로… 하나를 쓴다해도 무슨 기능이 있는지 통달할 필요가 있다!&lt;/p&gt;
&lt;blockquote&gt;
&lt;h2 id=&quot;tip-22-하나의-에디터를-잘-사용하라&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tip-22-%ED%95%98%EB%82%98%EC%9D%98-%EC%97%90%EB%94%94%ED%84%B0%EB%A5%BC-%EC%9E%98-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC&quot; aria-label=&quot;tip 22 하나의 에디터를 잘 사용하라 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tip 22. 하나의 에디터를 잘 사용하라.&lt;/h2&gt;
&lt;/blockquote&gt;
&lt;p&gt;에디터 하나를 잘 골라서 잘 쓸 수 있도록 만들고 모든 편집작업에 그걸 사용하도록 하라! 무엇을 쓰든간에 정말 효율적으로 바로바로 필요한 기능이 나오도록 하게 하는 것이 베스트다. 또한 그 에디터가 어지간한 플랫폼에서 다 쓸 수 있는지도 파악하면 도움이 된다. (무슨 작업환경에서든 다 쓸 수 있도록 해두라는 말)&lt;/p&gt;
&lt;p&gt;책에서 추천하는 에디터의 기능:
그럴싸한 에디터라면 갖추고있는 몇가지 기능은 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;설정변경 가능&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;폰트, 색깔, 윈도우 크기, 키 입력 바인딩 등을 바꿀 수 있는가?는 다시말해 내가 필요한 기능을 모두 키보드로 조질 수 있는가? 의 의미가 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;확장 가능:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;새 프로그래밍 언어를 즉각 대응할 수 있는가? 새 컴파일러에 대응할 수 있는가? 또한 고려요소중의 하나다. 혹은 이런것들을 ‘가르칠’ 수 있어야 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;프로그램 가능:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;복잡하고 다단계의 작업을 수행할 수 있도록 에디터를 ‘프로그래밍’ 할 수 있어야 한다. 매크로나 내장 스트립트가 있는가?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;많은 에디터들은 다음과 같은 특정 고유기능들이 있다:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;• 구문 강조(syntax highlighting)
• 자동 완성
• 자동 들여쓰기
• 코드나 문서 상용어구 지원
• 관련 도움말 시스템
• IDE 기능(컴파일, 디버그 등)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;메모장으로 잘라붙이기 할 수도 있다. 그런데 예를들어 소스코드를 내가 원하는 내용으로 정렬할 필요가 있을 때는 어떻게 하면 좋을까?&lt;/p&gt;
&lt;p&gt;vi기준 &lt;code class=&quot;language-text&quot;&gt;:.,+3!sort&lt;/code&gt; 하면 알파벳 순으로 라인 정렬이 된다.&lt;/p&gt;
&lt;p&gt;또는 프로그래밍할 때 처음 내가 입력할 필요가 없는 것들을 파일 생성과 동시에 대신 입력해주기도 한다. 예를 들어 이런것들…&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;• 클래스와 모듈 이름(파일 이름에서 도출된것)을 자동입력
• 소스코드 작성자 이름, 저작권 선언
• 특정 언어의 스켈레톤 코드(생성자, 소멸자 같은것들 자동작성)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;책에서는 내가 쓰는 에디터가 무엇인지, 어느정도 쓸 수 있는지에 따라 다음 행동을 제시한다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;나의 실력&lt;/th&gt;
&lt;th&gt;앞으로 어떻게 하면 좋을까요?&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;나는 여러 에디터 중 기본 기능만 쓴다&lt;/td&gt;
&lt;td&gt;강력한 에디터 하나를 골라잡아서 제대로 익혀보세요&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;선호하는 에디터가 있긴 한데, 기능을 다 쓰지는 않는다&lt;/td&gt;
&lt;td&gt;그걸 제대로 배워서 입력하는 키 갯수를 최대한으로 줄여보세요&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;선호하는 에디터가 있고 가능하면 그걸 쓴다&lt;/td&gt;
&lt;td&gt;지금 하는 작업 이외에 다 많은 작업에 쓰도록 확장해보세요&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;17-소스코드-관리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#17-%EC%86%8C%EC%8A%A4%EC%BD%94%EB%93%9C-%EA%B4%80%EB%A6%AC&quot; aria-label=&quot;17 소스코드 관리 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;17. 소스코드 관리&lt;/h2&gt;
&lt;p&gt;Git 씁시다! 형상관리를 SE시간에 배웠고 그 예시로 Git이 당당히 나왔다. 필요하다면 SVN도 알아둬야할 것 같다.&lt;/p&gt;
&lt;p&gt;소스코드 관리 시스템(SCCS: Source Code Control System) 은 누가 소스를 바꿨고 주간 소스코드 버전차이, 어느 릴리즈에 몇줄 바뀌었는지? 어느 파일이 자주 바뀌었는지? 등을 다 파악할 수 있다. 이는 추후에 버그트래킹, 퍼포먼스/품질 관리 등에 쓰이기 좋은 정보들이다.&lt;/p&gt;
&lt;p&gt;브랜치를 나누어서 특점 시점에서 개발 로그를 다르게 남길 수도 있다.&lt;/p&gt;
&lt;p&gt;여러사람이 동시에 작업할 수도 있다.&lt;/p&gt;
&lt;p&gt;이는 작은 프로젝트든 큰 프로젝트든 어디든 다 쓰일 수 있다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h2 id=&quot;tip-23-언제나-소스코드-관리-시스템을-사용하라&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tip-23-%EC%96%B8%EC%A0%9C%EB%82%98-%EC%86%8C%EC%8A%A4%EC%BD%94%EB%93%9C-%EA%B4%80%EB%A6%AC-%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC&quot; aria-label=&quot;tip 23 언제나 소스코드 관리 시스템을 사용하라 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tip 23. 언제나 소스코드 관리 시스템을 사용하라!&lt;/h2&gt;
&lt;/blockquote&gt;
&lt;p&gt;전체 프로젝트를 제품 빌드를 자동화하고 반복작업을 가능하게 한다.&lt;/p&gt;
&lt;p&gt;갓-깃 씁시다.&lt;/p&gt;
&lt;h2 id=&quot;18-디버깅&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#18-%EB%94%94%EB%B2%84%EA%B9%85&quot; aria-label=&quot;18 디버깅 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;18. 디버깅&lt;/h2&gt;
&lt;p&gt;프로그램은 &lt;em&gt;완벽하게&lt;/em&gt; 짤 수 없다. 그렇다면 디버깅에 관련한 문제를 알아보고 찾기 힘든 버그를 찾아내는 일반적인 전략 몇가지를 알아보자. 피할 수 없으면 효율적으로 격파해야지! &lt;/p&gt;
&lt;p&gt;안되는 코드는 풀어내면 된다. 그 방법중에 하나가 디버깅이다. 못짠 코드는 누구나 만들어낼 수 있다. 절대로 다른 팀원을 비난하면 안 된다!&lt;/p&gt;
&lt;blockquote&gt;
&lt;h2 id=&quot;tip-24-비난-대신-문제를-해결하라&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tip-24-%EB%B9%84%EB%82%9C-%EB%8C%80%EC%8B%A0-%EB%AC%B8%EC%A0%9C%EB%A5%BC-%ED%95%B4%EA%B2%B0%ED%95%98%EB%9D%BC&quot; aria-label=&quot;tip 24 비난 대신 문제를 해결하라 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tip 24. 비난 대신 문제를 해결하라.&lt;/h2&gt;
&lt;/blockquote&gt;
&lt;p&gt;디버깅하면 &lt;strong&gt;내 코드가 틀릴 수 있다&lt;/strong&gt;는 걸 염두에 두고 해야한다. 디버깅 때는 프로젝트의 압박이 있다하더라도 다음 철칙을 항상 염두에 두자!&lt;/p&gt;
&lt;blockquote&gt;
&lt;h2 id=&quot;tip-25-디버깅을-할-때-당황하지-마라&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tip-25-%EB%94%94%EB%B2%84%EA%B9%85%EC%9D%84-%ED%95%A0-%EB%95%8C-%EB%8B%B9%ED%99%A9%ED%95%98%EC%A7%80-%EB%A7%88%EB%9D%BC&quot; aria-label=&quot;tip 25 디버깅을 할 때 당황하지 마라 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tip 25. 디버깅을 할 때 당황하지 마라.&lt;/h2&gt;
&lt;/blockquote&gt;
&lt;p&gt;뭐 때문에 버그가 생겼는지, 인과관계가 어떻게 되어있는지 생각해보는게 정말 중요하다. 버그가 터져도 ‘와 말도 안돼’, ‘버그 터질리가 없는데’ 같은 소리는 의미가 없다. 왜냐고? 진짜 터졌으니까.&lt;/p&gt;
&lt;p&gt;디버깅할 때는 ‘근시’를 조심해야 한다. 바로 눈에 터지는 것만 없애려 하지말고 문제의 &lt;code class=&quot;language-text&quot;&gt;근본적인 원인&lt;/code&gt;을 분석해서 어떻게 터지는지 분석해야 한다. 특정 증상만 고치지 마라!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;어디에서부터 디버깅해야되나?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;사실 버그 리포트는 정확한 과학이 못 된다… 우연히 어떻게 터졌는지 모르는 것들이기 때문이다. 자세한 사항을 보기 위해 실제 버그가 어떤 상황에 정확히 어떻게하면 터지는지를 알아야한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;가능하다면 처음 받은 자료 이상을 얻기 위해서 버그 리포트한 사용자를 인터뷰할 필요가 있다.&lt;/li&gt;
&lt;li&gt;경계 조건, 실제 최종 사용자 패턴 모두를 철저히 테스트해야한다.&lt;/li&gt;
&lt;li&gt;디버깅 전략&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;데이터를 가시화하라!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;프로그램이 다루는 데이터가 어떤거인지 살펴보자. GUI라면 대화상자 필드, 변수이름 = 자료값 이정도일 것.&lt;/li&gt;
&lt;li&gt;데이터와 데이터가 어떻게 데이터를 주고받는지 시각적으로 보여주는 디버거를 쓰면 보다 쉽게 오류를 찾아낼 수 있다!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;트레이싱(tracing)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;트레이싱 구문은 디버거를 쓸 때 ‘여기까지 도달’, ‘x값 = 2’등 파일에 뿌려주는 진단용 메시지를 말한다. call tree를 타고 내려갈 때도 쓴다. 이런 구문은 규칙적이고 일관적이어야 분석하기 편하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;고무오리&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;문제를 그냥 쭉 설명해보다보면 ‘아차’하고 실수한 부분을 체크할 수 있다. 그런 통찰을 가끔씩 할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;제거 과정: 내 코드가 문제냐, OS가 문제냐?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OS의 코드가 고장날 확률이 높을까, 내 코드가 고장날 확률이 높을까? 아래의 팁은 이런 문제와 관련해서 관련 일화를 하나 소개한다.&lt;/li&gt;
&lt;li&gt;해당 일화를 요약하자면 코드의 어디가 망가졌는지 문서를 정독해서 원인을 찾았다는 말. 문제는 바로 본인의 &lt;code class=&quot;language-text&quot;&gt;select&lt;/code&gt; 관련 코드였던 것이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;h2 id=&quot;tip-26-select는-망가지지-않았다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tip-26-select%EB%8A%94-%EB%A7%9D%EA%B0%80%EC%A7%80%EC%A7%80-%EC%95%8A%EC%95%98%EB%8B%A4&quot; aria-label=&quot;tip 26 select는 망가지지 않았다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tip 26. ‘select’는 망가지지 않았다.&lt;/h2&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;놀람의 요소&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;버그가 터지면 내가 제대로 짰다 하는걸 처음부터 다시 생각하라. 버그가 안터지겠다 싶은 곳에서부터 경계조건을 테스트하고 몇번 돌려써도 안터질 코드인가 다시 생각해야한다. 납득하기 싫지만 내 가정이 잘못되었을 수 있다. 뭘 어떻게 가정하고 돌렸을지를 파악하고 데이터로 경계조건으로 코드가 옳음을 ‘증명’하라!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;h2 id=&quot;tip-27-가정하지-마라-증명하라&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tip-27-%EA%B0%80%EC%A0%95%ED%95%98%EC%A7%80-%EB%A7%88%EB%9D%BC-%EC%A6%9D%EB%AA%85%ED%95%98%EB%9D%BC&quot; aria-label=&quot;tip 27 가정하지 마라 증명하라 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tip 27. 가정하지 마라. 증명하라.&lt;/h2&gt;
&lt;/blockquote&gt;
&lt;p&gt;버그를 고쳤다면, 이 버그가 왜 일찍 보이지 않았을까? 생각할 필요가 있다. 이 버그를 일찍 잡을 수 있도록 단위 테스트나 다른 테스트를 수정할 필요가 있는지도 고려하는 것이 좋다. 이거 비슷한 오류가 터질 코드가 있을 것 같으면 지금 같이 수정하면 된다.&lt;/p&gt;
&lt;p&gt;위 글을 통해 디버깅 체크리스트를 책에서는 제시한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;보고된 문제가 내재하는 버그의 직접적인 결과인가, 아니면 단순히 증상인가?&lt;/li&gt;
&lt;li&gt;버그가 정말로 컴파일러, OS코드에 있나? 아니면 내 코드에 있나?&lt;/li&gt;
&lt;li&gt;이 버그를 팀원에게 설명한다 하면 어떻게 말할 것인가?&lt;/li&gt;
&lt;li&gt;의심되는 코드가 단위 테스트를 통과한다면, 테스트는 충분히 완전한 것인가? 이 데이터로 단위 테스트를 돌린다면 무슨일이 일어나는가?&lt;/li&gt;
&lt;li&gt;이 버그를 일으킨 조건이 다른 곳에도 존재하는가?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;19-텍스트-처리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#19-%ED%85%8D%EC%8A%A4%ED%8A%B8-%EC%B2%98%EB%A6%AC&quot; aria-label=&quot;19 텍스트 처리 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;19. 텍스트 처리&lt;/h2&gt;
&lt;p&gt;텍스트 처리를 위해 awk, sed같은툴이나 쉘 뿐 아니라 파이썬이나 펄도 배울 필요가 있다!&lt;/p&gt;
&lt;p&gt;어떤걸 처리하는데는 다른 특정 언어가 더 나을 수도 있다. 다른언어들로 구현해봤을 때 얼마나 짧고 빠르게 구현할 수 있는가를 논했을 때 C가 150줄일 때 펄은 17줄이면 끝일 정도니까(책피셜)&lt;/p&gt;
&lt;blockquote&gt;
&lt;h2 id=&quot;tip-28-텍스트-처리-언어를-하나-익혀라&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tip-28-%ED%85%8D%EC%8A%A4%ED%8A%B8-%EC%B2%98%EB%A6%AC-%EC%96%B8%EC%96%B4%EB%A5%BC-%ED%95%98%EB%82%98-%EC%9D%B5%ED%98%80%EB%9D%BC&quot; aria-label=&quot;tip 28 텍스트 처리 언어를 하나 익혀라 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tip 28. 텍스트 처리 언어를 하나 익혀라.&lt;/h2&gt;
&lt;/blockquote&gt;
&lt;p&gt;텍스트 처리 언어의 적용범위는 상당히 넓다:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DB스키마 관리: 스크립트로 스키마 정의 파일을 읽고 다음의 요소들을 생성해낼 수 있다.&lt;/li&gt;
&lt;li&gt;자바 속성 액세스: 파일 내 각 &lt;code class=&quot;language-text&quot;&gt;property&lt;/code&gt;를 파악하고 &lt;code class=&quot;language-text&quot;&gt;getter/setter&lt;/code&gt;를 만들어낼 수 있다.&lt;/li&gt;
&lt;li&gt;테스트 데이터 생성: 파일에 다른 포맷으로 분리된 데이터를 재조립해서 DB에 넣기 편하게 개조가능하다.&lt;/li&gt;
&lt;li&gt;C에서 Object Pascal 인터페이스로: C헤더파일을 해석해서 모든 함수와 그것들이 사용하는 데이터 구조의 정의를 추출시켜주는 툴 제작 가능. 이게 빌드의 일부분이 되면 바뀔 때마다 자동적용…&lt;/li&gt;
&lt;li&gt;웹문서 생성: 각종 DB스키마, 소스파일, makefile, 등 기타 프로젝트 소스들을 읽어서 자동으로 HTML문서화 가능. &lt;a href=&quot;http://woowabros.github.io/experience/2018/12/28/spring-rest-docs.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;이런 것을&lt;/a&gt; 말하는 것 같음.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;20-코드-생성기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#20-%EC%BD%94%EB%93%9C-%EC%83%9D%EC%84%B1%EA%B8%B0&quot; aria-label=&quot;20 코드 생성기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;20. 코드 생성기&lt;/h2&gt;
&lt;p&gt;똑같은걸 만들 때는 템플릿을 써먹으면 된다. 잘만든 템플릿은 두고두고 써먹는다. 반복되는 작업을 통한 실수를 대폭 줄여주고 실제로 해야할 구현에만 집중할 수 있게 해준다.&lt;/p&gt;
&lt;p&gt;코드 생성기는 그래서 중요하다. 잘 만든 코드 생성기는 프로젝트 전 기간에 그냥 거저로 써먹을 수 있다!&lt;/p&gt;
&lt;blockquote&gt;
&lt;h2 id=&quot;tip-29-코드를-작성하는-코드를-작성하라&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tip-29-%EC%BD%94%EB%93%9C%EB%A5%BC-%EC%9E%91%EC%84%B1%ED%95%98%EB%8A%94-%EC%BD%94%EB%93%9C%EB%A5%BC-%EC%9E%91%EC%84%B1%ED%95%98%EB%9D%BC&quot; aria-label=&quot;tip 29 코드를 작성하는 코드를 작성하라 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tip 29. 코드를 작성하는 코드를 작성하라.&lt;/h2&gt;
&lt;/blockquote&gt;
&lt;p&gt;코드 생성기는 다음 두가지로 분류된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;수동적 코드 생성기&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;결과수행을 위해 한번만 실행됨; 그 다음부터의 결과물은 독립적인 것&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;타이핑을 줄여줌&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;새 소스파일 생성(스켈레톤 코드)&lt;/li&gt;
&lt;li&gt;프로그래밍 언어간 일회용 변환 수행&lt;/li&gt;
&lt;li&gt;런타임이 계산하기엔 비용이 많이 드는 참조 테이블과 여타 자원 생성&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;능동적 코드 생성기:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;코드 생성이 필요할 때마다 작동됨&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DRY 원칙을 따르는 요소.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;어떤 형태의 스크립트나 컨트롤 파일을 읽어서 자동으로 변경을 감지하는 것을 의미&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[실용주의 프로그래머 pt. 3]]></title><description><![CDATA[실용주의 프로그래머 2nd edition을 읽은 후... pt. 3]]></description><link>https://blog.s3ich4n.me/posts/books/pragmatic-programmer-pt-3</link><guid isPermaLink="false">https://blog.s3ich4n.me/posts/books/pragmatic-programmer-pt-3</guid><pubDate>Fri, 23 Feb 2018 00:00:00 GMT</pubDate><content:encoded>&lt;h3 id=&quot;읽기에-앞서&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9D%BD%EA%B8%B0%EC%97%90-%EC%95%9E%EC%84%9C&quot; aria-label=&quot;읽기에 앞서 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;읽기에 앞서…&lt;/h3&gt;
&lt;p&gt;실용주의 프로그래머를 읽고 느낀점을 써보려고 합니다. 제가 느낀바로는 이러한 내용이다 하는 방향으로 기술할 것 같습니다.&lt;/p&gt;
&lt;h1 id=&quot;제-2장-실용주의-접근법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A0%9C-2%EC%9E%A5-%EC%8B%A4%EC%9A%A9%EC%A3%BC%EC%9D%98-%EC%A0%91%EA%B7%BC%EB%B2%95&quot; aria-label=&quot;제 2장 실용주의 접근법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;제 2장. 실용주의 접근법&lt;/h1&gt;
&lt;p&gt;이 장에서는 소프트웨어 개발에 있어 반드시 적용되는 아이디어나 보편화된 프로세스에 대해 소개한다.&lt;/p&gt;
&lt;p&gt;중복의 해악과 직교성(Orthogonality):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;전자? 시스템을 통틀어 어떤 지식을 중복하지 마라.&lt;/li&gt;
&lt;li&gt;후자? 하나의 지식을 여러 개의 컴포넌트에 걸쳐 쪼개어놓지 마라.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;가역성(Reversibility):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;변화하는 환경에서 프로젝트를 분리하는 방법&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;예광탄(Tracer bullets):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;요구사항을 모음, 설계를 테스트, 코드를 구현함… 이런류의 개발 스타일을 소개함.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;프로토타입과 포스트잇:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;아키텍처, 알고리즘, 인터페이스, 아이디어를 구현하기 위해 프로토타입을 어떻게 쓰는가에 대한 이야기를 함.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;도메인 언어(Domain Language):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;???&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;추정(Estimating):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;이정도 개발이면 이정도 쯤 걸리겠는데? 하고 감잡는 방법을 소개&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;7-중복의-해악&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#7-%EC%A4%91%EB%B3%B5%EC%9D%98-%ED%95%B4%EC%95%85&quot; aria-label=&quot;7 중복의 해악 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;7. 중복의 해악&lt;/h2&gt;
&lt;p&gt;지식은 변화한다. 요구사항이 바뀔 수도 있고 알고리즘이 안돌아가서 변경될 수 있고 그에 맞게 기능도 바뀐다. 한마디로 하자면 유지보수는 개발과 이어지는 부분이다 라고할 수 있다.
유지보수를 하려면 사물의 표현방식을 바꿔야함. 객체화한 것들, 캡슐화한 부분들 등… 그렇지만 개발할 때 명세와 프로세스에 지식을 중복해서 넣기 쉽다는 점이다. 이것을 방지하기 위한 원칙은 DRY 원칙이다. 정의는 다음과 같다.&lt;/p&gt;
&lt;p&gt;모든 지식은 시스템 내에서 단일하고, 애매하지 않고, 믿을만한 표현양식을 가져야 한다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h2 id=&quot;tip-11-dry---dont-repeat-yourself&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tip-11-dry---dont-repeat-yourself&quot; aria-label=&quot;tip 11 dry   dont repeat yourself permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tip 11. DRY - Don’t Repeat Yourself&lt;/h2&gt;
&lt;/blockquote&gt;
&lt;p&gt;DRY를 따르지 않는다: 똑같은 것이 여러곳에 반복된다는 것이다. -&gt; 지옥의 유지보수&lt;/p&gt;
&lt;p&gt;중복이 어떻게 생기는가?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;강요된(impose) 중복: 환경이 중복을 요구한다&lt;/li&gt;
&lt;li&gt;부주의한 중복: 개발자들이 중복하고 있다는 것을 인지하지 못함&lt;/li&gt;
&lt;li&gt;참을성 없는 중복: 중복이 쉬워보이기 때문에 개발자들이 게을러져서&lt;/li&gt;
&lt;li&gt;개발자 간의 중복: 한팀에 있는(다른팀에 있는) 여러 사람이 동일한 정보를 중복&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;강요된 중복:
필요한 지식을 한곳에 두도록 하는 기법들&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;정보의 다양한 표현방식: 코딩할 때 동일한 정보가 다른 형태로 표현될 때가 있다. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;공통된 구조를 다른 요소에서 서로 표현해야할 때&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;코드 생성기를 통해 두 요소의 표현을 자동화한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;코드 내의 문서화&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[실용주의 프로그래머 pt. 2]]></title><description><![CDATA[실용주의 프로그래머 2nd edition을 읽은 후... pt. 2]]></description><link>https://blog.s3ich4n.me/posts/books/pragmatic-programmer-pt-2</link><guid isPermaLink="false">https://blog.s3ich4n.me/posts/books/pragmatic-programmer-pt-2</guid><pubDate>Wed, 21 Feb 2018 12:00:00 GMT</pubDate><content:encoded>&lt;h3 id=&quot;읽기에-앞서&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9D%BD%EA%B8%B0%EC%97%90-%EC%95%9E%EC%84%9C&quot; aria-label=&quot;읽기에 앞서 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;읽기에 앞서…&lt;/h3&gt;
&lt;p&gt;실용주의 프로그래머를 읽고 느낀점을 써보려고 합니다. 제가 느낀바로는 이러한 내용이다 하는 방향으로 기술할 것 같습니다.&lt;/p&gt;
&lt;h1 id=&quot;제-1장-실용주의-철학&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A0%9C-1%EC%9E%A5-%EC%8B%A4%EC%9A%A9%EC%A3%BC%EC%9D%98-%EC%B2%A0%ED%95%99&quot; aria-label=&quot;제 1장 실용주의 철학 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;제 1장. 실용주의 철학&lt;/h1&gt;
&lt;p&gt;이 장에서는 문제에 어떻게 접근해야 하는지에 대한 철학을 알려준다.&lt;/p&gt;
&lt;h2 id=&quot;1-고양이가-내-소스코드를-삼켰어요&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EA%B3%A0%EC%96%91%EC%9D%B4%EA%B0%80-%EB%82%B4-%EC%86%8C%EC%8A%A4%EC%BD%94%EB%93%9C%EB%A5%BC-%EC%82%BC%EC%BC%B0%EC%96%B4%EC%9A%94&quot; aria-label=&quot;1 고양이가 내 소스코드를 삼켰어요 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 고양이가 내 소스코드를 삼켰어요:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;내가 한 일에 대해선 책임을 져라. 안돌아가면 변명하지 말고 대안을 찾아야 한다.&lt;/li&gt;
&lt;li&gt;본인의 실력에 대해 자부심을 가질 필요가 있다. 그런만큼 실수를 인정할 필요도 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;h2 id=&quot;tip-3-어설픈-변명은-하지-말고-대안을-제시해라&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tip-3-%EC%96%B4%EC%84%A4%ED%94%88-%EB%B3%80%EB%AA%85%EC%9D%80-%ED%95%98%EC%A7%80-%EB%A7%90%EA%B3%A0-%EB%8C%80%EC%95%88%EC%9D%84-%EC%A0%9C%EC%8B%9C%ED%95%B4%EB%9D%BC&quot; aria-label=&quot;tip 3 어설픈 변명은 하지 말고 대안을 제시해라 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tip 3. 어설픈 변명은 하지 말고 대안을 제시해라.&lt;/h2&gt;
&lt;/blockquote&gt;
&lt;p&gt;코드를 버려야하나? 리팩토링 가능
뭘 구현해야하지? 프로토타입 구현으로 먼저 보여줌
테스팅, 자동화도 도입해야할 요소&lt;/p&gt;
&lt;p&gt;SE시간에 빤히 배웠던 것들을 다시금 강조한다.&lt;/p&gt;
&lt;p&gt;부탁하고 묻고 하는 것에 두려움이 없어야 한다. 혼자 끙끙 앓으면 나만 아프다.&lt;/p&gt;
&lt;h2 id=&quot;2-소프트웨어-엔트로피&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%EC%97%94%ED%8A%B8%EB%A1%9C%ED%94%BC&quot; aria-label=&quot;2 소프트웨어 엔트로피 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 소프트웨어 엔트로피&lt;/h2&gt;
&lt;p&gt;프로그램을 짜면 필연적으로 누더기 코드가 생긴다.
‘깨진창문 이론’을 생각하자! 작살났거나 쪼대로 짠 코드는 다른 코드도 대충짜게 만든다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h2 id=&quot;tip-4-깨진창문을-내버려두지-마라&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tip-4-%EA%B9%A8%EC%A7%84%EC%B0%BD%EB%AC%B8%EC%9D%84-%EB%82%B4%EB%B2%84%EB%A0%A4%EB%91%90%EC%A7%80-%EB%A7%88%EB%9D%BC&quot; aria-label=&quot;tip 4 깨진창문을 내버려두지 마라 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tip 4. 깨진창문을 내버려두지 마라.&lt;/h2&gt;
&lt;/blockquote&gt;
&lt;p&gt;영 좋지않은 코드는 주석처리를 하든, 더미 데이터를 넣어놓든 해야한다.&lt;/p&gt;
&lt;p&gt;시간이 촉박하거나 데모를 보여줘야할 땐 물론 급하게 돌아가게는 만들어야한다. 하지만 이는 반드시 수정되어야한다. 이러한 행동을 하지도 않는게 좋겠지.&lt;/p&gt;
&lt;p&gt;멍청한 코드는 프로젝트를 망가뜨리는 지름길이기 때문이다.&lt;/p&gt;
&lt;h2 id=&quot;3-돌멩이-수프와-삶은-개구리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%EB%8F%8C%EB%A9%A9%EC%9D%B4-%EC%88%98%ED%94%84%EC%99%80-%EC%82%B6%EC%9D%80-%EA%B0%9C%EA%B5%AC%EB%A6%AC&quot; aria-label=&quot;3 돌멩이 수프와 삶은 개구리 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. 돌멩이 수프와 삶은 개구리&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Stone_Soup&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;돌죽&lt;/a&gt; 일화를 말한다.&lt;/p&gt;
&lt;p&gt;킥스타팅은 별게 아니라 걍 &lt;code class=&quot;language-text&quot;&gt;쉬운걸 구현&lt;/code&gt;하는데서 시작한다는 말이다.&lt;/p&gt;
&lt;p&gt;작년에 프로젝트를 해보면서 틀만 짜놓고 퍼졌던 적이 있다. 그래 뭐 이정도는 했지 ㅋㅋㅋ 하고 자만하고 끝이었는데, 다시보니 그때부터 시작이었던 것이다. 나부터 &lt;code class=&quot;language-text&quot;&gt;변화의 촉매&lt;/code&gt;가 되어야 한다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h2 id=&quot;tip-5-변화의-촉매가-되어라&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tip-5-%EB%B3%80%ED%99%94%EC%9D%98-%EC%B4%89%EB%A7%A4%EA%B0%80-%EB%90%98%EC%96%B4%EB%9D%BC&quot; aria-label=&quot;tip 5 변화의 촉매가 되어라 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tip 5. 변화의 촉매가 되어라!&lt;/h2&gt;
&lt;/blockquote&gt;
&lt;p&gt;그렇지만, 기능을 잡아넣기만 하면 프로젝트가 뒤틀린다. 세세한거에 집중하다보니 원했던 구현이 되지 않는다. 책의 내용을 그대로 인용하자면 다음과 같다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(중략) 프로젝트 폭주는 대부분 어느날 갑자기 일어난다. 코드에 패치가 하나 둘 적용되다가 원본이 하나도 남지 않을 때 까지, 시스템은 명세에서부터 기능 하나하나씩 정처 없이 떠다닌다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;그러니까 항상 ‘큰 그림을 기억해야’ 한다. 프로젝트가 어떻게 만들어질지 생각했으면 그거대로 만들어야한다 이말이다. 요구사항과 설계가 이래서 중요하나 싶다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h2 id=&quot;tip-6-큰-그림을-기억하라&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tip-6-%ED%81%B0-%EA%B7%B8%EB%A6%BC%EC%9D%84-%EA%B8%B0%EC%96%B5%ED%95%98%EB%9D%BC&quot; aria-label=&quot;tip 6 큰 그림을 기억하라 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tip 6. 큰 그림을 기억하라!&lt;/h2&gt;
&lt;/blockquote&gt;
&lt;p&gt;개구리는 서서히 끓는 냄비속에서 ‘어 따뜻해지네?’ 하다가 죽는다. 변화를 감지하지 못한 채로 있다가 방황할지도 모른다.&lt;/p&gt;
&lt;p&gt;이 주제는 정말 중요한 질문을 던지며 마무리한다. &lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;stone soup story에서의 변화와 개구리를 점진적으로 속이는 변화의 차이는 뭘까? &lt;/li&gt;
&lt;li&gt;내가 일으킨 변화는 팀에있어 스톤수프 변화일까, 개구리수프 변화일까?&lt;/li&gt;
&lt;li&gt;이 판단은 주관적일까, 객관적일까?&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;4-적당히-괜찮은-소프트웨어&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-%EC%A0%81%EB%8B%B9%ED%9E%88-%EA%B4%9C%EC%B0%AE%EC%9D%80-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4&quot; aria-label=&quot;4 적당히 괜찮은 소프트웨어 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. 적당히 괜찮은 소프트웨어&lt;/h2&gt;
&lt;p&gt;‘적당히 괜찮은’ 이란 말은 영 좋지않은 코드를 말하는게 아니다. 이건 책을 그대로 인용해서 이해하는 것이 좋겠다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(중략) 시스템이 성공하려면 사용자의 요구사항을 충족해야 한다. 단지 우리는 여러분이 생산해낸 것이 어느 정도면 적당히 괜찮은지를 결정하는 과정에 사용자가 참가할 기회를 가져야 한다는 걸 말하고 있는 것이다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;피드백&lt;/code&gt;을 얻을 필요가 있다 이말. ‘얼마나 좋아야’되는가? 에 대한 질문은 유저들이 대답해줄 것이다. 프로토타입을 내어주고 그에 대한 피드백으로 개발할 수도 있는 부분이다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h2 id=&quot;tip-7-품질을-요구사항으로-만들어라&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tip-7-%ED%92%88%EC%A7%88%EC%9D%84-%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD%EC%9C%BC%EB%A1%9C-%EB%A7%8C%EB%93%A4%EC%96%B4%EB%9D%BC&quot; aria-label=&quot;tip 7 품질을 요구사항으로 만들어라 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tip 7. 품질을 요구사항으로 만들어라.&lt;/h2&gt;
&lt;/blockquote&gt;
&lt;p&gt;프로그래밍은 애초부터 완벽하게 할 수가 없다. 불-완벽한(완벽에 최대한 수렴하는) 프로그램을 짤 생각을 해야한다.&lt;/p&gt;
&lt;p&gt;내가 사용자라면?
버그가 단 하나도 없는 프로그램을 기다릴거냐?
복잡한 SW를 쓰면서 어느정도까지 버그는 감내할 수 있냐?
아니면, 결함이 더 적은 간단한 SW를 쓸거냐?&lt;/p&gt;
&lt;h2 id=&quot;5-지식-포트폴리오&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#5-%EC%A7%80%EC%8B%9D-%ED%8F%AC%ED%8A%B8%ED%8F%B4%EB%A6%AC%EC%98%A4&quot; aria-label=&quot;5 지식 포트폴리오 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5. 지식 포트폴리오&lt;/h2&gt;
&lt;p&gt;내가 가지고 있는 지식은 결국 ‘소진하는 자산(expiring assets)’ 이다. 내 지식은 옛날의 것이 되고, 그 변하는 속도는 말 그래도 &lt;code class=&quot;language-text&quot;&gt;미쳤다&lt;/code&gt; 웹은 더 미친듯이 바뀐다. 오늘 다르고 내일 다르다.&lt;/p&gt;
&lt;p&gt;그래서 책은 내가 알고있는 사실, 경험을 ‘지식 포트폴리오’로 생각하기를 권장한다. 실제 투자하고 밀접한 연관이 있는데 이는 다음과 같다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;진지한 투자자들은 주기적으로 투자하는 습관을 가지고 있다.&lt;/li&gt;
&lt;li&gt;장투로 성공하기 위한 답은 다각화다.&lt;/li&gt;
&lt;li&gt;똑똑한 투자자들은 자신의 포트폴리오를 보수적인 투자, 위험성이 큰 투자, 보상이 높은 투자 사이에서 균형을 잘 맞춘다.&lt;/li&gt;
&lt;li&gt;최대 수익을 위해 싸게 사서 비싸게 판다.&lt;/li&gt;
&lt;li&gt;포트폴리오는 주기적으로 재검토, 재조정 해야한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;프로그래머는 위의 수칙을 이렇게 응용할 수도 있다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;주기적인 투자: 꾸준히 신기술을 배워야함.&lt;/li&gt;
&lt;li&gt;다각화: 어느 분야의 특정 기술이 언제 생기고 언제 사라지는지 파악해야함. 많은 기술에 익숙하면 변화에 잘 적응할 수 있을 것이다.&lt;/li&gt;
&lt;li&gt;리스크 관리: 어느 기술이 어떻게 흥하고 망할지는 아무도 모른다. 그러니까 한기술에 몰빵하지 마라.&lt;/li&gt;
&lt;li&gt;싸게 사서 비싸게 팔기: 신기술이 생기면 적극적으로 들이대보라. 분명 리스크가 있는데, 빵 뜬 언어같으면 내가 그 언어를 ‘잘 안다’ 할 수 있다. 그건 분명 좋은 점이다.&lt;/li&gt;
&lt;li&gt;검토 및 재조정: 작년까지 잘쓰던 기술이 올해는 쌉퇴물이 될 수도 있다. 한동안 안쓰던 기술을 이제와서보니 다시 쓰더라 하기 쉽다. 그래서 많이 다뤄봐야 한다는 말.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;h2 id=&quot;tip-8-지식-포트폴리오에-주기적으로-투자하라&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tip-8-%EC%A7%80%EC%8B%9D-%ED%8F%AC%ED%8A%B8%ED%8F%B4%EB%A6%AC%EC%98%A4%EC%97%90-%EC%A3%BC%EA%B8%B0%EC%A0%81%EC%9C%BC%EB%A1%9C-%ED%88%AC%EC%9E%90%ED%95%98%EB%9D%BC&quot; aria-label=&quot;tip 8 지식 포트폴리오에 주기적으로 투자하라 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tip 8. 지식 포트폴리오에 주기적으로 투자하라.&lt;/h2&gt;
&lt;/blockquote&gt;
&lt;p&gt;본 책에서는 다음과 같은 방법을 제안함.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;매년 새 언어를 하나씩 배워라.&lt;/li&gt;
&lt;li&gt;기술 서적을 분기마다 하나씩 읽어라.&lt;/li&gt;
&lt;li&gt;비기술 서적을 읽어라. 심리학, 문화인류학, 건축학, 경영학 이런 것들 조차도..&lt;/li&gt;
&lt;li&gt;수업을 들어라. 각종 세미나, 컨퍼런스에 가보라는 말.&lt;/li&gt;
&lt;li&gt;지역 사용자 모임에 참여하라. 고립되면 안된다. 개발자 모임에 가서 새로운 피를 계속 수혈받아야한다.&lt;/li&gt;
&lt;li&gt;다른 환경에서 실험해보라. 윈도우도 써보고 맥도 써보고 유닉스도 써보고 하여튼 다 써봐야함. ./configure, makefile, make도 해봐야되고 IDE도 써봐야되고 하여튼 다 써봐야한다.&lt;/li&gt;
&lt;li&gt;트렌드를 계속 파악하고 있어야한다. subscribe! 이메일 노트도 계속 봐야한다. 맨날 쓰레기통에 주떤지지 말고&lt;/li&gt;
&lt;li&gt;인터넷을 이용하라. 구글께서는 답을 알고계신다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;http://wiki.kldp.org/wiki.php/DocbookSgml/Beginner_QA-KLDP&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;질문하는 방법&lt;/a&gt;은 kldp에도 있다. 그런 구루들에게 많이 물어서 답을 내꺼로 하자!&lt;/p&gt;
&lt;p&gt;비판적인 사고는 중요하다. ‘내 말이 옳다!’ 하는 미치광이를 멀리해야한다. 어떤 문제에 대해 무조건 풀 수 있는 답 같은건 없다. 주어진 문제를 풀 수 있는 방법은 다양하기 때문이다. 하지만 때로는 아름다운 단 하나의 답만이 존재할 수도 있다. &lt;/p&gt;
&lt;p&gt;kldp의 어느 사람의 말을 기억하자.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;프로그래밍 언어는 목적이 아니라 수단일 뿐입니다.
Buzz와 Fanboyism에 휘둘리기 보다는
하고 있는 일이 잘되게 하는 Getting Things Done에 집중하시길 추천드립니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;h2 id=&quot;tip-9-읽고-듣는-것을-비판적으로-분석하라&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tip-9-%EC%9D%BD%EA%B3%A0-%EB%93%A3%EB%8A%94-%EA%B2%83%EC%9D%84-%EB%B9%84%ED%8C%90%EC%A0%81%EC%9C%BC%EB%A1%9C-%EB%B6%84%EC%84%9D%ED%95%98%EB%9D%BC&quot; aria-label=&quot;tip 9 읽고 듣는 것을 비판적으로 분석하라 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tip 9. 읽고 듣는 것을 비판적으로 분석하라.&lt;/h2&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;6-소통하라&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#6-%EC%86%8C%ED%86%B5%ED%95%98%EB%9D%BC&quot; aria-label=&quot;6 소통하라 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;6. 소통하라!&lt;/h2&gt;
&lt;p&gt;앞서 말한걸 다 할 수 있어도 다른사람과 함께 일할 수 없다면 아무 쓸모가 없다. 혼자 일하는 프로그래머는 거의 없고 있어도 다른 누군가하고 분명 소통하고 있을 것이다. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;내가 말하고 싶은게 뭔지 파악하자.
문서에 서론, 본론, 결론 나눠서 생각하는 만큼 말할때도 다듬어서 하면 서로 좋다. 나는 할말 바로하고, 상대방은 바로 알아먹으니까.&lt;/li&gt;
&lt;li&gt;청중을 파악하자.
쓸데없이 말 할 필요가 없다. WISDOM principle을 파악하고 써먹으면 그럴 필요가 없어진다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;WISDOM: 청중 이해하기(내 말을 듣는 사람이 어떤가?)&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;키워드&lt;/th&gt;
&lt;th&gt;내용&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;What&lt;/td&gt;
&lt;td&gt;듣는 사람이 무엇을 배우길 원하는가?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Interest&lt;/td&gt;
&lt;td&gt;듣는 사람이 관심있어 하는 것은 무엇인가?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sophisticated&lt;/td&gt;
&lt;td&gt;듣는 이들이 얼마나 소양이있나?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Detail&lt;/td&gt;
&lt;td&gt;듣는 이들이 어느정도의 구체적인 내용을 원하나?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Owe&lt;/td&gt;
&lt;td&gt;누가 정보를 소유하길 원하나?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Motive&lt;/td&gt;
&lt;td&gt;듣는 이가 경청하도록 동기를 주려면 어떻게 해야할까?&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;듣는사람을 &lt;code class=&quot;language-text&quot;&gt;여섯가지&lt;/code&gt;로 먼저 파악하고 말하면 이해도가 빠르다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;언제 내가 말하면 상대방이 잘 들을까?
상대방이 듣고싶어하는 때를 잘 캐치해서 말하는 것이 좋다. 듣는이의 우선순위를 고려하는 것이 좋은 방법이 될 것이다.&lt;/li&gt;
&lt;li&gt;말하는 스타일을 골라라.
말하는 스타일이 듣는 사람이 듣고싶어하는 대로 해줘야 좋아하게 된다.&lt;/li&gt;
&lt;li&gt;멋져보이게 하라.
아래아 한글을 써도 간지나게 쓰는 사람이 있는가하면 파워포인트를 써도 그놈의 보노보노를 쓰는 사람이 있다. 뭐가 나를 돋보이게 할까? 적어도 내가 쓰는 툴의 다양한 기능을 찾아서 간지나게 해야 보는 사람도 좋고 만든 사람도 뿌듯하지 않을까?&lt;/li&gt;
&lt;li&gt;청중을 참여시켜라
문서의 초고를 독자가 보고 맘에든다/이건 싫다 하는걸로 피드백을 받을 수 있으면 도움이 된다.&lt;/li&gt;
&lt;li&gt;청자(listener)가 되어라
내가 상대 말을 먼저 잘 들어야(경청해야) 남도 내 말을 들어준다.&lt;/li&gt;
&lt;li&gt;응답하라
대답은 해줘야 핑퐁대화가 될 것 아니냐.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;cf) 이메일 의사소통:
구글 검색해라&lt;/p&gt;
&lt;blockquote&gt;
&lt;h2 id=&quot;tip-10-무엇을-말하는가와-어떻게-말하는가-모두-중요하다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tip-10-%EB%AC%B4%EC%97%87%EC%9D%84-%EB%A7%90%ED%95%98%EB%8A%94%EA%B0%80%EC%99%80-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%A7%90%ED%95%98%EB%8A%94%EA%B0%80-%EB%AA%A8%EB%91%90-%EC%A4%91%EC%9A%94%ED%95%98%EB%8B%A4&quot; aria-label=&quot;tip 10 무엇을 말하는가와 어떻게 말하는가 모두 중요하다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tip 10. &lt;code class=&quot;language-text&quot;&gt;무엇을&lt;/code&gt; 말하는가와 &lt;code class=&quot;language-text&quot;&gt;어떻게&lt;/code&gt; 말하는가 모두 중요하다&lt;/h2&gt;
&lt;/blockquote&gt;</content:encoded></item><item><title><![CDATA[실용주의 프로그래머 pt. 1]]></title><description><![CDATA[실용주의 프로그래머 2nd edition을 읽은 후... pt. 1]]></description><link>https://blog.s3ich4n.me/posts/books/pragmatic-programmer-pt-1</link><guid isPermaLink="false">https://blog.s3ich4n.me/posts/books/pragmatic-programmer-pt-1</guid><pubDate>Wed, 21 Feb 2018 00:00:00 GMT</pubDate><content:encoded>&lt;h3 id=&quot;읽기에-앞서&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9D%BD%EA%B8%B0%EC%97%90-%EC%95%9E%EC%84%9C&quot; aria-label=&quot;읽기에 앞서 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;읽기에 앞서…&lt;/h3&gt;
&lt;p&gt;실용주의 프로그래머를 읽고 느낀점을 써보려고 합니다. 제가 느낀바로는 이러한 내용이다 하는 방향으로 기술할 것 같습니다.&lt;/p&gt;
&lt;h1 id=&quot;preface&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#preface&quot; aria-label=&quot;preface permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Preface&lt;/h1&gt;
&lt;p&gt;이 책은 서장부터 바로 주요한 내용이 나오기 때문에 특별히 실었다.&lt;/p&gt;
&lt;p&gt;좋은 프로그래머가 되고싶으면 실용주의 프로그래머가 되도록 노력하면 된다.&lt;/p&gt;
&lt;p&gt;실용주의 프로그래머가 되려면?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;얼리어답터. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;신기술을 받아들이는데 적극적이어야 하는 성향을 지니면 좋다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;캐묻기 좋아한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;‘왜?‘의 중요함. 모르면 검색할 줄 아는 적극성.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;비판적인 사고의 소유자&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;인과관계를 확실히 짚을 줄 아는 사람이 되면 좋다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;현실적이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;내가 마주하는 문제가 어렵나/쉽나, 그로 인해 시간이 얼마나 걸리나를 바로 파악할 수 있는 사람을 말한다.설령 오래 걸린다 해도 얼마만큼 붙잡고 해결할 것인지까지 견적을 내보고 집요하게 달라든다고 할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;다방면의 기술에 익숙하다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;신기술을 계속 접할 필요가 있다! 후에 다시 나올 이야기이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;h2 id=&quot;tip-1-자신의-기술craft에-관심과-애정을-가져라&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tip-1-%EC%9E%90%EC%8B%A0%EC%9D%98-%EA%B8%B0%EC%88%A0craft%EC%97%90-%EA%B4%80%EC%8B%AC%EA%B3%BC-%EC%95%A0%EC%A0%95%EC%9D%84-%EA%B0%80%EC%A0%B8%EB%9D%BC&quot; aria-label=&quot;tip 1 자신의 기술craft에 관심과 애정을 가져라 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tip 1. 자신의 기술(craft)에 관심과 애정을 가져라!&lt;/h2&gt;
&lt;/blockquote&gt;
&lt;p&gt;내가 하는 일에 관심과 애정이 없으면 그건 차라리 고문이다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h2 id=&quot;tip-2-자신의-일에-생각하면서-일하라&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tip-2-%EC%9E%90%EC%8B%A0%EC%9D%98-%EC%9D%BC%EC%97%90-%EC%83%9D%EA%B0%81%ED%95%98%EB%A9%B4%EC%84%9C-%EC%9D%BC%ED%95%98%EB%9D%BC&quot; aria-label=&quot;tip 2 자신의 일에 생각하면서 일하라 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tip 2. 자신의 일에 생각하면서 일하라!&lt;/h2&gt;
&lt;p&gt;내가 하는 모든일에 있어 항상 지속적으로 비판적으로 쳐다볼 필요가 있다. 기계적으로 일하지 마라!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;이건 분명 귀찮고 힘들다. 이런 일을 계속 하면 효율적이고 유지보수 쉬운 코드를 짜게되고, 비로소 ‘실용적인 프로그래머’가 될 수 있다.&lt;/p&gt;
&lt;p&gt;장인정신은 이렇기 때문에 중요하다.&lt;/p&gt;</content:encoded></item></channel></rss>